{
  "version": 3,
  "sources": ["../../../../../../node_modules/@sutton-signwriting/sgnw-components/dist/esm/style-fd531f8d.js"],
  "sourcesContent": ["/*!\n * The Sutton SignWriting Web Components\n */\nimport { c as createCommonjsModule, a as commonjsGlobal } from './_commonjsHelpers-383fba37.js';\nvar style = createCommonjsModule(function (module, exports) {\n  /**\n  * Sutton SignWriting Core Module v1.5.4 (https://github.com/sutton-signwriting/core)\n  * Author: Steve Slevinski  (https://SteveSlevinski.me)\n  * style.js is released under the MIT License.\n  */\n\n  (function (global, factory) {\n    factory(exports);\n  })(commonjsGlobal, function (exports) {\n    /**\n     * Object of regular expressions for style strings\n     * \n     * @alias style.re\n     * @type {object}\n     * @property {string} colorize - regular expression for colorize section\n     * @property {string} colorhex - regular expression for color hex values with 3 or 6 characters\n     * @property {string} colorname - regular expression for css color name\n     * @property {string} padding - regular expression for padding section\n     * @property {string} zoom - regular expression for zoom section\n     * @property {string} classbase - regular expression for class name definition\n     * @property {string} id - regular expression for id definition\n     * @property {string} colorbase - regular expression for color hex or color name\n     * @property {string} color - regular expression for single color entry\n     * @property {string} colors - regular expression for double color entry\n     * @property {string} background - regular expression for background section\n     * @property {string} detail - regular expression for color details for line and optional fill\n     * @property {string} detailsym - regular expression for color details for individual symbols\n     * @property {string} classes - regular expression for one or more class names\n     * @property {string} full - full regular expression for style string\n     */\n    let re = {\n      'colorize': 'C',\n      'colorhex': '(?:[0-9a-fA-F]{3}){1,2}',\n      'colorname': '[a-zA-Z]+',\n      'padding': 'P[0-9]{2}',\n      'zoom': 'Z(?:[0-9]+(?:\\\\.[0-9]+)?|x)',\n      'classbase': '-?[_a-zA-Z][_a-zA-Z0-9-]{0,100}',\n      'id': '[a-zA-Z][_a-zA-Z0-9-]{0,100}'\n    };\n    re.colorbase = `(?:${re.colorhex}|${re.colorname})`;\n    re.color = `_${re.colorbase}_`;\n    re.colors = `_${re.colorbase}(?:,${re.colorbase})?_`;\n    re.background = `G${re.color}`;\n    re.detail = `D${re.colors}`;\n    re.detailsym = `D[0-9]{2}${re.colors}`;\n    re.classes = `${re.classbase}(?: ${re.classbase})*`;\n    re.full = `-(${re.colorize})?(${re.padding})?(${re.background})?(${re.detail})?(${re.zoom})?(?:-((?:${re.detailsym})*))?(?:-(${re.classes})?!(?:(${re.id})!)?)?`;\n    const prefixColor = color => {\n      const regex = new RegExp(`^${re.colorhex}$`);\n      return (regex.test(color) ? '#' : '') + color;\n    };\n    const definedProps = obj => Object.fromEntries(Object.entries(obj).filter(([k, v]) => v !== undefined));\n    /**\n     * Function to parse style string to object\n     * @function style.parse\n     * @param {string} styleString - a style string\n     * @returns {StyleObject} elements of style string\n     * @example\n     * style.parse('-CP10G_blue_D_red,Cyan_')\n     * \n     * return {\n     *  'colorize': true,\n     *  'padding': 10,\n     *  'background': 'blue',\n     *  'detail': ['red', 'Cyan']\n     * }\n     */\n\n    const parse = styleString => {\n      const regex = `^${re.full}`;\n      const m = (typeof styleString === 'string' ? styleString.match(new RegExp(regex)) : []) || [];\n      return definedProps({\n        'colorize': !m[1] ? undefined : !!m[1],\n        'padding': !m[2] ? undefined : parseInt(m[2].slice(1)),\n        'background': !m[3] ? undefined : prefixColor(m[3].slice(2, -1)),\n        'detail': !m[4] ? undefined : m[4].slice(2, -1).split(',').map(prefixColor),\n        'zoom': !m[5] ? undefined : m[5] === 'Zx' ? 'x' : parseFloat(m[5].slice(1)),\n        'detailsym': !m[6] ? undefined : m[6].match(new RegExp(re.detailsym, 'g')).map(val => {\n          const parts = val.split('_');\n          const detail = parts[1].split(',').map(prefixColor);\n          return {\n            'index': parseInt(parts[0].slice(1)),\n            'detail': detail\n          };\n        }),\n        'classes': !m[7] ? undefined : m[7],\n        'id': !m[8] ? undefined : m[8]\n      });\n    };\n\n    /**\n     * Function to compose style string from object\n     * @function style.compose\n     * @param {StyleObject} styleObject - an object of style options\n     * @returns {string} style string \n     * @example \n     * style.compose({\n     *  'colorize': true,\n     *  'padding': 10,\n     *  'background': 'blue',\n     *  'detail': ['red', 'Cyan'],\n     *  'zoom': 1.1,\n     *  'detailsym': [\n     *    {\n     *      'index': 1,\n     *      'detail': ['#ff00ff']\n     *    },\n     *    {\n     *      'index': 2,\n     *      'detail': ['yellow', 'green']\n     *    }\n     *  ],\n     *  'classes': 'primary blinking',\n     *  'id': 'cursor'\n     * })\n     *\n     * return '-CP10G_blue_D_red,Cyan_Z1.1-D01_ff00ff_D02_yellow,green_-primary blinking!cursor!'\n     */\n\n    const compose = styleObject => {\n      if (typeof styleObject !== 'object' || styleObject === null) return undefined; // three sections\n\n      let style1 = '-';\n      style1 += !styleObject.colorize ? '' : 'C';\n      const padding = parseInt(styleObject.padding);\n      style1 += !padding || padding <= 0 || padding > 99 ? '' : 'P' + (padding > 9 ? padding : '0' + padding);\n      const background = !styleObject.background || !(typeof styleObject.background === 'string') ? undefined : styleObject.background.match(re.colorbase)[0];\n      style1 += !background ? '' : 'G_' + background + '_';\n      const detail1 = !styleObject.detail || !styleObject.detail[0] || !(typeof styleObject.detail[0] === 'string') ? undefined : styleObject.detail[0].match(re.colorbase)[0];\n      const detail2 = !styleObject.detail || !styleObject.detail[1] || !(typeof styleObject.detail[1] === 'string') ? undefined : styleObject.detail[1].match(re.colorbase)[0];\n      if (detail1) {\n        style1 += 'D_' + detail1;\n        if (detail2) {\n          style1 += ',' + detail2;\n        }\n        style1 += '_';\n      }\n      const zoom = styleObject.zoom === 'x' ? 'x' : parseFloat(styleObject.zoom);\n      style1 += !zoom || zoom <= 0 ? '' : 'Z' + zoom;\n      let style2 = '';\n      const detailsym = !styleObject.detailsym || !Array.isArray(styleObject.detailsym) ? [] : styleObject.detailsym.map(styleObject => {\n        const index = parseInt(styleObject.index);\n        if (!index || index <= 0 || index > 99) return '';\n        let style = 'D' + (index > 9 ? index : '0' + index);\n        const detail1 = !styleObject.detail || !styleObject.detail[0] ? undefined : styleObject.detail[0].match(re.colorbase)[0];\n        const detail2 = !styleObject.detail || !styleObject.detail[1] ? undefined : styleObject.detail[1].match(re.colorbase)[0];\n        if (detail1) {\n          style += '_' + detail1;\n          if (detail2) {\n            style += ',' + detail2;\n          }\n          style += '_';\n        }\n        return style;\n      });\n      style2 += detailsym.join('');\n      let style3 = '';\n      const classes = !styleObject.classes || !(typeof styleObject.classes === 'string') ? undefined : styleObject.classes.match(re.classes)[0];\n      style3 += !classes ? '' : classes;\n      const id = !styleObject.id || !(typeof styleObject.id === 'string') ? undefined : styleObject.id.match(re.id)[0];\n      style3 += classes || id ? '!' : '';\n      style3 += !id ? '' : id + '!';\n      return style1 + (style2 || style3 ? '-' + style2 : '') + (style3 ? '-' + style3 : '');\n    };\n\n    /**\n     * Function to merge style objects\n     * @function style.merge\n     * @param {StyleObject} style1 - a style object\n     * @param {StyleObject} style2 - a style object\n     * @returns {StyleObject} a style object\n     * @example\n     * style.merge({'colorize': true},{zoom:2})\n     * \n     * return {\n     *  'colorize': true,\n     *  'zoom': 2\n     * }\n     */\n    const merge = (style1, style2) => {\n      if (typeof style1 !== 'object') style1 = {};\n      if (typeof style2 !== 'object') style2 = {};\n      const zoom1 = 'zoom' in style1 ? style1['zoom'] : 1;\n      const zoom2 = 'zoom' in style2 ? style2['zoom'] : 1;\n      return {\n        ...style1,\n        ...style2,\n        ...{\n          zoom: zoom1 * zoom2\n        }\n      };\n    };\n    const rgb2arr = rgb => {\n      if (typeof rgb !== 'string') return [0, 0, 0];\n      return rgb.replace(/rgba?\\((.+?)\\)/ig, (_, values) => {\n        return values;\n      }).split(',').map(Number);\n    };\n    const arr2hex = arr => {\n      return arr.slice(0, 3).map(num => num.toString(16).padStart(2, '0')).join('');\n    };\n    /**\r\n     * Function to convert rgb color to hex or \"transparent\" if below tolerance\r\n     * @function style.rgb2hex\r\n     * @param {string} rgb - an rgb color\r\n     * @param {number} [tolerance=0] - max alpha for full transparency\r\n     * @returns {string} a hex color or \"transparent\"\r\n     * @example\r\n     * style.rgb2hex(\"rgb(255,255,255)\")\r\n     * return \"ffffff\"\r\n     * \r\n     * style.rgb2hex(\"rgba(255,255,255,0.5)\",0.5)\r\n     * return \"transparent\"\r\n     */\n\n    const rgb2hex = (rgb, tolerance = 0) => {\n      const arr = rgb2arr(rgb);\n      if (arr.length == 4 && arr[3] <= tolerance) {\n        return 'transparent';\n      } else {\n        return arr2hex(arr);\n      }\n    };\n    /**\r\n     * Function to merge color with background based on alpha transparency\r\n     * @function style.rgba2hex\r\n     * @param {string} color - an rgba color\r\n     * @param {string} background - an rgba background color\r\n     * @returns {string} a hex color or \"transparent\"\r\n     * @example\r\n     * style.rgba2hex(\"rgba(255,255,255,0.5)\",\"rgb(0,0,0)\")\r\n     * \r\n     * return \"7f7f7f\"\r\n     */\n\n    const rgba2hex = (color, background) => {\n      const bArr = rgb2arr(background);\n      const cArr = rgb2arr(color);\n      const alpha = cArr.length == 4 ? cArr[3] : 1;\n      if (alpha == 0) {\n        return 'transparent';\n      } else {\n        return arr2hex(cArr.map((v, i) => parseInt((1 - alpha) * bArr[i] + alpha * v)));\n      }\n    };\n    exports.compose = compose;\n    exports.merge = merge;\n    exports.parse = parse;\n    exports.re = re;\n    exports.rgb2hex = rgb2hex;\n    exports.rgba2hex = rgba2hex;\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n  });\n\n  /* support ongoing development on https://patreon.com/signwriting */\n});\nexport { style as s };"],
  "mappings": "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",
  "names": ["exports", "styleObject", "style", "detail1", "detail2"]
}
