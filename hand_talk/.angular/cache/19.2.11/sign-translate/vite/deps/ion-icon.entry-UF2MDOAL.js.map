{
  "version": 3,
  "sources": ["../../../../../../node_modules/ionicons/dist/esm/ion-icon.entry.js"],
  "sourcesContent": ["import { r as registerInstance, h, H as Host, g as getElement } from './index-BNvuUjt3.js';\nimport { i as isStr, a as inheritAttributes, g as getUrl, b as getName, c as isRTL } from './index-CmrjKmZM.js';\nconst validateContent = svgContent => {\n  const div = document.createElement('div');\n  div.innerHTML = svgContent;\n  // setup this way to ensure it works on our buddy IE\n  for (let i = div.childNodes.length - 1; i >= 0; i--) {\n    if (div.childNodes[i].nodeName.toLowerCase() !== 'svg') {\n      div.removeChild(div.childNodes[i]);\n    }\n  }\n  // must only have 1 root element\n  const svgElm = div.firstElementChild;\n  if (svgElm && svgElm.nodeName.toLowerCase() === 'svg') {\n    const svgClass = svgElm.getAttribute('class') || '';\n    svgElm.setAttribute('class', (svgClass + ' s-ion-icon').trim());\n    // root element must be an svg\n    // lets double check we've got valid elements\n    // do not allow scripts\n    if (isValid(svgElm)) {\n      return div.innerHTML;\n    }\n  }\n  return '';\n};\nconst isValid = elm => {\n  if (elm.nodeType === 1) {\n    if (elm.nodeName.toLowerCase() === 'script') {\n      return false;\n    }\n    for (let i = 0; i < elm.attributes.length; i++) {\n      const name = elm.attributes[i].name;\n      if (isStr(name) && name.toLowerCase().indexOf('on') === 0) {\n        return false;\n      }\n    }\n    for (let i = 0; i < elm.childNodes.length; i++) {\n      if (!isValid(elm.childNodes[i])) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\nconst isSvgDataUrl = url => url.startsWith('data:image/svg+xml');\nconst isEncodedDataUrl = url => url.indexOf(';utf8,') !== -1;\nconst ioniconContent = new Map();\nconst requests = new Map();\nlet parser;\n/**\n * Safely fallback to an empty svg\n */\nfunction safeFallback(url) {\n  const svg = '';\n  ioniconContent.set(url, svg);\n  return svg;\n}\nconst getSvgContent = (url, sanitize) => {\n  /**\n   * See if we already have a request for this url\n   */\n  const req = requests.get(url);\n  if (req) {\n    return req;\n  }\n  if (typeof fetch !== 'undefined' && typeof document !== 'undefined') {\n    /**\n     * If the url is a data url of an svg, then try to parse it\n     * with the DOMParser. This works with content security policies enabled.\n     */\n    if (isSvgDataUrl(url) && isEncodedDataUrl(url)) {\n      return Promise.resolve(getSvgByUrl(url));\n    }\n    return fetchSvg(url, sanitize);\n  }\n  return Promise.resolve(safeFallback(url));\n};\nfunction getSvgByUrl(url) {\n  if (!parser) {\n    /**\n     * Create an instance of the DOM parser. This creates a single\n     * parser instance for the entire app, which is more efficient.\n     */\n    parser = new DOMParser();\n  }\n  const doc = parser.parseFromString(url, 'text/html');\n  const svg = doc.querySelector('svg');\n  if (svg) {\n    ioniconContent.set(url, svg.outerHTML);\n    return svg.outerHTML;\n  }\n  throw new Error(`Could not parse svg from ${url}`);\n}\nfunction fetchSvg(url, sanitize) {\n  /**\n   * We don't already have a request\n   */\n  const req = fetch(url).then(rsp => {\n    /**\n     * When fetching from a file:// URL, some browsers return\n     * a 0 status code even when the request succeeds so don't\n     * rely on rsp.ok as the only signal of success.\n     */\n    return rsp.text().then(svgContent => {\n      if (svgContent && sanitize !== false) {\n        svgContent = validateContent(svgContent);\n      }\n      const svg = svgContent || '';\n      ioniconContent.set(url, svg);\n      return svg;\n    }).catch(() => safeFallback(url));\n  }).catch(() => safeFallback(url));\n  /**\n   * Cache for the same requests\n   */\n  requests.set(url, req);\n  return req;\n}\nconst iconCss = \":host{display:inline-block;width:1em;height:1em;contain:strict;fill:currentColor;box-sizing:content-box !important}:host .ionicon{stroke:currentColor}.ionicon-fill-none{fill:none}.ionicon-stroke-width{stroke-width:var(--ionicon-stroke-width, 32px)}.icon-inner,.ionicon,svg{display:block;height:100%;width:100%}@supports (background: -webkit-named-image(i)){:host(.icon-rtl) .icon-inner{transform:scaleX(-1)}}@supports not selector(:dir(rtl)) and selector(:host-context([dir='rtl'])){:host(.icon-rtl) .icon-inner{transform:scaleX(-1)}}:host(.flip-rtl):host-context([dir='rtl']) .icon-inner{transform:scaleX(-1)}@supports selector(:dir(rtl)){:host(.flip-rtl:dir(rtl)) .icon-inner{transform:scaleX(-1)}:host(.flip-rtl:dir(ltr)) .icon-inner{transform:scaleX(1)}}:host(.icon-small){font-size:1.125rem !important}:host(.icon-large){font-size:2rem !important}:host(.ion-color){color:var(--ion-color-base) !important}:host(.ion-color-primary){--ion-color-base:var(--ion-color-primary, #3880ff)}:host(.ion-color-secondary){--ion-color-base:var(--ion-color-secondary, #0cd1e8)}:host(.ion-color-tertiary){--ion-color-base:var(--ion-color-tertiary, #f4a942)}:host(.ion-color-success){--ion-color-base:var(--ion-color-success, #10dc60)}:host(.ion-color-warning){--ion-color-base:var(--ion-color-warning, #ffce00)}:host(.ion-color-danger){--ion-color-base:var(--ion-color-danger, #f14141)}:host(.ion-color-light){--ion-color-base:var(--ion-color-light, #f4f5f8)}:host(.ion-color-medium){--ion-color-base:var(--ion-color-medium, #989aa2)}:host(.ion-color-dark){--ion-color-base:var(--ion-color-dark, #222428)}\";\nconst Icon = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.iconName = null;\n    this.inheritedAttributes = {};\n    this.didLoadIcon = false;\n    this.isVisible = false;\n    /**\n     * The mode determines which platform styles to use.\n     */\n    this.mode = getIonMode();\n    /**\n     * If enabled, ion-icon will be loaded lazily when it's visible in the viewport.\n     * Default, `false`.\n     */\n    this.lazy = false;\n    /**\n     * When set to `false`, SVG content that is HTTP fetched will not be checked\n     * if the response SVG content has any `<script>` elements, or any attributes\n     * that start with `on`, such as `onclick`.\n     * @default true\n     */\n    this.sanitize = true;\n  }\n  componentWillLoad() {\n    this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n  }\n  connectedCallback() {\n    /**\n     * purposely do not return the promise here because loading\n     * the svg file should not hold up loading the app\n     * only load the svg if it's visible\n     */\n    this.waitUntilVisible(this.el, '50px', () => {\n      this.isVisible = true;\n      this.loadIcon();\n    });\n  }\n  /**\n   * Loads the icon after the component has finished rendering.\n   */\n  componentDidLoad() {\n    /**\n     * Addresses an Angular issue where property values are assigned after the 'connectedCallback' but prior to the registration of watchers.\n     * This enhancement ensures the loading of an icon when the component has finished rendering and the icon has yet to apply the SVG data.\n     * This modification pertains to the usage of Angular's binding syntax:\n     * `<ion-icon [name]=\"myIconName\"></ion-icon>`\n     */\n    if (!this.didLoadIcon) {\n      this.loadIcon();\n    }\n  }\n  /**\n   * Disconnect the IntersectionObserver.\n   */\n  disconnectedCallback() {\n    if (this.io) {\n      this.io.disconnect();\n      this.io = undefined;\n    }\n  }\n  /**\n   * Wait until the icon is visible in the viewport.\n   * @param el - The element to observe.\n   * @param rootMargin - The root margin of the observer.\n   * @param cb - The callback to call when the element is visible.\n   */\n  waitUntilVisible(el, rootMargin, cb) {\n    /**\n     * IntersectionObserver is a browser API that allows you to observe\n     * the visibility of an element relative to a root element. It is\n     * supported in all modern browsers, except IE and when server-side\n     * rendering.\n     */\n    const hasIntersectionObserverSupport = Boolean(this.lazy && typeof window !== 'undefined' && window.IntersectionObserver);\n    /**\n     * browser doesn't support IntersectionObserver\n     * so just fallback to always show it\n     */\n    if (!hasIntersectionObserverSupport) {\n      return cb();\n    }\n    const io = this.io = new window.IntersectionObserver(data => {\n      if (data[0].isIntersecting) {\n        io.disconnect();\n        this.io = undefined;\n        cb();\n      }\n    }, {\n      rootMargin\n    });\n    io.observe(el);\n  }\n  /**\n   * Watch for changes to the icon name, src, icon, ios, or md properties.\n   * When a change is detected, the icon will be loaded.\n   */\n  loadIcon() {\n    if (this.isVisible) {\n      const url = getUrl(this);\n      if (url) {\n        if (ioniconContent.has(url)) {\n          // sync if it's already loaded\n          this.svgContent = ioniconContent.get(url);\n        } else {\n          // async if it hasn't been loaded\n          getSvgContent(url, this.sanitize).then(() => this.svgContent = ioniconContent.get(url));\n        }\n        this.didLoadIcon = true;\n      }\n    }\n    this.iconName = getName(this.name, this.icon, this.mode, this.ios, this.md);\n  }\n  render() {\n    const {\n      flipRtl,\n      iconName,\n      inheritedAttributes,\n      el\n    } = this;\n    const mode = this.mode || 'md';\n    /**\n     * we have designated that arrows & chevrons should automatically flip (unless flip-rtl\n     * is set to false) because \"back\" is left in ltr and right in rtl, and \"forward\" is the opposite\n     */\n    const shouldAutoFlip = iconName ? (iconName.includes('arrow') || iconName.includes('chevron')) && flipRtl !== false : false;\n    /**\n     * if shouldBeFlippable is true, the icon should change direction when `dir` changes\n     */\n    const shouldBeFlippable = flipRtl || shouldAutoFlip;\n    return h(Host, Object.assign({\n      key: '0578c899781ca145dd8205acd9670af39b57cf2e',\n      role: \"img\",\n      class: Object.assign(Object.assign({\n        [mode]: true\n      }, createColorClasses(this.color)), {\n        [`icon-${this.size}`]: !!this.size,\n        'flip-rtl': shouldBeFlippable,\n        'icon-rtl': shouldBeFlippable && isRTL(el)\n      })\n    }, inheritedAttributes), this.svgContent ? h(\"div\", {\n      class: \"icon-inner\",\n      innerHTML: this.svgContent\n    }) : h(\"div\", {\n      class: \"icon-inner\"\n    }));\n  }\n  static get assetsDirs() {\n    return [\"svg\"];\n  }\n  get el() {\n    return getElement(this);\n  }\n  static get watchers() {\n    return {\n      \"name\": [\"loadIcon\"],\n      \"src\": [\"loadIcon\"],\n      \"icon\": [\"loadIcon\"],\n      \"ios\": [\"loadIcon\"],\n      \"md\": [\"loadIcon\"]\n    };\n  }\n};\n/**\n * Get the mode of the document.\n * @returns The mode of the document.\n */\nconst getIonMode = () => typeof document !== 'undefined' && document.documentElement.getAttribute('mode') || 'md';\n/**\n * Create color classes for the icon.\n * @param color - The color of the icon.\n * @returns The color classes for the icon.\n */\nconst createColorClasses = color => {\n  return color ? {\n    'ion-color': true,\n    [`ion-color-${color}`]: true\n  } : null;\n};\nIcon.style = iconCss;\nexport { Icon as ion_icon };"],
  "mappings": ";;;;;;;;;;;;;;AAEA,IAAM,kBAAkB,gBAAc;AACpC,QAAM,MAAM,SAAS,cAAc,KAAK;AACxC,MAAI,YAAY;AAEhB,WAAS,IAAI,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG,KAAK;AACnD,QAAI,IAAI,WAAW,CAAC,EAAE,SAAS,YAAY,MAAM,OAAO;AACtD,UAAI,YAAY,IAAI,WAAW,CAAC,CAAC;AAAA,IACnC;AAAA,EACF;AAEA,QAAM,SAAS,IAAI;AACnB,MAAI,UAAU,OAAO,SAAS,YAAY,MAAM,OAAO;AACrD,UAAM,WAAW,OAAO,aAAa,OAAO,KAAK;AACjD,WAAO,aAAa,UAAU,WAAW,eAAe,KAAK,CAAC;AAI9D,QAAI,QAAQ,MAAM,GAAG;AACnB,aAAO,IAAI;AAAA,IACb;AAAA,EACF;AACA,SAAO;AACT;AACA,IAAM,UAAU,SAAO;AACrB,MAAI,IAAI,aAAa,GAAG;AACtB,QAAI,IAAI,SAAS,YAAY,MAAM,UAAU;AAC3C,aAAO;AAAA,IACT;AACA,aAAS,IAAI,GAAG,IAAI,IAAI,WAAW,QAAQ,KAAK;AAC9C,YAAM,OAAO,IAAI,WAAW,CAAC,EAAE;AAC/B,UAAI,MAAM,IAAI,KAAK,KAAK,YAAY,EAAE,QAAQ,IAAI,MAAM,GAAG;AACzD,eAAO;AAAA,MACT;AAAA,IACF;AACA,aAAS,IAAI,GAAG,IAAI,IAAI,WAAW,QAAQ,KAAK;AAC9C,UAAI,CAAC,QAAQ,IAAI,WAAW,CAAC,CAAC,GAAG;AAC/B,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;AACA,IAAM,eAAe,SAAO,IAAI,WAAW,oBAAoB;AAC/D,IAAM,mBAAmB,SAAO,IAAI,QAAQ,QAAQ,MAAM;AAC1D,IAAM,iBAAiB,oBAAI,IAAI;AAC/B,IAAM,WAAW,oBAAI,IAAI;AACzB,IAAI;AAIJ,SAAS,aAAa,KAAK;AACzB,QAAM,MAAM;AACZ,iBAAe,IAAI,KAAK,GAAG;AAC3B,SAAO;AACT;AACA,IAAM,gBAAgB,CAAC,KAAK,aAAa;AAIvC,QAAM,MAAM,SAAS,IAAI,GAAG;AAC5B,MAAI,KAAK;AACP,WAAO;AAAA,EACT;AACA,MAAI,OAAO,UAAU,eAAe,OAAO,aAAa,aAAa;AAKnE,QAAI,aAAa,GAAG,KAAK,iBAAiB,GAAG,GAAG;AAC9C,aAAO,QAAQ,QAAQ,YAAY,GAAG,CAAC;AAAA,IACzC;AACA,WAAO,SAAS,KAAK,QAAQ;AAAA,EAC/B;AACA,SAAO,QAAQ,QAAQ,aAAa,GAAG,CAAC;AAC1C;AACA,SAAS,YAAY,KAAK;AACxB,MAAI,CAAC,QAAQ;AAKX,aAAS,IAAI,UAAU;AAAA,EACzB;AACA,QAAM,MAAM,OAAO,gBAAgB,KAAK,WAAW;AACnD,QAAM,MAAM,IAAI,cAAc,KAAK;AACnC,MAAI,KAAK;AACP,mBAAe,IAAI,KAAK,IAAI,SAAS;AACrC,WAAO,IAAI;AAAA,EACb;AACA,QAAM,IAAI,MAAM,4BAA4B,GAAG,EAAE;AACnD;AACA,SAAS,SAAS,KAAK,UAAU;AAI/B,QAAM,MAAM,MAAM,GAAG,EAAE,KAAK,SAAO;AAMjC,WAAO,IAAI,KAAK,EAAE,KAAK,gBAAc;AACnC,UAAI,cAAc,aAAa,OAAO;AACpC,qBAAa,gBAAgB,UAAU;AAAA,MACzC;AACA,YAAM,MAAM,cAAc;AAC1B,qBAAe,IAAI,KAAK,GAAG;AAC3B,aAAO;AAAA,IACT,CAAC,EAAE,MAAM,MAAM,aAAa,GAAG,CAAC;AAAA,EAClC,CAAC,EAAE,MAAM,MAAM,aAAa,GAAG,CAAC;AAIhC,WAAS,IAAI,KAAK,GAAG;AACrB,SAAO;AACT;AACA,IAAM,UAAU;AAChB,IAAM,OAAO,MAAM;AAAA,EACjB,YAAY,SAAS;AACnB,qBAAiB,MAAM,OAAO;AAC9B,SAAK,WAAW;AAChB,SAAK,sBAAsB,CAAC;AAC5B,SAAK,cAAc;AACnB,SAAK,YAAY;AAIjB,SAAK,OAAO,WAAW;AAKvB,SAAK,OAAO;AAOZ,SAAK,WAAW;AAAA,EAClB;AAAA,EACA,oBAAoB;AAClB,SAAK,sBAAsB,kBAAkB,KAAK,IAAI,CAAC,YAAY,CAAC;AAAA,EACtE;AAAA,EACA,oBAAoB;AAMlB,SAAK,iBAAiB,KAAK,IAAI,QAAQ,MAAM;AAC3C,WAAK,YAAY;AACjB,WAAK,SAAS;AAAA,IAChB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,mBAAmB;AAOjB,QAAI,CAAC,KAAK,aAAa;AACrB,WAAK,SAAS;AAAA,IAChB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,uBAAuB;AACrB,QAAI,KAAK,IAAI;AACX,WAAK,GAAG,WAAW;AACnB,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB,IAAI,YAAY,IAAI;AAOnC,UAAM,iCAAiC,QAAQ,KAAK,QAAQ,OAAO,WAAW,eAAe,OAAO,oBAAoB;AAKxH,QAAI,CAAC,gCAAgC;AACnC,aAAO,GAAG;AAAA,IACZ;AACA,UAAM,KAAK,KAAK,KAAK,IAAI,OAAO,qBAAqB,UAAQ;AAC3D,UAAI,KAAK,CAAC,EAAE,gBAAgB;AAC1B,WAAG,WAAW;AACd,aAAK,KAAK;AACV,WAAG;AAAA,MACL;AAAA,IACF,GAAG;AAAA,MACD;AAAA,IACF,CAAC;AACD,OAAG,QAAQ,EAAE;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW;AACT,QAAI,KAAK,WAAW;AAClB,YAAM,MAAM,OAAO,IAAI;AACvB,UAAI,KAAK;AACP,YAAI,eAAe,IAAI,GAAG,GAAG;AAE3B,eAAK,aAAa,eAAe,IAAI,GAAG;AAAA,QAC1C,OAAO;AAEL,wBAAc,KAAK,KAAK,QAAQ,EAAE,KAAK,MAAM,KAAK,aAAa,eAAe,IAAI,GAAG,CAAC;AAAA,QACxF;AACA,aAAK,cAAc;AAAA,MACrB;AAAA,IACF;AACA,SAAK,WAAW,QAAQ,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,KAAK,KAAK,EAAE;AAAA,EAC5E;AAAA,EACA,SAAS;AACP,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI;AACJ,UAAM,OAAO,KAAK,QAAQ;AAK1B,UAAM,iBAAiB,YAAY,SAAS,SAAS,OAAO,KAAK,SAAS,SAAS,SAAS,MAAM,YAAY,QAAQ;AAItH,UAAM,oBAAoB,WAAW;AACrC,WAAO,EAAE,MAAM,OAAO,OAAO;AAAA,MAC3B,KAAK;AAAA,MACL,MAAM;AAAA,MACN,OAAO,OAAO,OAAO,OAAO,OAAO;AAAA,QACjC,CAAC,IAAI,GAAG;AAAA,MACV,GAAG,mBAAmB,KAAK,KAAK,CAAC,GAAG;AAAA,QAClC,CAAC,QAAQ,KAAK,IAAI,EAAE,GAAG,CAAC,CAAC,KAAK;AAAA,QAC9B,YAAY;AAAA,QACZ,YAAY,qBAAqB,MAAM,EAAE;AAAA,MAC3C,CAAC;AAAA,IACH,GAAG,mBAAmB,GAAG,KAAK,aAAa,EAAE,OAAO;AAAA,MAClD,OAAO;AAAA,MACP,WAAW,KAAK;AAAA,IAClB,CAAC,IAAI,EAAE,OAAO;AAAA,MACZ,OAAO;AAAA,IACT,CAAC,CAAC;AAAA,EACJ;AAAA,EACA,WAAW,aAAa;AACtB,WAAO,CAAC,KAAK;AAAA,EACf;AAAA,EACA,IAAI,KAAK;AACP,WAAO,WAAW,IAAI;AAAA,EACxB;AAAA,EACA,WAAW,WAAW;AACpB,WAAO;AAAA,MACL,QAAQ,CAAC,UAAU;AAAA,MACnB,OAAO,CAAC,UAAU;AAAA,MAClB,QAAQ,CAAC,UAAU;AAAA,MACnB,OAAO,CAAC,UAAU;AAAA,MAClB,MAAM,CAAC,UAAU;AAAA,IACnB;AAAA,EACF;AACF;AAKA,IAAM,aAAa,MAAM,OAAO,aAAa,eAAe,SAAS,gBAAgB,aAAa,MAAM,KAAK;AAM7G,IAAM,qBAAqB,WAAS;AAClC,SAAO,QAAQ;AAAA,IACb,aAAa;AAAA,IACb,CAAC,aAAa,KAAK,EAAE,GAAG;AAAA,EAC1B,IAAI;AACN;AACA,KAAK,QAAQ;",
  "names": []
}
