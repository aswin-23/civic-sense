{
  "version": 3,
  "sources": ["../../../../../../node_modules/mp4-muxer/build/mp4-muxer.mjs"],
  "sourcesContent": ["var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateWrapper = (obj, member, setter, getter) => ({\n  set _(value) {\n    __privateSet(obj, member, value, setter);\n  },\n  get _() {\n    return __privateGet(obj, member, getter);\n  }\n});\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n// src/misc.ts\nvar bytes = new Uint8Array(8);\nvar view = new DataView(bytes.buffer);\nvar u8 = value => {\n  return [(value % 256 + 256) % 256];\n};\nvar u16 = value => {\n  view.setUint16(0, value, false);\n  return [bytes[0], bytes[1]];\n};\nvar i16 = value => {\n  view.setInt16(0, value, false);\n  return [bytes[0], bytes[1]];\n};\nvar u24 = value => {\n  view.setUint32(0, value, false);\n  return [bytes[1], bytes[2], bytes[3]];\n};\nvar u32 = value => {\n  view.setUint32(0, value, false);\n  return [bytes[0], bytes[1], bytes[2], bytes[3]];\n};\nvar i32 = value => {\n  view.setInt32(0, value, false);\n  return [bytes[0], bytes[1], bytes[2], bytes[3]];\n};\nvar u64 = value => {\n  view.setUint32(0, Math.floor(value / 2 ** 32), false);\n  view.setUint32(4, value, false);\n  return [bytes[0], bytes[1], bytes[2], bytes[3], bytes[4], bytes[5], bytes[6], bytes[7]];\n};\nvar fixed_8_8 = value => {\n  view.setInt16(0, 2 ** 8 * value, false);\n  return [bytes[0], bytes[1]];\n};\nvar fixed_16_16 = value => {\n  view.setInt32(0, 2 ** 16 * value, false);\n  return [bytes[0], bytes[1], bytes[2], bytes[3]];\n};\nvar fixed_2_30 = value => {\n  view.setInt32(0, 2 ** 30 * value, false);\n  return [bytes[0], bytes[1], bytes[2], bytes[3]];\n};\nvar ascii = (text, nullTerminated = false) => {\n  let bytes2 = Array(text.length).fill(null).map((_, i) => text.charCodeAt(i));\n  if (nullTerminated) bytes2.push(0);\n  return bytes2;\n};\nvar last = arr => {\n  return arr && arr[arr.length - 1];\n};\nvar lastPresentedSample = samples => {\n  let result = void 0;\n  for (let sample of samples) {\n    if (!result || sample.presentationTimestamp > result.presentationTimestamp) {\n      result = sample;\n    }\n  }\n  return result;\n};\nvar intoTimescale = (timeInSeconds, timescale, round = true) => {\n  let value = timeInSeconds * timescale;\n  return round ? Math.round(value) : value;\n};\nvar rotationMatrix = rotationInDegrees => {\n  let theta = rotationInDegrees * (Math.PI / 180);\n  let cosTheta = Math.cos(theta);\n  let sinTheta = Math.sin(theta);\n  return [cosTheta, sinTheta, 0, -sinTheta, cosTheta, 0, 0, 0, 1];\n};\nvar IDENTITY_MATRIX = rotationMatrix(0);\nvar matrixToBytes = matrix => {\n  return [fixed_16_16(matrix[0]), fixed_16_16(matrix[1]), fixed_2_30(matrix[2]), fixed_16_16(matrix[3]), fixed_16_16(matrix[4]), fixed_2_30(matrix[5]), fixed_16_16(matrix[6]), fixed_16_16(matrix[7]), fixed_2_30(matrix[8])];\n};\nvar deepClone = x => {\n  if (!x) return x;\n  if (typeof x !== \"object\") return x;\n  if (Array.isArray(x)) return x.map(deepClone);\n  return Object.fromEntries(Object.entries(x).map(([key, value]) => [key, deepClone(value)]));\n};\nvar isU32 = value => {\n  return value >= 0 && value < 2 ** 32;\n};\n\n// src/box.ts\nvar box = (type, contents, children) => ({\n  type,\n  contents: contents && new Uint8Array(contents.flat(10)),\n  children\n});\nvar fullBox = (type, version, flags, contents, children) => box(type, [u8(version), u24(flags), contents ?? []], children);\nvar ftyp = details => {\n  let minorVersion = 512;\n  if (details.fragmented) return box(\"ftyp\", [ascii(\"iso5\"),\n  // Major brand\n  u32(minorVersion),\n  // Minor version\n  // Compatible brands\n  ascii(\"iso5\"), ascii(\"iso6\"), ascii(\"mp41\")]);\n  return box(\"ftyp\", [ascii(\"isom\"),\n  // Major brand\n  u32(minorVersion),\n  // Minor version\n  // Compatible brands\n  ascii(\"isom\"), details.holdsAvc ? ascii(\"avc1\") : [], ascii(\"mp41\")]);\n};\nvar mdat = reserveLargeSize => ({\n  type: \"mdat\",\n  largeSize: reserveLargeSize\n});\nvar free = size => ({\n  type: \"free\",\n  size\n});\nvar moov = (tracks, creationTime, fragmented = false) => box(\"moov\", null, [mvhd(creationTime, tracks), ...tracks.map(x => trak(x, creationTime)), fragmented ? mvex(tracks) : null]);\nvar mvhd = (creationTime, tracks) => {\n  let duration = intoTimescale(Math.max(0, ...tracks.filter(x => x.samples.length > 0).map(x => {\n    const lastSample = lastPresentedSample(x.samples);\n    return lastSample.presentationTimestamp + lastSample.duration;\n  })), GLOBAL_TIMESCALE);\n  let nextTrackId = Math.max(...tracks.map(x => x.id)) + 1;\n  let needsU64 = !isU32(creationTime) || !isU32(duration);\n  let u32OrU64 = needsU64 ? u64 : u32;\n  return fullBox(\"mvhd\", +needsU64, 0, [u32OrU64(creationTime),\n  // Creation time\n  u32OrU64(creationTime),\n  // Modification time\n  u32(GLOBAL_TIMESCALE),\n  // Timescale\n  u32OrU64(duration),\n  // Duration\n  fixed_16_16(1),\n  // Preferred rate\n  fixed_8_8(1),\n  // Preferred volume\n  Array(10).fill(0),\n  // Reserved\n  matrixToBytes(IDENTITY_MATRIX),\n  // Matrix\n  Array(24).fill(0),\n  // Pre-defined\n  u32(nextTrackId)\n  // Next track ID\n  ]);\n};\nvar trak = (track, creationTime) => box(\"trak\", null, [tkhd(track, creationTime), mdia(track, creationTime)]);\nvar tkhd = (track, creationTime) => {\n  let lastSample = lastPresentedSample(track.samples);\n  let durationInGlobalTimescale = intoTimescale(lastSample ? lastSample.presentationTimestamp + lastSample.duration : 0, GLOBAL_TIMESCALE);\n  let needsU64 = !isU32(creationTime) || !isU32(durationInGlobalTimescale);\n  let u32OrU64 = needsU64 ? u64 : u32;\n  let matrix;\n  if (track.info.type === \"video\") {\n    matrix = typeof track.info.rotation === \"number\" ? rotationMatrix(track.info.rotation) : track.info.rotation;\n  } else {\n    matrix = IDENTITY_MATRIX;\n  }\n  return fullBox(\"tkhd\", +needsU64, 3, [u32OrU64(creationTime),\n  // Creation time\n  u32OrU64(creationTime),\n  // Modification time\n  u32(track.id),\n  // Track ID\n  u32(0),\n  // Reserved\n  u32OrU64(durationInGlobalTimescale),\n  // Duration\n  Array(8).fill(0),\n  // Reserved\n  u16(0),\n  // Layer\n  u16(0),\n  // Alternate group\n  fixed_8_8(track.info.type === \"audio\" ? 1 : 0),\n  // Volume\n  u16(0),\n  // Reserved\n  matrixToBytes(matrix),\n  // Matrix\n  fixed_16_16(track.info.type === \"video\" ? track.info.width : 0),\n  // Track width\n  fixed_16_16(track.info.type === \"video\" ? track.info.height : 0)\n  // Track height\n  ]);\n};\nvar mdia = (track, creationTime) => box(\"mdia\", null, [mdhd(track, creationTime), hdlr(track.info.type === \"video\" ? \"vide\" : \"soun\"), minf(track)]);\nvar mdhd = (track, creationTime) => {\n  let lastSample = lastPresentedSample(track.samples);\n  let localDuration = intoTimescale(lastSample ? lastSample.presentationTimestamp + lastSample.duration : 0, track.timescale);\n  let needsU64 = !isU32(creationTime) || !isU32(localDuration);\n  let u32OrU64 = needsU64 ? u64 : u32;\n  return fullBox(\"mdhd\", +needsU64, 0, [u32OrU64(creationTime),\n  // Creation time\n  u32OrU64(creationTime),\n  // Modification time\n  u32(track.timescale),\n  // Timescale\n  u32OrU64(localDuration),\n  // Duration\n  u16(21956),\n  // Language (\"und\", undetermined)\n  u16(0)\n  // Quality\n  ]);\n};\nvar hdlr = componentSubtype => fullBox(\"hdlr\", 0, 0, [ascii(\"mhlr\"),\n// Component type\nascii(componentSubtype),\n// Component subtype\nu32(0),\n// Component manufacturer\nu32(0),\n// Component flags\nu32(0),\n// Component flags mask\nascii(\"mp4-muxer-hdlr\", true)\n// Component name\n]);\nvar minf = track => box(\"minf\", null, [track.info.type === \"video\" ? vmhd() : smhd(), dinf(), stbl(track)]);\nvar vmhd = () => fullBox(\"vmhd\", 0, 1, [u16(0),\n// Graphics mode\nu16(0),\n// Opcolor R\nu16(0),\n// Opcolor G\nu16(0)\n// Opcolor B\n]);\nvar smhd = () => fullBox(\"smhd\", 0, 0, [u16(0),\n// Balance\nu16(0)\n// Reserved\n]);\nvar dinf = () => box(\"dinf\", null, [dref()]);\nvar dref = () => fullBox(\"dref\", 0, 0, [u32(1)\n// Entry count\n], [url()]);\nvar url = () => fullBox(\"url \", 0, 1);\nvar stbl = track => {\n  const needsCtts = track.compositionTimeOffsetTable.length > 1 || track.compositionTimeOffsetTable.some(x => x.sampleCompositionTimeOffset !== 0);\n  return box(\"stbl\", null, [stsd(track), stts(track), stss(track), stsc(track), stsz(track), stco(track), needsCtts ? ctts(track) : null]);\n};\nvar stsd = track => fullBox(\"stsd\", 0, 0, [u32(1)\n// Entry count\n], [track.info.type === \"video\" ? videoSampleDescription(VIDEO_CODEC_TO_BOX_NAME[track.info.codec], track) : soundSampleDescription(AUDIO_CODEC_TO_BOX_NAME[track.info.codec], track)]);\nvar videoSampleDescription = (compressionType, track) => box(compressionType, [Array(6).fill(0),\n// Reserved\nu16(1),\n// Data reference index\nu16(0),\n// Pre-defined\nu16(0),\n// Reserved\nArray(12).fill(0),\n// Pre-defined\nu16(track.info.width),\n// Width\nu16(track.info.height),\n// Height\nu32(4718592),\n// Horizontal resolution\nu32(4718592),\n// Vertical resolution\nu32(0),\n// Reserved\nu16(1),\n// Frame count\nArray(32).fill(0),\n// Compressor name\nu16(24),\n// Depth\ni16(65535)\n// Pre-defined\n], [VIDEO_CODEC_TO_CONFIGURATION_BOX[track.info.codec](track), track.info.decoderConfig.colorSpace ? colr(track) : null]);\nvar COLOR_PRIMARIES_MAP = {\n  \"bt709\": 1,\n  // ITU-R BT.709\n  \"bt470bg\": 5,\n  // ITU-R BT.470BG\n  \"smpte170m\": 6\n  // ITU-R BT.601 525 - SMPTE 170M\n};\nvar TRANSFER_CHARACTERISTICS_MAP = {\n  \"bt709\": 1,\n  // ITU-R BT.709\n  \"smpte170m\": 6,\n  // SMPTE 170M\n  \"iec61966-2-1\": 13\n  // IEC 61966-2-1\n};\nvar MATRIX_COEFFICIENTS_MAP = {\n  \"rgb\": 0,\n  // Identity\n  \"bt709\": 1,\n  // ITU-R BT.709\n  \"bt470bg\": 5,\n  // ITU-R BT.470BG\n  \"smpte170m\": 6\n  // SMPTE 170M\n};\nvar colr = track => box(\"colr\", [ascii(\"nclx\"),\n// Colour type\nu16(COLOR_PRIMARIES_MAP[track.info.decoderConfig.colorSpace.primaries]),\n// Colour primaries\nu16(TRANSFER_CHARACTERISTICS_MAP[track.info.decoderConfig.colorSpace.transfer]),\n// Transfer characteristics\nu16(MATRIX_COEFFICIENTS_MAP[track.info.decoderConfig.colorSpace.matrix]),\n// Matrix coefficients\nu8((track.info.decoderConfig.colorSpace.fullRange ? 1 : 0) << 7)\n// Full range flag\n]);\nvar avcC = track => track.info.decoderConfig && box(\"avcC\", [\n// For AVC, description is an AVCDecoderConfigurationRecord, so nothing else to do here\n...new Uint8Array(track.info.decoderConfig.description)]);\nvar hvcC = track => track.info.decoderConfig && box(\"hvcC\", [\n// For HEVC, description is a HEVCDecoderConfigurationRecord, so nothing else to do here\n...new Uint8Array(track.info.decoderConfig.description)]);\nvar vpcC = track => {\n  if (!track.info.decoderConfig) {\n    return null;\n  }\n  let decoderConfig = track.info.decoderConfig;\n  if (!decoderConfig.colorSpace) {\n    throw new Error(`'colorSpace' is required in the decoder config for VP9.`);\n  }\n  let parts = decoderConfig.codec.split(\".\");\n  let profile = Number(parts[1]);\n  let level = Number(parts[2]);\n  let bitDepth = Number(parts[3]);\n  let chromaSubsampling = 0;\n  let thirdByte = (bitDepth << 4) + (chromaSubsampling << 1) + Number(decoderConfig.colorSpace.fullRange);\n  let colourPrimaries = 2;\n  let transferCharacteristics = 2;\n  let matrixCoefficients = 2;\n  return fullBox(\"vpcC\", 1, 0, [u8(profile),\n  // Profile\n  u8(level),\n  // Level\n  u8(thirdByte),\n  // Bit depth, chroma subsampling, full range\n  u8(colourPrimaries),\n  // Colour primaries\n  u8(transferCharacteristics),\n  // Transfer characteristics\n  u8(matrixCoefficients),\n  // Matrix coefficients\n  u16(0)\n  // Codec initialization data size\n  ]);\n};\nvar av1C = () => {\n  let marker = 1;\n  let version = 1;\n  let firstByte = (marker << 7) + version;\n  return box(\"av1C\", [firstByte, 0, 0, 0]);\n};\nvar soundSampleDescription = (compressionType, track) => box(compressionType, [Array(6).fill(0),\n// Reserved\nu16(1),\n// Data reference index\nu16(0),\n// Version\nu16(0),\n// Revision level\nu32(0),\n// Vendor\nu16(track.info.numberOfChannels),\n// Number of channels\nu16(16),\n// Sample size (bits)\nu16(0),\n// Compression ID\nu16(0),\n// Packet size\nfixed_16_16(track.info.sampleRate)\n// Sample rate\n], [AUDIO_CODEC_TO_CONFIGURATION_BOX[track.info.codec](track)]);\nvar esds = track => {\n  let description = new Uint8Array(track.info.decoderConfig.description);\n  return fullBox(\"esds\", 0, 0, [\n  // https://stackoverflow.com/a/54803118\n  u32(58753152),\n  // TAG(3) = Object Descriptor ([2])\n  u8(32 + description.byteLength),\n  // length of this OD (which includes the next 2 tags)\n  u16(1),\n  // ES_ID = 1\n  u8(0),\n  // flags etc = 0\n  u32(75530368),\n  // TAG(4) = ES Descriptor ([2]) embedded in above OD\n  u8(18 + description.byteLength),\n  // length of this ESD\n  u8(64),\n  // MPEG-4 Audio\n  u8(21),\n  // stream type(6bits)=5 audio, flags(2bits)=1\n  u24(0),\n  // 24bit buffer size\n  u32(130071),\n  // max bitrate\n  u32(130071),\n  // avg bitrate\n  u32(92307584),\n  // TAG(5) = ASC ([2],[3]) embedded in above OD\n  u8(description.byteLength),\n  // length\n  ...description, u32(109084800),\n  // TAG(6)\n  u8(1),\n  // length\n  u8(2)\n  // data\n  ]);\n};\nvar dOps = track => {\n  let preskip = 3840;\n  let gain = 0;\n  const description = track.info.decoderConfig?.description;\n  if (description) {\n    if (description.byteLength < 18) {\n      throw new TypeError(\"Invalid decoder description provided for Opus; must be at least 18 bytes long.\");\n    }\n    const view2 = ArrayBuffer.isView(description) ? new DataView(description.buffer, description.byteOffset, description.byteLength) : new DataView(description);\n    preskip = view2.getUint16(10, true);\n    gain = view2.getInt16(14, true);\n  }\n  return box(\"dOps\", [u8(0),\n  // Version\n  u8(track.info.numberOfChannels),\n  // OutputChannelCount\n  u16(preskip), u32(track.info.sampleRate),\n  // InputSampleRate\n  fixed_8_8(gain),\n  // OutputGain\n  u8(0)\n  // ChannelMappingFamily\n  ]);\n};\nvar stts = track => {\n  return fullBox(\"stts\", 0, 0, [u32(track.timeToSampleTable.length),\n  // Number of entries\n  track.timeToSampleTable.map(x => [\n  // Time-to-sample table\n  u32(x.sampleCount),\n  // Sample count\n  u32(x.sampleDelta)\n  // Sample duration\n  ])]);\n};\nvar stss = track => {\n  if (track.samples.every(x => x.type === \"key\")) return null;\n  let keySamples = [...track.samples.entries()].filter(([, sample]) => sample.type === \"key\");\n  return fullBox(\"stss\", 0, 0, [u32(keySamples.length),\n  // Number of entries\n  keySamples.map(([index]) => u32(index + 1))\n  // Sync sample table\n  ]);\n};\nvar stsc = track => {\n  return fullBox(\"stsc\", 0, 0, [u32(track.compactlyCodedChunkTable.length),\n  // Number of entries\n  track.compactlyCodedChunkTable.map(x => [\n  // Sample-to-chunk table\n  u32(x.firstChunk),\n  // First chunk\n  u32(x.samplesPerChunk),\n  // Samples per chunk\n  u32(1)\n  // Sample description index\n  ])]);\n};\nvar stsz = track => fullBox(\"stsz\", 0, 0, [u32(0),\n// Sample size (0 means non-constant size)\nu32(track.samples.length),\n// Number of entries\ntrack.samples.map(x => u32(x.size))\n// Sample size table\n]);\nvar stco = track => {\n  if (track.finalizedChunks.length > 0 && last(track.finalizedChunks).offset >= 2 ** 32) {\n    return fullBox(\"co64\", 0, 0, [u32(track.finalizedChunks.length),\n    // Number of entries\n    track.finalizedChunks.map(x => u64(x.offset))\n    // Chunk offset table\n    ]);\n  }\n  return fullBox(\"stco\", 0, 0, [u32(track.finalizedChunks.length),\n  // Number of entries\n  track.finalizedChunks.map(x => u32(x.offset))\n  // Chunk offset table\n  ]);\n};\nvar ctts = track => {\n  return fullBox(\"ctts\", 0, 0, [u32(track.compositionTimeOffsetTable.length),\n  // Number of entries\n  track.compositionTimeOffsetTable.map(x => [\n  // Time-to-sample table\n  u32(x.sampleCount),\n  // Sample count\n  u32(x.sampleCompositionTimeOffset)\n  // Sample offset\n  ])]);\n};\nvar mvex = tracks => {\n  return box(\"mvex\", null, tracks.map(trex));\n};\nvar trex = track => {\n  return fullBox(\"trex\", 0, 0, [u32(track.id),\n  // Track ID\n  u32(1),\n  // Default sample description index\n  u32(0),\n  // Default sample duration\n  u32(0),\n  // Default sample size\n  u32(0)\n  // Default sample flags\n  ]);\n};\nvar moof = (sequenceNumber, tracks) => {\n  return box(\"moof\", null, [mfhd(sequenceNumber), ...tracks.map(traf)]);\n};\nvar mfhd = sequenceNumber => {\n  return fullBox(\"mfhd\", 0, 0, [u32(sequenceNumber)\n  // Sequence number\n  ]);\n};\nvar fragmentSampleFlags = sample => {\n  let byte1 = 0;\n  let byte2 = 0;\n  let byte3 = 0;\n  let byte4 = 0;\n  let sampleIsDifferenceSample = sample.type === \"delta\";\n  byte2 |= +sampleIsDifferenceSample;\n  if (sampleIsDifferenceSample) {\n    byte1 |= 1;\n  } else {\n    byte1 |= 2;\n  }\n  return byte1 << 24 | byte2 << 16 | byte3 << 8 | byte4;\n};\nvar traf = track => {\n  return box(\"traf\", null, [tfhd(track), tfdt(track), trun(track)]);\n};\nvar tfhd = track => {\n  let tfFlags = 0;\n  tfFlags |= 8;\n  tfFlags |= 16;\n  tfFlags |= 32;\n  tfFlags |= 131072;\n  let referenceSample = track.currentChunk.samples[1] ?? track.currentChunk.samples[0];\n  let referenceSampleInfo = {\n    duration: referenceSample.timescaleUnitsToNextSample,\n    size: referenceSample.size,\n    flags: fragmentSampleFlags(referenceSample)\n  };\n  return fullBox(\"tfhd\", 0, tfFlags, [u32(track.id),\n  // Track ID\n  u32(referenceSampleInfo.duration),\n  // Default sample duration\n  u32(referenceSampleInfo.size),\n  // Default sample size\n  u32(referenceSampleInfo.flags)\n  // Default sample flags\n  ]);\n};\nvar tfdt = track => {\n  return fullBox(\"tfdt\", 1, 0, [u64(intoTimescale(track.currentChunk.startTimestamp, track.timescale))\n  // Base Media Decode Time\n  ]);\n};\nvar trun = track => {\n  let allSampleDurations = track.currentChunk.samples.map(x => x.timescaleUnitsToNextSample);\n  let allSampleSizes = track.currentChunk.samples.map(x => x.size);\n  let allSampleFlags = track.currentChunk.samples.map(fragmentSampleFlags);\n  let allSampleCompositionTimeOffsets = track.currentChunk.samples.map(x => intoTimescale(x.presentationTimestamp - x.decodeTimestamp, track.timescale));\n  let uniqueSampleDurations = new Set(allSampleDurations);\n  let uniqueSampleSizes = new Set(allSampleSizes);\n  let uniqueSampleFlags = new Set(allSampleFlags);\n  let uniqueSampleCompositionTimeOffsets = new Set(allSampleCompositionTimeOffsets);\n  let firstSampleFlagsPresent = uniqueSampleFlags.size === 2 && allSampleFlags[0] !== allSampleFlags[1];\n  let sampleDurationPresent = uniqueSampleDurations.size > 1;\n  let sampleSizePresent = uniqueSampleSizes.size > 1;\n  let sampleFlagsPresent = !firstSampleFlagsPresent && uniqueSampleFlags.size > 1;\n  let sampleCompositionTimeOffsetsPresent = uniqueSampleCompositionTimeOffsets.size > 1 || [...uniqueSampleCompositionTimeOffsets].some(x => x !== 0);\n  let flags = 0;\n  flags |= 1;\n  flags |= 4 * +firstSampleFlagsPresent;\n  flags |= 256 * +sampleDurationPresent;\n  flags |= 512 * +sampleSizePresent;\n  flags |= 1024 * +sampleFlagsPresent;\n  flags |= 2048 * +sampleCompositionTimeOffsetsPresent;\n  return fullBox(\"trun\", 1, flags, [u32(track.currentChunk.samples.length),\n  // Sample count\n  u32(track.currentChunk.offset - track.currentChunk.moofOffset || 0),\n  // Data offset\n  firstSampleFlagsPresent ? u32(allSampleFlags[0]) : [], track.currentChunk.samples.map((_, i) => [sampleDurationPresent ? u32(allSampleDurations[i]) : [],\n  // Sample duration\n  sampleSizePresent ? u32(allSampleSizes[i]) : [],\n  // Sample size\n  sampleFlagsPresent ? u32(allSampleFlags[i]) : [],\n  // Sample flags\n  // Sample composition time offsets\n  sampleCompositionTimeOffsetsPresent ? i32(allSampleCompositionTimeOffsets[i]) : []])]);\n};\nvar mfra = tracks => {\n  return box(\"mfra\", null, [...tracks.map(tfra), mfro()]);\n};\nvar tfra = (track, trackIndex) => {\n  let version = 1;\n  return fullBox(\"tfra\", version, 0, [u32(track.id),\n  // Track ID\n  u32(63),\n  // This specifies that traf number, trun number and sample number are 32-bit ints\n  u32(track.finalizedChunks.length),\n  // Number of entries\n  track.finalizedChunks.map(chunk => [u64(intoTimescale(chunk.startTimestamp, track.timescale)),\n  // Time\n  u64(chunk.moofOffset),\n  // moof offset\n  u32(trackIndex + 1),\n  // traf number\n  u32(1),\n  // trun number\n  u32(1)\n  // Sample number\n  ])]);\n};\nvar mfro = () => {\n  return fullBox(\"mfro\", 0, 0, [\n  // This value needs to be overwritten manually from the outside, where the actual size of the enclosing mfra box\n  // is known\n  u32(0)\n  // Size\n  ]);\n};\nvar VIDEO_CODEC_TO_BOX_NAME = {\n  \"avc\": \"avc1\",\n  \"hevc\": \"hvc1\",\n  \"vp9\": \"vp09\",\n  \"av1\": \"av01\"\n};\nvar VIDEO_CODEC_TO_CONFIGURATION_BOX = {\n  \"avc\": avcC,\n  \"hevc\": hvcC,\n  \"vp9\": vpcC,\n  \"av1\": av1C\n};\nvar AUDIO_CODEC_TO_BOX_NAME = {\n  \"aac\": \"mp4a\",\n  \"opus\": \"Opus\"\n};\nvar AUDIO_CODEC_TO_CONFIGURATION_BOX = {\n  \"aac\": esds,\n  \"opus\": dOps\n};\n\n// src/target.ts\nvar isTarget = Symbol(\"isTarget\");\nvar Target = class {};\nisTarget;\nvar ArrayBufferTarget = class extends Target {\n  constructor() {\n    super(...arguments);\n    this.buffer = null;\n  }\n};\nvar StreamTarget = class extends Target {\n  constructor(options) {\n    super();\n    this.options = options;\n    if (typeof options !== \"object\") {\n      throw new TypeError(\"StreamTarget requires an options object to be passed to its constructor.\");\n    }\n    if (options.onData) {\n      if (typeof options.onData !== \"function\") {\n        throw new TypeError(\"options.onData, when provided, must be a function.\");\n      }\n      if (options.onData.length < 2) {\n        throw new TypeError(\"options.onData, when provided, must be a function that takes in at least two arguments (data and position). Ignoring the position argument, which specifies the byte offset at which the data is to be written, can lead to broken outputs.\");\n      }\n    }\n    if (options.chunked !== void 0 && typeof options.chunked !== \"boolean\") {\n      throw new TypeError(\"options.chunked, when provided, must be a boolean.\");\n    }\n    if (options.chunkSize !== void 0 && (!Number.isInteger(options.chunkSize) || options.chunkSize < 1024)) {\n      throw new TypeError(\"options.chunkSize, when provided, must be an integer and not smaller than 1024.\");\n    }\n  }\n};\nvar FileSystemWritableFileStreamTarget = class extends Target {\n  constructor(stream, options) {\n    super();\n    this.stream = stream;\n    this.options = options;\n    if (!(stream instanceof FileSystemWritableFileStream)) {\n      throw new TypeError(\"FileSystemWritableFileStreamTarget requires a FileSystemWritableFileStream instance.\");\n    }\n    if (options !== void 0 && typeof options !== \"object\") {\n      throw new TypeError(\"FileSystemWritableFileStreamTarget's options, when provided, must be an object.\");\n    }\n    if (options) {\n      if (options.chunkSize !== void 0 && (!Number.isInteger(options.chunkSize) || options.chunkSize <= 0)) {\n        throw new TypeError(\"options.chunkSize, when provided, must be a positive integer\");\n      }\n    }\n  }\n};\n\n// src/writer.ts\nvar _helper, _helperView;\nvar Writer = class {\n  constructor() {\n    this.pos = 0;\n    __privateAdd(this, _helper, new Uint8Array(8));\n    __privateAdd(this, _helperView, new DataView(__privateGet(this, _helper).buffer));\n    /**\n     * Stores the position from the start of the file to where boxes elements have been written. This is used to\n     * rewrite/edit elements that were already added before, and to measure sizes of things.\n     */\n    this.offsets = /* @__PURE__ */new WeakMap();\n  }\n  /** Sets the current position for future writes to a new one. */\n  seek(newPos) {\n    this.pos = newPos;\n  }\n  writeU32(value) {\n    __privateGet(this, _helperView).setUint32(0, value, false);\n    this.write(__privateGet(this, _helper).subarray(0, 4));\n  }\n  writeU64(value) {\n    __privateGet(this, _helperView).setUint32(0, Math.floor(value / 2 ** 32), false);\n    __privateGet(this, _helperView).setUint32(4, value, false);\n    this.write(__privateGet(this, _helper).subarray(0, 8));\n  }\n  writeAscii(text) {\n    for (let i = 0; i < text.length; i++) {\n      __privateGet(this, _helperView).setUint8(i % 8, text.charCodeAt(i));\n      if (i % 8 === 7) this.write(__privateGet(this, _helper));\n    }\n    if (text.length % 8 !== 0) {\n      this.write(__privateGet(this, _helper).subarray(0, text.length % 8));\n    }\n  }\n  writeBox(box2) {\n    this.offsets.set(box2, this.pos);\n    if (box2.contents && !box2.children) {\n      this.writeBoxHeader(box2, box2.size ?? box2.contents.byteLength + 8);\n      this.write(box2.contents);\n    } else {\n      let startPos = this.pos;\n      this.writeBoxHeader(box2, 0);\n      if (box2.contents) this.write(box2.contents);\n      if (box2.children) {\n        for (let child of box2.children) if (child) this.writeBox(child);\n      }\n      let endPos = this.pos;\n      let size = box2.size ?? endPos - startPos;\n      this.seek(startPos);\n      this.writeBoxHeader(box2, size);\n      this.seek(endPos);\n    }\n  }\n  writeBoxHeader(box2, size) {\n    this.writeU32(box2.largeSize ? 1 : size);\n    this.writeAscii(box2.type);\n    if (box2.largeSize) this.writeU64(size);\n  }\n  measureBoxHeader(box2) {\n    return 8 + (box2.largeSize ? 8 : 0);\n  }\n  patchBox(box2) {\n    let endPos = this.pos;\n    this.seek(this.offsets.get(box2));\n    this.writeBox(box2);\n    this.seek(endPos);\n  }\n  measureBox(box2) {\n    if (box2.contents && !box2.children) {\n      let headerSize = this.measureBoxHeader(box2);\n      return headerSize + box2.contents.byteLength;\n    } else {\n      let result = this.measureBoxHeader(box2);\n      if (box2.contents) result += box2.contents.byteLength;\n      if (box2.children) {\n        for (let child of box2.children) if (child) result += this.measureBox(child);\n      }\n      return result;\n    }\n  }\n};\n_helper = new WeakMap();\n_helperView = new WeakMap();\nvar _target, _buffer, _bytes, _maxPos, _ensureSize, ensureSize_fn;\nvar ArrayBufferTargetWriter = class extends Writer {\n  constructor(target) {\n    super();\n    __privateAdd(this, _ensureSize);\n    __privateAdd(this, _target, void 0);\n    __privateAdd(this, _buffer, new ArrayBuffer(2 ** 16));\n    __privateAdd(this, _bytes, new Uint8Array(__privateGet(this, _buffer)));\n    __privateAdd(this, _maxPos, 0);\n    __privateSet(this, _target, target);\n  }\n  write(data) {\n    __privateMethod(this, _ensureSize, ensureSize_fn).call(this, this.pos + data.byteLength);\n    __privateGet(this, _bytes).set(data, this.pos);\n    this.pos += data.byteLength;\n    __privateSet(this, _maxPos, Math.max(__privateGet(this, _maxPos), this.pos));\n  }\n  finalize() {\n    __privateMethod(this, _ensureSize, ensureSize_fn).call(this, this.pos);\n    __privateGet(this, _target).buffer = __privateGet(this, _buffer).slice(0, Math.max(__privateGet(this, _maxPos), this.pos));\n  }\n};\n_target = new WeakMap();\n_buffer = new WeakMap();\n_bytes = new WeakMap();\n_maxPos = new WeakMap();\n_ensureSize = new WeakSet();\nensureSize_fn = function (size) {\n  let newLength = __privateGet(this, _buffer).byteLength;\n  while (newLength < size) newLength *= 2;\n  if (newLength === __privateGet(this, _buffer).byteLength) return;\n  let newBuffer = new ArrayBuffer(newLength);\n  let newBytes = new Uint8Array(newBuffer);\n  newBytes.set(__privateGet(this, _bytes), 0);\n  __privateSet(this, _buffer, newBuffer);\n  __privateSet(this, _bytes, newBytes);\n};\nvar DEFAULT_CHUNK_SIZE = 2 ** 24;\nvar MAX_CHUNKS_AT_ONCE = 2;\nvar _target2, _sections, _chunked, _chunkSize, _chunks, _writeDataIntoChunks, writeDataIntoChunks_fn, _insertSectionIntoChunk, insertSectionIntoChunk_fn, _createChunk, createChunk_fn, _flushChunks, flushChunks_fn;\nvar StreamTargetWriter = class extends Writer {\n  constructor(target) {\n    super();\n    __privateAdd(this, _writeDataIntoChunks);\n    __privateAdd(this, _insertSectionIntoChunk);\n    __privateAdd(this, _createChunk);\n    __privateAdd(this, _flushChunks);\n    __privateAdd(this, _target2, void 0);\n    __privateAdd(this, _sections, []);\n    __privateAdd(this, _chunked, void 0);\n    __privateAdd(this, _chunkSize, void 0);\n    /**\n     * The data is divided up into fixed-size chunks, whose contents are first filled in RAM and then flushed out.\n     * A chunk is flushed if all of its contents have been written.\n     */\n    __privateAdd(this, _chunks, []);\n    __privateSet(this, _target2, target);\n    __privateSet(this, _chunked, target.options?.chunked ?? false);\n    __privateSet(this, _chunkSize, target.options?.chunkSize ?? DEFAULT_CHUNK_SIZE);\n  }\n  write(data) {\n    __privateGet(this, _sections).push({\n      data: data.slice(),\n      start: this.pos\n    });\n    this.pos += data.byteLength;\n  }\n  flush() {\n    if (__privateGet(this, _sections).length === 0) return;\n    let chunks = [];\n    let sorted = [...__privateGet(this, _sections)].sort((a, b) => a.start - b.start);\n    chunks.push({\n      start: sorted[0].start,\n      size: sorted[0].data.byteLength\n    });\n    for (let i = 1; i < sorted.length; i++) {\n      let lastChunk = chunks[chunks.length - 1];\n      let section = sorted[i];\n      if (section.start <= lastChunk.start + lastChunk.size) {\n        lastChunk.size = Math.max(lastChunk.size, section.start + section.data.byteLength - lastChunk.start);\n      } else {\n        chunks.push({\n          start: section.start,\n          size: section.data.byteLength\n        });\n      }\n    }\n    for (let chunk of chunks) {\n      chunk.data = new Uint8Array(chunk.size);\n      for (let section of __privateGet(this, _sections)) {\n        if (chunk.start <= section.start && section.start < chunk.start + chunk.size) {\n          chunk.data.set(section.data, section.start - chunk.start);\n        }\n      }\n      if (__privateGet(this, _chunked)) {\n        __privateMethod(this, _writeDataIntoChunks, writeDataIntoChunks_fn).call(this, chunk.data, chunk.start);\n        __privateMethod(this, _flushChunks, flushChunks_fn).call(this);\n      } else {\n        __privateGet(this, _target2).options.onData?.(chunk.data, chunk.start);\n      }\n    }\n    __privateGet(this, _sections).length = 0;\n  }\n  finalize() {\n    if (__privateGet(this, _chunked)) {\n      __privateMethod(this, _flushChunks, flushChunks_fn).call(this, true);\n    }\n  }\n};\n_target2 = new WeakMap();\n_sections = new WeakMap();\n_chunked = new WeakMap();\n_chunkSize = new WeakMap();\n_chunks = new WeakMap();\n_writeDataIntoChunks = new WeakSet();\nwriteDataIntoChunks_fn = function (data, position) {\n  let chunkIndex = __privateGet(this, _chunks).findIndex(x => x.start <= position && position < x.start + __privateGet(this, _chunkSize));\n  if (chunkIndex === -1) chunkIndex = __privateMethod(this, _createChunk, createChunk_fn).call(this, position);\n  let chunk = __privateGet(this, _chunks)[chunkIndex];\n  let relativePosition = position - chunk.start;\n  let toWrite = data.subarray(0, Math.min(__privateGet(this, _chunkSize) - relativePosition, data.byteLength));\n  chunk.data.set(toWrite, relativePosition);\n  let section = {\n    start: relativePosition,\n    end: relativePosition + toWrite.byteLength\n  };\n  __privateMethod(this, _insertSectionIntoChunk, insertSectionIntoChunk_fn).call(this, chunk, section);\n  if (chunk.written[0].start === 0 && chunk.written[0].end === __privateGet(this, _chunkSize)) {\n    chunk.shouldFlush = true;\n  }\n  if (__privateGet(this, _chunks).length > MAX_CHUNKS_AT_ONCE) {\n    for (let i = 0; i < __privateGet(this, _chunks).length - 1; i++) {\n      __privateGet(this, _chunks)[i].shouldFlush = true;\n    }\n    __privateMethod(this, _flushChunks, flushChunks_fn).call(this);\n  }\n  if (toWrite.byteLength < data.byteLength) {\n    __privateMethod(this, _writeDataIntoChunks, writeDataIntoChunks_fn).call(this, data.subarray(toWrite.byteLength), position + toWrite.byteLength);\n  }\n};\n_insertSectionIntoChunk = new WeakSet();\ninsertSectionIntoChunk_fn = function (chunk, section) {\n  let low = 0;\n  let high = chunk.written.length - 1;\n  let index = -1;\n  while (low <= high) {\n    let mid = Math.floor(low + (high - low + 1) / 2);\n    if (chunk.written[mid].start <= section.start) {\n      low = mid + 1;\n      index = mid;\n    } else {\n      high = mid - 1;\n    }\n  }\n  chunk.written.splice(index + 1, 0, section);\n  if (index === -1 || chunk.written[index].end < section.start) index++;\n  while (index < chunk.written.length - 1 && chunk.written[index].end >= chunk.written[index + 1].start) {\n    chunk.written[index].end = Math.max(chunk.written[index].end, chunk.written[index + 1].end);\n    chunk.written.splice(index + 1, 1);\n  }\n};\n_createChunk = new WeakSet();\ncreateChunk_fn = function (includesPosition) {\n  let start = Math.floor(includesPosition / __privateGet(this, _chunkSize)) * __privateGet(this, _chunkSize);\n  let chunk = {\n    start,\n    data: new Uint8Array(__privateGet(this, _chunkSize)),\n    written: [],\n    shouldFlush: false\n  };\n  __privateGet(this, _chunks).push(chunk);\n  __privateGet(this, _chunks).sort((a, b) => a.start - b.start);\n  return __privateGet(this, _chunks).indexOf(chunk);\n};\n_flushChunks = new WeakSet();\nflushChunks_fn = function (force = false) {\n  for (let i = 0; i < __privateGet(this, _chunks).length; i++) {\n    let chunk = __privateGet(this, _chunks)[i];\n    if (!chunk.shouldFlush && !force) continue;\n    for (let section of chunk.written) {\n      __privateGet(this, _target2).options.onData?.(chunk.data.subarray(section.start, section.end), chunk.start + section.start);\n    }\n    __privateGet(this, _chunks).splice(i--, 1);\n  }\n};\nvar FileSystemWritableFileStreamTargetWriter = class extends StreamTargetWriter {\n  constructor(target) {\n    super(new StreamTarget({\n      onData: (data, position) => target.stream.write({\n        type: \"write\",\n        data,\n        position\n      }),\n      chunked: true,\n      chunkSize: target.options?.chunkSize\n    }));\n  }\n};\n\n// src/muxer.ts\nvar GLOBAL_TIMESCALE = 1e3;\nvar SUPPORTED_VIDEO_CODECS = [\"avc\", \"hevc\", \"vp9\", \"av1\"];\nvar SUPPORTED_AUDIO_CODECS = [\"aac\", \"opus\"];\nvar TIMESTAMP_OFFSET = 2082844800;\nvar FIRST_TIMESTAMP_BEHAVIORS = [\"strict\", \"offset\", \"cross-track-offset\"];\nvar _options, _writer, _ftypSize, _mdat, _videoTrack, _audioTrack, _creationTime, _finalizedChunks, _nextFragmentNumber, _videoSampleQueue, _audioSampleQueue, _finalized, _validateOptions, validateOptions_fn, _writeHeader, writeHeader_fn, _computeMoovSizeUpperBound, computeMoovSizeUpperBound_fn, _prepareTracks, prepareTracks_fn, _generateMpeg4AudioSpecificConfig, generateMpeg4AudioSpecificConfig_fn, _createSampleForTrack, createSampleForTrack_fn, _addSampleToTrack, addSampleToTrack_fn, _validateTimestamp, validateTimestamp_fn, _finalizeCurrentChunk, finalizeCurrentChunk_fn, _finalizeFragment, finalizeFragment_fn, _maybeFlushStreamingTargetWriter, maybeFlushStreamingTargetWriter_fn, _ensureNotFinalized, ensureNotFinalized_fn;\nvar Muxer = class {\n  constructor(options) {\n    __privateAdd(this, _validateOptions);\n    __privateAdd(this, _writeHeader);\n    __privateAdd(this, _computeMoovSizeUpperBound);\n    __privateAdd(this, _prepareTracks);\n    // https://wiki.multimedia.cx/index.php/MPEG-4_Audio\n    __privateAdd(this, _generateMpeg4AudioSpecificConfig);\n    __privateAdd(this, _createSampleForTrack);\n    __privateAdd(this, _addSampleToTrack);\n    __privateAdd(this, _validateTimestamp);\n    __privateAdd(this, _finalizeCurrentChunk);\n    __privateAdd(this, _finalizeFragment);\n    __privateAdd(this, _maybeFlushStreamingTargetWriter);\n    __privateAdd(this, _ensureNotFinalized);\n    __privateAdd(this, _options, void 0);\n    __privateAdd(this, _writer, void 0);\n    __privateAdd(this, _ftypSize, void 0);\n    __privateAdd(this, _mdat, void 0);\n    __privateAdd(this, _videoTrack, null);\n    __privateAdd(this, _audioTrack, null);\n    __privateAdd(this, _creationTime, Math.floor(Date.now() / 1e3) + TIMESTAMP_OFFSET);\n    __privateAdd(this, _finalizedChunks, []);\n    // Fields for fragmented MP4:\n    __privateAdd(this, _nextFragmentNumber, 1);\n    __privateAdd(this, _videoSampleQueue, []);\n    __privateAdd(this, _audioSampleQueue, []);\n    __privateAdd(this, _finalized, false);\n    __privateMethod(this, _validateOptions, validateOptions_fn).call(this, options);\n    options.video = deepClone(options.video);\n    options.audio = deepClone(options.audio);\n    options.fastStart = deepClone(options.fastStart);\n    this.target = options.target;\n    __privateSet(this, _options, {\n      firstTimestampBehavior: \"strict\",\n      ...options\n    });\n    if (options.target instanceof ArrayBufferTarget) {\n      __privateSet(this, _writer, new ArrayBufferTargetWriter(options.target));\n    } else if (options.target instanceof StreamTarget) {\n      __privateSet(this, _writer, new StreamTargetWriter(options.target));\n    } else if (options.target instanceof FileSystemWritableFileStreamTarget) {\n      __privateSet(this, _writer, new FileSystemWritableFileStreamTargetWriter(options.target));\n    } else {\n      throw new Error(`Invalid target: ${options.target}`);\n    }\n    __privateMethod(this, _prepareTracks, prepareTracks_fn).call(this);\n    __privateMethod(this, _writeHeader, writeHeader_fn).call(this);\n  }\n  addVideoChunk(sample, meta, timestamp, compositionTimeOffset) {\n    if (!(sample instanceof EncodedVideoChunk)) {\n      throw new TypeError(\"addVideoChunk's first argument (sample) must be of type EncodedVideoChunk.\");\n    }\n    if (meta && typeof meta !== \"object\") {\n      throw new TypeError(\"addVideoChunk's second argument (meta), when provided, must be an object.\");\n    }\n    if (timestamp !== void 0 && (!Number.isFinite(timestamp) || timestamp < 0)) {\n      throw new TypeError(\"addVideoChunk's third argument (timestamp), when provided, must be a non-negative real number.\");\n    }\n    if (compositionTimeOffset !== void 0 && !Number.isFinite(compositionTimeOffset)) {\n      throw new TypeError(\"addVideoChunk's fourth argument (compositionTimeOffset), when provided, must be a real number.\");\n    }\n    let data = new Uint8Array(sample.byteLength);\n    sample.copyTo(data);\n    this.addVideoChunkRaw(data, sample.type, timestamp ?? sample.timestamp, sample.duration, meta, compositionTimeOffset);\n  }\n  addVideoChunkRaw(data, type, timestamp, duration, meta, compositionTimeOffset) {\n    if (!(data instanceof Uint8Array)) {\n      throw new TypeError(\"addVideoChunkRaw's first argument (data) must be an instance of Uint8Array.\");\n    }\n    if (type !== \"key\" && type !== \"delta\") {\n      throw new TypeError(\"addVideoChunkRaw's second argument (type) must be either 'key' or 'delta'.\");\n    }\n    if (!Number.isFinite(timestamp) || timestamp < 0) {\n      throw new TypeError(\"addVideoChunkRaw's third argument (timestamp) must be a non-negative real number.\");\n    }\n    if (!Number.isFinite(duration) || duration < 0) {\n      throw new TypeError(\"addVideoChunkRaw's fourth argument (duration) must be a non-negative real number.\");\n    }\n    if (meta && typeof meta !== \"object\") {\n      throw new TypeError(\"addVideoChunkRaw's fifth argument (meta), when provided, must be an object.\");\n    }\n    if (compositionTimeOffset !== void 0 && !Number.isFinite(compositionTimeOffset)) {\n      throw new TypeError(\"addVideoChunkRaw's sixth argument (compositionTimeOffset), when provided, must be a real number.\");\n    }\n    __privateMethod(this, _ensureNotFinalized, ensureNotFinalized_fn).call(this);\n    if (!__privateGet(this, _options).video) throw new Error(\"No video track declared.\");\n    if (typeof __privateGet(this, _options).fastStart === \"object\" && __privateGet(this, _videoTrack).samples.length === __privateGet(this, _options).fastStart.expectedVideoChunks) {\n      throw new Error(`Cannot add more video chunks than specified in 'fastStart' (${__privateGet(this, _options).fastStart.expectedVideoChunks}).`);\n    }\n    let videoSample = __privateMethod(this, _createSampleForTrack, createSampleForTrack_fn).call(this, __privateGet(this, _videoTrack), data, type, timestamp, duration, meta, compositionTimeOffset);\n    if (__privateGet(this, _options).fastStart === \"fragmented\" && __privateGet(this, _audioTrack)) {\n      while (__privateGet(this, _audioSampleQueue).length > 0 && __privateGet(this, _audioSampleQueue)[0].decodeTimestamp <= videoSample.decodeTimestamp) {\n        let audioSample = __privateGet(this, _audioSampleQueue).shift();\n        __privateMethod(this, _addSampleToTrack, addSampleToTrack_fn).call(this, __privateGet(this, _audioTrack), audioSample);\n      }\n      if (videoSample.decodeTimestamp <= __privateGet(this, _audioTrack).lastDecodeTimestamp) {\n        __privateMethod(this, _addSampleToTrack, addSampleToTrack_fn).call(this, __privateGet(this, _videoTrack), videoSample);\n      } else {\n        __privateGet(this, _videoSampleQueue).push(videoSample);\n      }\n    } else {\n      __privateMethod(this, _addSampleToTrack, addSampleToTrack_fn).call(this, __privateGet(this, _videoTrack), videoSample);\n    }\n  }\n  addAudioChunk(sample, meta, timestamp) {\n    if (!(sample instanceof EncodedAudioChunk)) {\n      throw new TypeError(\"addAudioChunk's first argument (sample) must be of type EncodedAudioChunk.\");\n    }\n    if (meta && typeof meta !== \"object\") {\n      throw new TypeError(\"addAudioChunk's second argument (meta), when provided, must be an object.\");\n    }\n    if (timestamp !== void 0 && (!Number.isFinite(timestamp) || timestamp < 0)) {\n      throw new TypeError(\"addAudioChunk's third argument (timestamp), when provided, must be a non-negative real number.\");\n    }\n    let data = new Uint8Array(sample.byteLength);\n    sample.copyTo(data);\n    this.addAudioChunkRaw(data, sample.type, timestamp ?? sample.timestamp, sample.duration, meta);\n  }\n  addAudioChunkRaw(data, type, timestamp, duration, meta) {\n    if (!(data instanceof Uint8Array)) {\n      throw new TypeError(\"addAudioChunkRaw's first argument (data) must be an instance of Uint8Array.\");\n    }\n    if (type !== \"key\" && type !== \"delta\") {\n      throw new TypeError(\"addAudioChunkRaw's second argument (type) must be either 'key' or 'delta'.\");\n    }\n    if (!Number.isFinite(timestamp) || timestamp < 0) {\n      throw new TypeError(\"addAudioChunkRaw's third argument (timestamp) must be a non-negative real number.\");\n    }\n    if (!Number.isFinite(duration) || duration < 0) {\n      throw new TypeError(\"addAudioChunkRaw's fourth argument (duration) must be a non-negative real number.\");\n    }\n    if (meta && typeof meta !== \"object\") {\n      throw new TypeError(\"addAudioChunkRaw's fifth argument (meta), when provided, must be an object.\");\n    }\n    __privateMethod(this, _ensureNotFinalized, ensureNotFinalized_fn).call(this);\n    if (!__privateGet(this, _options).audio) throw new Error(\"No audio track declared.\");\n    if (typeof __privateGet(this, _options).fastStart === \"object\" && __privateGet(this, _audioTrack).samples.length === __privateGet(this, _options).fastStart.expectedAudioChunks) {\n      throw new Error(`Cannot add more audio chunks than specified in 'fastStart' (${__privateGet(this, _options).fastStart.expectedAudioChunks}).`);\n    }\n    let audioSample = __privateMethod(this, _createSampleForTrack, createSampleForTrack_fn).call(this, __privateGet(this, _audioTrack), data, type, timestamp, duration, meta);\n    if (__privateGet(this, _options).fastStart === \"fragmented\" && __privateGet(this, _videoTrack)) {\n      while (__privateGet(this, _videoSampleQueue).length > 0 && __privateGet(this, _videoSampleQueue)[0].decodeTimestamp <= audioSample.decodeTimestamp) {\n        let videoSample = __privateGet(this, _videoSampleQueue).shift();\n        __privateMethod(this, _addSampleToTrack, addSampleToTrack_fn).call(this, __privateGet(this, _videoTrack), videoSample);\n      }\n      if (audioSample.decodeTimestamp <= __privateGet(this, _videoTrack).lastDecodeTimestamp) {\n        __privateMethod(this, _addSampleToTrack, addSampleToTrack_fn).call(this, __privateGet(this, _audioTrack), audioSample);\n      } else {\n        __privateGet(this, _audioSampleQueue).push(audioSample);\n      }\n    } else {\n      __privateMethod(this, _addSampleToTrack, addSampleToTrack_fn).call(this, __privateGet(this, _audioTrack), audioSample);\n    }\n  }\n  /** Finalizes the file, making it ready for use. Must be called after all video and audio chunks have been added. */\n  finalize() {\n    if (__privateGet(this, _finalized)) {\n      throw new Error(\"Cannot finalize a muxer more than once.\");\n    }\n    if (__privateGet(this, _options).fastStart === \"fragmented\") {\n      for (let videoSample of __privateGet(this, _videoSampleQueue)) __privateMethod(this, _addSampleToTrack, addSampleToTrack_fn).call(this, __privateGet(this, _videoTrack), videoSample);\n      for (let audioSample of __privateGet(this, _audioSampleQueue)) __privateMethod(this, _addSampleToTrack, addSampleToTrack_fn).call(this, __privateGet(this, _audioTrack), audioSample);\n      __privateMethod(this, _finalizeFragment, finalizeFragment_fn).call(this, false);\n    } else {\n      if (__privateGet(this, _videoTrack)) __privateMethod(this, _finalizeCurrentChunk, finalizeCurrentChunk_fn).call(this, __privateGet(this, _videoTrack));\n      if (__privateGet(this, _audioTrack)) __privateMethod(this, _finalizeCurrentChunk, finalizeCurrentChunk_fn).call(this, __privateGet(this, _audioTrack));\n    }\n    let tracks = [__privateGet(this, _videoTrack), __privateGet(this, _audioTrack)].filter(Boolean);\n    if (__privateGet(this, _options).fastStart === \"in-memory\") {\n      let mdatSize;\n      for (let i = 0; i < 2; i++) {\n        let movieBox2 = moov(tracks, __privateGet(this, _creationTime));\n        let movieBoxSize = __privateGet(this, _writer).measureBox(movieBox2);\n        mdatSize = __privateGet(this, _writer).measureBox(__privateGet(this, _mdat));\n        let currentChunkPos = __privateGet(this, _writer).pos + movieBoxSize + mdatSize;\n        for (let chunk of __privateGet(this, _finalizedChunks)) {\n          chunk.offset = currentChunkPos;\n          for (let {\n            data\n          } of chunk.samples) {\n            currentChunkPos += data.byteLength;\n            mdatSize += data.byteLength;\n          }\n        }\n        if (currentChunkPos < 2 ** 32) break;\n        if (mdatSize >= 2 ** 32) __privateGet(this, _mdat).largeSize = true;\n      }\n      let movieBox = moov(tracks, __privateGet(this, _creationTime));\n      __privateGet(this, _writer).writeBox(movieBox);\n      __privateGet(this, _mdat).size = mdatSize;\n      __privateGet(this, _writer).writeBox(__privateGet(this, _mdat));\n      for (let chunk of __privateGet(this, _finalizedChunks)) {\n        for (let sample of chunk.samples) {\n          __privateGet(this, _writer).write(sample.data);\n          sample.data = null;\n        }\n      }\n    } else if (__privateGet(this, _options).fastStart === \"fragmented\") {\n      let startPos = __privateGet(this, _writer).pos;\n      let mfraBox = mfra(tracks);\n      __privateGet(this, _writer).writeBox(mfraBox);\n      let mfraBoxSize = __privateGet(this, _writer).pos - startPos;\n      __privateGet(this, _writer).seek(__privateGet(this, _writer).pos - 4);\n      __privateGet(this, _writer).writeU32(mfraBoxSize);\n    } else {\n      let mdatPos = __privateGet(this, _writer).offsets.get(__privateGet(this, _mdat));\n      let mdatSize = __privateGet(this, _writer).pos - mdatPos;\n      __privateGet(this, _mdat).size = mdatSize;\n      __privateGet(this, _mdat).largeSize = mdatSize >= 2 ** 32;\n      __privateGet(this, _writer).patchBox(__privateGet(this, _mdat));\n      let movieBox = moov(tracks, __privateGet(this, _creationTime));\n      if (typeof __privateGet(this, _options).fastStart === \"object\") {\n        __privateGet(this, _writer).seek(__privateGet(this, _ftypSize));\n        __privateGet(this, _writer).writeBox(movieBox);\n        let remainingBytes = mdatPos - __privateGet(this, _writer).pos;\n        __privateGet(this, _writer).writeBox(free(remainingBytes));\n      } else {\n        __privateGet(this, _writer).writeBox(movieBox);\n      }\n    }\n    __privateMethod(this, _maybeFlushStreamingTargetWriter, maybeFlushStreamingTargetWriter_fn).call(this);\n    __privateGet(this, _writer).finalize();\n    __privateSet(this, _finalized, true);\n  }\n};\n_options = new WeakMap();\n_writer = new WeakMap();\n_ftypSize = new WeakMap();\n_mdat = new WeakMap();\n_videoTrack = new WeakMap();\n_audioTrack = new WeakMap();\n_creationTime = new WeakMap();\n_finalizedChunks = new WeakMap();\n_nextFragmentNumber = new WeakMap();\n_videoSampleQueue = new WeakMap();\n_audioSampleQueue = new WeakMap();\n_finalized = new WeakMap();\n_validateOptions = new WeakSet();\nvalidateOptions_fn = function (options) {\n  if (typeof options !== \"object\") {\n    throw new TypeError(\"The muxer requires an options object to be passed to its constructor.\");\n  }\n  if (!(options.target instanceof Target)) {\n    throw new TypeError(\"The target must be provided and an instance of Target.\");\n  }\n  if (options.video) {\n    if (!SUPPORTED_VIDEO_CODECS.includes(options.video.codec)) {\n      throw new TypeError(`Unsupported video codec: ${options.video.codec}`);\n    }\n    if (!Number.isInteger(options.video.width) || options.video.width <= 0) {\n      throw new TypeError(`Invalid video width: ${options.video.width}. Must be a positive integer.`);\n    }\n    if (!Number.isInteger(options.video.height) || options.video.height <= 0) {\n      throw new TypeError(`Invalid video height: ${options.video.height}. Must be a positive integer.`);\n    }\n    const videoRotation = options.video.rotation;\n    if (typeof videoRotation === \"number\" && ![0, 90, 180, 270].includes(videoRotation)) {\n      throw new TypeError(`Invalid video rotation: ${videoRotation}. Has to be 0, 90, 180 or 270.`);\n    } else if (Array.isArray(videoRotation) && (videoRotation.length !== 9 || videoRotation.some(value => typeof value !== \"number\"))) {\n      throw new TypeError(`Invalid video transformation matrix: ${videoRotation.join()}`);\n    }\n    if (options.video.frameRate !== void 0 && (!Number.isInteger(options.video.frameRate) || options.video.frameRate <= 0)) {\n      throw new TypeError(`Invalid video frame rate: ${options.video.frameRate}. Must be a positive integer.`);\n    }\n  }\n  if (options.audio) {\n    if (!SUPPORTED_AUDIO_CODECS.includes(options.audio.codec)) {\n      throw new TypeError(`Unsupported audio codec: ${options.audio.codec}`);\n    }\n    if (!Number.isInteger(options.audio.numberOfChannels) || options.audio.numberOfChannels <= 0) {\n      throw new TypeError(`Invalid number of audio channels: ${options.audio.numberOfChannels}. Must be a positive integer.`);\n    }\n    if (!Number.isInteger(options.audio.sampleRate) || options.audio.sampleRate <= 0) {\n      throw new TypeError(`Invalid audio sample rate: ${options.audio.sampleRate}. Must be a positive integer.`);\n    }\n  }\n  if (options.firstTimestampBehavior && !FIRST_TIMESTAMP_BEHAVIORS.includes(options.firstTimestampBehavior)) {\n    throw new TypeError(`Invalid first timestamp behavior: ${options.firstTimestampBehavior}`);\n  }\n  if (typeof options.fastStart === \"object\") {\n    if (options.video) {\n      if (options.fastStart.expectedVideoChunks === void 0) {\n        throw new TypeError(`'fastStart' is an object but is missing property 'expectedVideoChunks'.`);\n      } else if (!Number.isInteger(options.fastStart.expectedVideoChunks) || options.fastStart.expectedVideoChunks < 0) {\n        throw new TypeError(`'expectedVideoChunks' must be a non-negative integer.`);\n      }\n    }\n    if (options.audio) {\n      if (options.fastStart.expectedAudioChunks === void 0) {\n        throw new TypeError(`'fastStart' is an object but is missing property 'expectedAudioChunks'.`);\n      } else if (!Number.isInteger(options.fastStart.expectedAudioChunks) || options.fastStart.expectedAudioChunks < 0) {\n        throw new TypeError(`'expectedAudioChunks' must be a non-negative integer.`);\n      }\n    }\n  } else if (![false, \"in-memory\", \"fragmented\"].includes(options.fastStart)) {\n    throw new TypeError(`'fastStart' option must be false, 'in-memory', 'fragmented' or an object.`);\n  }\n  if (options.minFragmentDuration !== void 0 && (!Number.isFinite(options.minFragmentDuration) || options.minFragmentDuration < 0)) {\n    throw new TypeError(`'minFragmentDuration' must be a non-negative number.`);\n  }\n};\n_writeHeader = new WeakSet();\nwriteHeader_fn = function () {\n  __privateGet(this, _writer).writeBox(ftyp({\n    holdsAvc: __privateGet(this, _options).video?.codec === \"avc\",\n    fragmented: __privateGet(this, _options).fastStart === \"fragmented\"\n  }));\n  __privateSet(this, _ftypSize, __privateGet(this, _writer).pos);\n  if (__privateGet(this, _options).fastStart === \"in-memory\") {\n    __privateSet(this, _mdat, mdat(false));\n  } else if (__privateGet(this, _options).fastStart === \"fragmented\") {} else {\n    if (typeof __privateGet(this, _options).fastStart === \"object\") {\n      let moovSizeUpperBound = __privateMethod(this, _computeMoovSizeUpperBound, computeMoovSizeUpperBound_fn).call(this);\n      __privateGet(this, _writer).seek(__privateGet(this, _writer).pos + moovSizeUpperBound);\n    }\n    __privateSet(this, _mdat, mdat(true));\n    __privateGet(this, _writer).writeBox(__privateGet(this, _mdat));\n  }\n  __privateMethod(this, _maybeFlushStreamingTargetWriter, maybeFlushStreamingTargetWriter_fn).call(this);\n};\n_computeMoovSizeUpperBound = new WeakSet();\ncomputeMoovSizeUpperBound_fn = function () {\n  if (typeof __privateGet(this, _options).fastStart !== \"object\") return;\n  let upperBound = 0;\n  let sampleCounts = [__privateGet(this, _options).fastStart.expectedVideoChunks, __privateGet(this, _options).fastStart.expectedAudioChunks];\n  for (let n of sampleCounts) {\n    if (!n) continue;\n    upperBound += (4 + 4) * Math.ceil(2 / 3 * n);\n    upperBound += 4 * n;\n    upperBound += (4 + 4 + 4) * Math.ceil(2 / 3 * n);\n    upperBound += 4 * n;\n    upperBound += 8 * n;\n  }\n  upperBound += 4096;\n  return upperBound;\n};\n_prepareTracks = new WeakSet();\nprepareTracks_fn = function () {\n  if (__privateGet(this, _options).video) {\n    __privateSet(this, _videoTrack, {\n      id: 1,\n      info: {\n        type: \"video\",\n        codec: __privateGet(this, _options).video.codec,\n        width: __privateGet(this, _options).video.width,\n        height: __privateGet(this, _options).video.height,\n        rotation: __privateGet(this, _options).video.rotation ?? 0,\n        decoderConfig: null\n      },\n      // The fallback contains many common frame rates as factors\n      timescale: __privateGet(this, _options).video.frameRate ?? 57600,\n      samples: [],\n      finalizedChunks: [],\n      currentChunk: null,\n      firstDecodeTimestamp: void 0,\n      lastDecodeTimestamp: -1,\n      timeToSampleTable: [],\n      compositionTimeOffsetTable: [],\n      lastTimescaleUnits: null,\n      lastSample: null,\n      compactlyCodedChunkTable: []\n    });\n  }\n  if (__privateGet(this, _options).audio) {\n    __privateSet(this, _audioTrack, {\n      id: __privateGet(this, _options).video ? 2 : 1,\n      info: {\n        type: \"audio\",\n        codec: __privateGet(this, _options).audio.codec,\n        numberOfChannels: __privateGet(this, _options).audio.numberOfChannels,\n        sampleRate: __privateGet(this, _options).audio.sampleRate,\n        decoderConfig: null\n      },\n      timescale: __privateGet(this, _options).audio.sampleRate,\n      samples: [],\n      finalizedChunks: [],\n      currentChunk: null,\n      firstDecodeTimestamp: void 0,\n      lastDecodeTimestamp: -1,\n      timeToSampleTable: [],\n      compositionTimeOffsetTable: [],\n      lastTimescaleUnits: null,\n      lastSample: null,\n      compactlyCodedChunkTable: []\n    });\n    if (__privateGet(this, _options).audio.codec === \"aac\") {\n      let guessedCodecPrivate = __privateMethod(this, _generateMpeg4AudioSpecificConfig, generateMpeg4AudioSpecificConfig_fn).call(this, 2,\n      // Object type for AAC-LC, since it's the most common\n      __privateGet(this, _options).audio.sampleRate, __privateGet(this, _options).audio.numberOfChannels);\n      __privateGet(this, _audioTrack).info.decoderConfig = {\n        codec: __privateGet(this, _options).audio.codec,\n        description: guessedCodecPrivate,\n        numberOfChannels: __privateGet(this, _options).audio.numberOfChannels,\n        sampleRate: __privateGet(this, _options).audio.sampleRate\n      };\n    }\n  }\n};\n_generateMpeg4AudioSpecificConfig = new WeakSet();\ngenerateMpeg4AudioSpecificConfig_fn = function (objectType, sampleRate, numberOfChannels) {\n  let frequencyIndices = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];\n  let frequencyIndex = frequencyIndices.indexOf(sampleRate);\n  let channelConfig = numberOfChannels;\n  let configBits = \"\";\n  configBits += objectType.toString(2).padStart(5, \"0\");\n  configBits += frequencyIndex.toString(2).padStart(4, \"0\");\n  if (frequencyIndex === 15) configBits += sampleRate.toString(2).padStart(24, \"0\");\n  configBits += channelConfig.toString(2).padStart(4, \"0\");\n  let paddingLength = Math.ceil(configBits.length / 8) * 8;\n  configBits = configBits.padEnd(paddingLength, \"0\");\n  let configBytes = new Uint8Array(configBits.length / 8);\n  for (let i = 0; i < configBits.length; i += 8) {\n    configBytes[i / 8] = parseInt(configBits.slice(i, i + 8), 2);\n  }\n  return configBytes;\n};\n_createSampleForTrack = new WeakSet();\ncreateSampleForTrack_fn = function (track, data, type, timestamp, duration, meta, compositionTimeOffset) {\n  let presentationTimestampInSeconds = timestamp / 1e6;\n  let decodeTimestampInSeconds = (timestamp - (compositionTimeOffset ?? 0)) / 1e6;\n  let durationInSeconds = duration / 1e6;\n  let adjusted = __privateMethod(this, _validateTimestamp, validateTimestamp_fn).call(this, presentationTimestampInSeconds, decodeTimestampInSeconds, track);\n  presentationTimestampInSeconds = adjusted.presentationTimestamp;\n  decodeTimestampInSeconds = adjusted.decodeTimestamp;\n  if (meta?.decoderConfig) {\n    if (track.info.decoderConfig === null) {\n      track.info.decoderConfig = meta.decoderConfig;\n    } else {\n      Object.assign(track.info.decoderConfig, meta.decoderConfig);\n    }\n  }\n  let sample = {\n    presentationTimestamp: presentationTimestampInSeconds,\n    decodeTimestamp: decodeTimestampInSeconds,\n    duration: durationInSeconds,\n    data,\n    size: data.byteLength,\n    type,\n    // Will be refined once the next sample comes in\n    timescaleUnitsToNextSample: intoTimescale(durationInSeconds, track.timescale)\n  };\n  return sample;\n};\n_addSampleToTrack = new WeakSet();\naddSampleToTrack_fn = function (track, sample) {\n  if (__privateGet(this, _options).fastStart !== \"fragmented\") {\n    track.samples.push(sample);\n  }\n  const sampleCompositionTimeOffset = intoTimescale(sample.presentationTimestamp - sample.decodeTimestamp, track.timescale);\n  if (track.lastTimescaleUnits !== null) {\n    let timescaleUnits = intoTimescale(sample.decodeTimestamp, track.timescale, false);\n    let delta = Math.round(timescaleUnits - track.lastTimescaleUnits);\n    track.lastTimescaleUnits += delta;\n    track.lastSample.timescaleUnitsToNextSample = delta;\n    if (__privateGet(this, _options).fastStart !== \"fragmented\") {\n      let lastTableEntry = last(track.timeToSampleTable);\n      if (lastTableEntry.sampleCount === 1) {\n        lastTableEntry.sampleDelta = delta;\n        lastTableEntry.sampleCount++;\n      } else if (lastTableEntry.sampleDelta === delta) {\n        lastTableEntry.sampleCount++;\n      } else {\n        lastTableEntry.sampleCount--;\n        track.timeToSampleTable.push({\n          sampleCount: 2,\n          sampleDelta: delta\n        });\n      }\n      const lastCompositionTimeOffsetTableEntry = last(track.compositionTimeOffsetTable);\n      if (lastCompositionTimeOffsetTableEntry.sampleCompositionTimeOffset === sampleCompositionTimeOffset) {\n        lastCompositionTimeOffsetTableEntry.sampleCount++;\n      } else {\n        track.compositionTimeOffsetTable.push({\n          sampleCount: 1,\n          sampleCompositionTimeOffset\n        });\n      }\n    }\n  } else {\n    track.lastTimescaleUnits = 0;\n    if (__privateGet(this, _options).fastStart !== \"fragmented\") {\n      track.timeToSampleTable.push({\n        sampleCount: 1,\n        sampleDelta: intoTimescale(sample.duration, track.timescale)\n      });\n      track.compositionTimeOffsetTable.push({\n        sampleCount: 1,\n        sampleCompositionTimeOffset\n      });\n    }\n  }\n  track.lastSample = sample;\n  let beginNewChunk = false;\n  if (!track.currentChunk) {\n    beginNewChunk = true;\n  } else {\n    let currentChunkDuration = sample.presentationTimestamp - track.currentChunk.startTimestamp;\n    if (__privateGet(this, _options).fastStart === \"fragmented\") {\n      let mostImportantTrack = __privateGet(this, _videoTrack) ?? __privateGet(this, _audioTrack);\n      const chunkDuration = __privateGet(this, _options).minFragmentDuration ?? 1;\n      if (track === mostImportantTrack && sample.type === \"key\" && currentChunkDuration >= chunkDuration) {\n        beginNewChunk = true;\n        __privateMethod(this, _finalizeFragment, finalizeFragment_fn).call(this);\n      }\n    } else {\n      beginNewChunk = currentChunkDuration >= 0.5;\n    }\n  }\n  if (beginNewChunk) {\n    if (track.currentChunk) {\n      __privateMethod(this, _finalizeCurrentChunk, finalizeCurrentChunk_fn).call(this, track);\n    }\n    track.currentChunk = {\n      startTimestamp: sample.presentationTimestamp,\n      samples: []\n    };\n  }\n  track.currentChunk.samples.push(sample);\n};\n_validateTimestamp = new WeakSet();\nvalidateTimestamp_fn = function (presentationTimestamp, decodeTimestamp, track) {\n  const strictTimestampBehavior = __privateGet(this, _options).firstTimestampBehavior === \"strict\";\n  const noLastDecodeTimestamp = track.lastDecodeTimestamp === -1;\n  const timestampNonZero = decodeTimestamp !== 0;\n  if (strictTimestampBehavior && noLastDecodeTimestamp && timestampNonZero) {\n    throw new Error(`The first chunk for your media track must have a timestamp of 0 (received DTS=${decodeTimestamp}).Non-zero first timestamps are often caused by directly piping frames or audio data from a MediaStreamTrack into the encoder. Their timestamps are typically relative to the age of thedocument, which is probably what you want.\n\nIf you want to offset all timestamps of a track such that the first one is zero, set firstTimestampBehavior: 'offset' in the options.\n`);\n  } else if (__privateGet(this, _options).firstTimestampBehavior === \"offset\" || __privateGet(this, _options).firstTimestampBehavior === \"cross-track-offset\") {\n    if (track.firstDecodeTimestamp === void 0) {\n      track.firstDecodeTimestamp = decodeTimestamp;\n    }\n    let baseDecodeTimestamp;\n    if (__privateGet(this, _options).firstTimestampBehavior === \"offset\") {\n      baseDecodeTimestamp = track.firstDecodeTimestamp;\n    } else {\n      baseDecodeTimestamp = Math.min(__privateGet(this, _videoTrack)?.firstDecodeTimestamp ?? Infinity, __privateGet(this, _audioTrack)?.firstDecodeTimestamp ?? Infinity);\n    }\n    decodeTimestamp -= baseDecodeTimestamp;\n    presentationTimestamp -= baseDecodeTimestamp;\n  }\n  if (decodeTimestamp < track.lastDecodeTimestamp) {\n    throw new Error(`Timestamps must be monotonically increasing (DTS went from ${track.lastDecodeTimestamp * 1e6} to ${decodeTimestamp * 1e6}).`);\n  }\n  track.lastDecodeTimestamp = decodeTimestamp;\n  return {\n    presentationTimestamp,\n    decodeTimestamp\n  };\n};\n_finalizeCurrentChunk = new WeakSet();\nfinalizeCurrentChunk_fn = function (track) {\n  if (__privateGet(this, _options).fastStart === \"fragmented\") {\n    throw new Error(\"Can't finalize individual chunks if 'fastStart' is set to 'fragmented'.\");\n  }\n  if (!track.currentChunk) return;\n  track.finalizedChunks.push(track.currentChunk);\n  __privateGet(this, _finalizedChunks).push(track.currentChunk);\n  if (track.compactlyCodedChunkTable.length === 0 || last(track.compactlyCodedChunkTable).samplesPerChunk !== track.currentChunk.samples.length) {\n    track.compactlyCodedChunkTable.push({\n      firstChunk: track.finalizedChunks.length,\n      // 1-indexed\n      samplesPerChunk: track.currentChunk.samples.length\n    });\n  }\n  if (__privateGet(this, _options).fastStart === \"in-memory\") {\n    track.currentChunk.offset = 0;\n    return;\n  }\n  track.currentChunk.offset = __privateGet(this, _writer).pos;\n  for (let sample of track.currentChunk.samples) {\n    __privateGet(this, _writer).write(sample.data);\n    sample.data = null;\n  }\n  __privateMethod(this, _maybeFlushStreamingTargetWriter, maybeFlushStreamingTargetWriter_fn).call(this);\n};\n_finalizeFragment = new WeakSet();\nfinalizeFragment_fn = function (flushStreamingWriter = true) {\n  if (__privateGet(this, _options).fastStart !== \"fragmented\") {\n    throw new Error(\"Can't finalize a fragment unless 'fastStart' is set to 'fragmented'.\");\n  }\n  let tracks = [__privateGet(this, _videoTrack), __privateGet(this, _audioTrack)].filter(track => track && track.currentChunk);\n  if (tracks.length === 0) return;\n  let fragmentNumber = __privateWrapper(this, _nextFragmentNumber)._++;\n  if (fragmentNumber === 1) {\n    let movieBox = moov(tracks, __privateGet(this, _creationTime), true);\n    __privateGet(this, _writer).writeBox(movieBox);\n  }\n  let moofOffset = __privateGet(this, _writer).pos;\n  let moofBox = moof(fragmentNumber, tracks);\n  __privateGet(this, _writer).writeBox(moofBox);\n  {\n    let mdatBox = mdat(false);\n    let totalTrackSampleSize = 0;\n    for (let track of tracks) {\n      for (let sample of track.currentChunk.samples) {\n        totalTrackSampleSize += sample.size;\n      }\n    }\n    let mdatSize = __privateGet(this, _writer).measureBox(mdatBox) + totalTrackSampleSize;\n    if (mdatSize >= 2 ** 32) {\n      mdatBox.largeSize = true;\n      mdatSize = __privateGet(this, _writer).measureBox(mdatBox) + totalTrackSampleSize;\n    }\n    mdatBox.size = mdatSize;\n    __privateGet(this, _writer).writeBox(mdatBox);\n  }\n  for (let track of tracks) {\n    track.currentChunk.offset = __privateGet(this, _writer).pos;\n    track.currentChunk.moofOffset = moofOffset;\n    for (let sample of track.currentChunk.samples) {\n      __privateGet(this, _writer).write(sample.data);\n      sample.data = null;\n    }\n  }\n  let endPos = __privateGet(this, _writer).pos;\n  __privateGet(this, _writer).seek(__privateGet(this, _writer).offsets.get(moofBox));\n  let newMoofBox = moof(fragmentNumber, tracks);\n  __privateGet(this, _writer).writeBox(newMoofBox);\n  __privateGet(this, _writer).seek(endPos);\n  for (let track of tracks) {\n    track.finalizedChunks.push(track.currentChunk);\n    __privateGet(this, _finalizedChunks).push(track.currentChunk);\n    track.currentChunk = null;\n  }\n  if (flushStreamingWriter) {\n    __privateMethod(this, _maybeFlushStreamingTargetWriter, maybeFlushStreamingTargetWriter_fn).call(this);\n  }\n};\n_maybeFlushStreamingTargetWriter = new WeakSet();\nmaybeFlushStreamingTargetWriter_fn = function () {\n  if (__privateGet(this, _writer) instanceof StreamTargetWriter) {\n    __privateGet(this, _writer).flush();\n  }\n};\n_ensureNotFinalized = new WeakSet();\nensureNotFinalized_fn = function () {\n  if (__privateGet(this, _finalized)) {\n    throw new Error(\"Cannot add new video or audio chunks after the file has been finalized.\");\n  }\n};\nexport { ArrayBufferTarget, FileSystemWritableFileStreamTarget, Muxer, StreamTarget };"],
  "mappings": "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",
  "names": []
}
