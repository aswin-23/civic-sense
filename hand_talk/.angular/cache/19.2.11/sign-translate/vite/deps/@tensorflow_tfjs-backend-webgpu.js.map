{
  "version": 3,
  "sources": ["../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/flags_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/base.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/backend_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/adapter_info.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/buffer_manager.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/texture_manager.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/webgpu_program.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/shader_util.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/webgpu_util.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/register_all_kernels.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/_FusedMatMul.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/BatchMatMul_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/matmul_packed_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/binary_op_util.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/unary_op_util.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/activation_util.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/matmul_reduce_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/matmul_small_output_size_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/matmul_splitK_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Fill.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/fill_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Reshape.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Abs.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernel_utils/kernel_funcs_utils.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/binary_op_complex_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/binary_op_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Complex.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Identity.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/unary_op_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernel_utils/shared.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Acos.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Acosh.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Add.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/AddN.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/addn_packed_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/All.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernel_utils/reduce.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Transpose.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/transpose_shared_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/transpose_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/reduce_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Any.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/ArgMax.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/argminmax_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/ArgMin.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Asin.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Asinh.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Atan.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Atan2.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Atanh.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/AvgPool.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Pool_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/pool_filtersizeone_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/pool_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Max.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Mean.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/AvgPool3D.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/AvgPool3DGrad.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/avg_pool_backprop_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/AvgPoolGrad.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/BatchMatMul.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/BatchToSpaceND.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Slice.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/slice_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Bincount.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/bincount_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/BroadcastArgs.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/broadcast_args_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Cast.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/NotEqual.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Real.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernel_utils/int.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Ceil.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/ClipByValue.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/clip_vec4_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/clip_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/ComplexAbs.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/complex_abs_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Concat.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Concat_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/concat_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Imag.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Conv2D.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Conv2D_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/conv2d_mm_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/conv2d_naive_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/im2col_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Conv2DBackpropFilter.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/conv_backprop_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Conv2DBackpropInput.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/conv_backprop_mm_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Conv3D.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/conv3d_naive_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Conv3DBackpropFilterV2.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Conv3DBackpropInputV2.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Cos.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Cosh.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/CropAndResize.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/crop_and_resize_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Cumprod.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/cum_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Cum_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Cumsum.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/DenseBincount.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/DepthToSpace.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/depth_to_space_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/DepthwiseConv2dNative.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/depthwise_conv2d_nchw_shared_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/depthwise_conv2d_vec4_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/depthwise_conv2d_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/DepthwiseConv2dNativeBackpropFilter.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/conv_backprop_depthwise_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/DepthwiseConv2dNativeBackpropInput.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Diag.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/diag_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Dilation2D.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/dilation_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Dilation2DBackpropFilter.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/dilation_backprop_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Dilation2DBackpropInput.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Draw.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/draw_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Einsum.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Multiply.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Sum.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Elu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/EluGrad.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Equal.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Erf.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Exp.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/ExpandDims.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Expm1.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/FFT.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/FFT_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/fft_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/FlipLeftRight.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/flip_left_right_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Floor.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/FloorDiv.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/FromPixels.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/from_pixels_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/FusedBatchNorm.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/batchnorm_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/FusedConv2D.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/FusedDepthwiseConv2D.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/GatherNd.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/gather_nd_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/GatherV2.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/gather_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Greater.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/GreaterEqual.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/IFFT.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/IsFinite.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/IsInf.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/IsNaN.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/LeakyRelu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Less.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/LessEqual.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/LinSpace.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/lin_space_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Log.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Log1p.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/LogicalAnd.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/LogicalNot.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/LogicalOr.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/LRN.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/lrn_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/LRNGrad.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/lrn_grad_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Maximum.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/MaxPool.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/MaxPool3D.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/MaxPool3DGrad.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/max_pool_backprop_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/MaxPoolGrad.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/MaxPoolWithArgmax.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Min.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Minimum.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/MirrorPad.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/mirror_pad_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Mod.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Multinomial.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/multinomial_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Softmax.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/softmax_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Neg.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/NonMaxSuppressionV3.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/NonMaxSuppressionV5.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/OneHot.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/onehot_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/OnesLike.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/ZerosLike.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Pack.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/PadV2.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/pad_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Pow.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Prelu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Prod.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Range.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/RealDiv.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Reciprocal.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Relu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Relu6.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/ResizeBilinear.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/resize_bilinear_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/ResizeBilinearGrad.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/resize_bilinear_backprop_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/ResizeNearestNeighbor.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/resize_nearest_neighbor_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/ResizeNearestNeighborGrad.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/resize_nearest_neighbor_backprop_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Reverse.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/reverse_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/RotateWithOffset.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/rotate_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Round.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Rsqrt.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/ScatterNd.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/scatter_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/SearchSorted.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/search_sorted_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Select.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/select_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Selu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Sigmoid.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Sign.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Sin.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Sinh.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Softplus.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/SpaceToBatchND.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/space_to_batchND_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/SparseSegmentMean.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernel_utils/sparse_segment_reduce.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/sparse_segment_reduce_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/SparseSegmentSum.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/SparseToDense.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Tile.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/tile_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/SplitV.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Sqrt.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Square.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/SquaredDifference.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Step.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/StridedSlice.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/strided_slice_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/StringNGrams.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Sub.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Tan.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Tanh.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/TensorScatterUpdate.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/TopK.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/top_k_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Transform.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/transform_webgpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/Unpack.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/kernels/UnsortedSegmentSum.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgpu/dist/unsorted_segment_sum_webgpu.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nconst ENV = env();\n/** The batched dispatching calls size in the device queue. */\nENV.registerFlag('WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE', () => 15);\n/**\n * Whether we forward execution to the CPU backend if tensors are small and\n * reside on the CPU.\n */\nENV.registerFlag('WEBGPU_CPU_FORWARD', () => true);\n/**\n * This flag is used to test different types of matmul programs.\n *\n * See MatMulProgramType in webgpu_util.ts for a list of available values.\n */\nENV.registerFlag('WEBGPU_MATMUL_PROGRAM_TYPE', () => -1);\n/**\n * Whether to use conv2dTranspose_naive which directly implement the\n * conv2dTranspose logic rather than using a matmul to simulate.\n */\nENV.registerFlag('WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE', () => true);\n/**\n * Whether we use low power GPU. Otherwise, a high performance GPU will be\n * requested.\n */\nENV.registerFlag('WEBGPU_USE_LOW_POWER_GPU', () => false);\n/**\n * Threshold for input tensor size that determines whether WebGPU backend will\n * delegate computation to CPU.\n *\n * Default value is 1000.\n */\nENV.registerFlag('WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD', () => 1000);\n/**\n * Whether to use a dummy canvas to make profiling tools like PIX work with\n * TFJS webgpu backend.\n */\nENV.registerFlag('WEBGPU_USE_PROFILE_TOOL', () => false);\n/**\n * Whether to use import API.\n */\nENV.registerFlag('WEBGPU_IMPORT_EXTERNAL_TEXTURE', () => true);\n/**\n * Whether to use conv2dNaive for debugging.\n */\nENV.registerFlag('WEBGPU_USE_NAIVE_CONV2D_DEBUG', () => false);\n/**\n * Threshold to increase dispatched workgroups for matmul. If too few workgroups\n * are dispatched, it means the hardware may be in low occupancy.\n * -1 means it's not set by the user. A default strategy will be applied.\n */\nENV.registerFlag('WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL', () => -1);\n/**\n * Whether we will run im2col as a separate shader for convolution.\n */\nENV.registerFlag('WEBGPU_CONV_SEPARATE_IM2COL_SHADER', () => false);\n/**\n * A string used to match shader key. If any matches, print the related shader.\n * Seperated by comma. 'all' to print all. 'binary' to print binary(add, mul,\n * etc.). 'unary,conv2d' to print both unary and conv2d.\n */\nENV.registerFlag('WEBGPU_PRINT_SHADER', () => '');\n/** Experimental flag, whether enter compile only phase. */\nENV.registerFlag('WEBGPU_ENGINE_COMPILE_ONLY', () => false);\n", "/**\n * @license\n * Copyright 2022 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport './flags_webgpu';\nimport { env, registerBackend } from '@tensorflow/tfjs-core';\nimport { WebGPUBackend } from './backend_webgpu';\nimport { isWebGPUSupported } from './webgpu_util';\nif (isWebGPUSupported()) {\n  registerBackend('webgpu', async () => {\n    const gpuDescriptor = {\n      powerPreference: env().get('WEBGPU_USE_LOW_POWER_GPU') ? 'low-power' : 'high-performance'\n    };\n    const adapter = await navigator.gpu.requestAdapter(gpuDescriptor);\n    const deviceDescriptor = {};\n    const requiredFeatures = [];\n    if (adapter.features.has('timestamp-query')) {\n      requiredFeatures.push('timestamp-query');\n    }\n    if (adapter.features.has('bgra8unorm-storage')) {\n      requiredFeatures.push(['bgra8unorm-storage']);\n    }\n    deviceDescriptor.requiredFeatures = requiredFeatures;\n    const adapterLimits = adapter.limits;\n    deviceDescriptor.requiredLimits = {\n      'maxComputeWorkgroupStorageSize': adapterLimits.maxComputeWorkgroupStorageSize,\n      'maxComputeWorkgroupsPerDimension': adapterLimits.maxComputeWorkgroupsPerDimension,\n      'maxStorageBufferBindingSize': adapterLimits.maxStorageBufferBindingSize,\n      'maxBufferSize': adapterLimits.maxBufferSize,\n      'maxComputeWorkgroupSizeX': adapterLimits.maxComputeWorkgroupSizeX,\n      'maxComputeInvocationsPerWorkgroup': adapterLimits.maxComputeInvocationsPerWorkgroup\n    };\n    const device = await adapter.requestDevice(deviceDescriptor);\n    const adapterInfo = 'info' in adapter ? adapter.info : 'requestAdapterInfo' in adapter\n    // tslint:disable-next-line:no-any\n    ? await adapter.requestAdapterInfo() : undefined;\n    return new WebGPUBackend(device, adapterInfo);\n  }, 3 /*priority*/);\n}\n// Export webgpu utilities\nexport * from './webgpu';\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport './flags_webgpu';\nimport { backend_util, buffer, DataStorage, engine, env, KernelBackend, util } from '@tensorflow/tfjs-core';\nimport { AdapterInfo } from './adapter_info';\nimport { BufferManager } from './buffer_manager';\nimport { TextureManager } from './texture_manager';\nimport * as webgpu_program from './webgpu_program';\nimport * as webgpu_util from './webgpu_util';\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber('WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD');\n// Reshape dispatch, not to exceed device limits.\nconst reshapeDispatch = (device, program) => {\n  const MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE = device.limits.maxComputeWorkgroupsPerDimension;\n  const layout = program['dispatchLayout'];\n  const dispatch = program['dispatch'];\n  if (dispatch.every(d => d <= MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE)) {\n    return dispatch;\n  }\n  util.assert(dispatch[0] > MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE && layout.y === undefined && layout.z === undefined, () => 'Dispatch size exceeds WebGPU limits in Y or Z dimension.');\n  let dispatchAverage = Math.ceil(Math.sqrt(dispatch[0]));\n  if (dispatchAverage > MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE) {\n    dispatchAverage = Math.ceil(Math.cbrt(dispatch[0]));\n    util.assert(dispatchAverage <= MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE, () => 'Total dispatch size exceeds WebGPU maximum.');\n    return [dispatchAverage, dispatchAverage, dispatchAverage];\n  } else {\n    return [dispatchAverage, dispatchAverage, 1];\n  }\n};\nclass WebGPUBackend extends KernelBackend {\n  nextDataId() {\n    return WebGPUBackend.nextDataId++;\n  }\n  constructor(device, adapterInfo) {\n    super();\n    this.commandQueueOwnedIds = new WeakSet();\n    this.dispatchCountInPass = 0;\n    this.disposed = false;\n    this.downloadWaitMs = 0;\n    this.tensorDataPendingDisposal = [];\n    this.queryResolveBuffer = null;\n    this.querySet = null;\n    this.querySetCount = 2;\n    this.stagingPendingDisposal = [];\n    this.uniformPendingDisposal = [];\n    this.uploadWaitMs = 0;\n    this.hasReadSyncWarned = false;\n    this.hasTimestampQueryWarned = false;\n    if (!webgpu_util.isWebGPUSupported()) {\n      throw new Error('WebGPU is not supported on this device');\n    }\n    this.pipelineCache = {};\n    this.device = device;\n    this.queue = device.queue;\n    this.commandEncoder = null;\n    this.computePassEncoder = null;\n    this.adapterInfo = new AdapterInfo(adapterInfo);\n    this.supportTimestampQuery = this.device.features.has('timestamp-query');\n    this.thresholdToIncreaseWorkgroups = this.adapterInfo.intelGPUGeneration >= 12 ? 16 : 8;\n    this.bufferManager = new BufferManager(this.device);\n    this.textureManager = new TextureManager(this.device);\n    this.tensorMap = new DataStorage(this, engine());\n    // Profiling tools like PIX needs this dummy canvas to\n    // trigger capturing a frame.\n    if (env().getBool('WEBGPU_USE_PROFILE_TOOL')) {\n      this.dummyCanvas = document.createElement('canvas');\n      this.dummyCanvas.width = 1;\n      this.dummyCanvas.height = 1;\n      this.dummyContext = this.dummyCanvas.getContext('webgpu');\n      this.dummyContext.configure({\n        device,\n        format: 'bgra8unorm'\n      });\n      document.body.appendChild(this.dummyCanvas);\n    }\n  }\n  floatPrecision() {\n    return 32;\n  }\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or delayed in this backend, false if there are still\n   * references.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId, force = false) {\n    // No-op if already disposed.\n    if (!this.tensorMap.has(dataId)) {\n      return true;\n    }\n    const tensorData = this.tensorMap.get(dataId);\n    if (force) {\n      tensorData.refCount = 0;\n    } else {\n      tensorData.refCount--;\n    }\n    if (tensorData.refCount > 0) {\n      return false;\n    }\n    if (tensorData.complexTensorInfos != null) {\n      this.disposeData(tensorData.complexTensorInfos.real.dataId);\n      this.disposeData(tensorData.complexTensorInfos.imag.dataId);\n    }\n    if (this.commandQueueOwnedIds.has(dataId)) {\n      this.tensorDataPendingDisposal.push(dataId);\n      return true;\n    }\n    this.releaseResource(dataId);\n    this.tensorMap.delete(dataId);\n    return true;\n  }\n  memory() {\n    return {\n      numBytesInGPU: this.bufferManager.numBytesUsed,\n      numBytesAllocatedInGPU: this.bufferManager.numBytesAllocated,\n      unreliable: false\n    };\n  }\n  releaseResource(dataId) {\n    const tensorData = this.tensorMap.get(dataId);\n    if (!tensorData || !tensorData.resource) {\n      return;\n    }\n    // If tensor's resource is from external, do not release.\n    if (tensorData.external) {\n      tensorData.resource = null;\n      return;\n    }\n    if (tensorData.resource instanceof GPUBuffer) {\n      this.bufferManager.releaseBuffer(tensorData.resource);\n    } else if (tensorData.resource instanceof GPUTexture) {\n      this.textureManager.releaseTexture(tensorData.resource);\n    }\n    tensorData.resource = null;\n  }\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId) {\n    if (this.tensorMap.has(dataId)) {\n      const tensorData = this.tensorMap.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n  /** Increase refCount of a `TensorData`. */\n  incRef(dataId) {\n    const tensorData = this.tensorMap.get(dataId);\n    tensorData.refCount++;\n  }\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId) {\n    if (this.tensorMap.has(dataId)) {\n      const tensorData = this.tensorMap.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n  write(values, shape, dtype) {\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {\n      id: this.nextDataId()\n    };\n    this.tensorMap.set(dataId, {\n      dtype,\n      shape,\n      values,\n      refCount: 1\n    });\n    return dataId;\n  }\n  move(dataId, values, shape, dtype, refCount) {\n    if (dtype === 'complex64') {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n    this.tensorMap.set(dataId, {\n      dtype,\n      shape,\n      values,\n      refCount\n    });\n  }\n  submitQueue() {\n    this.queue.submit([this.commandEncoder.finish()]);\n    this.commandEncoder = null;\n    this.dispatchCountInPass = 0;\n    this.commandQueueOwnedIds = new WeakSet();\n    this.tensorDataPendingDisposal.forEach(d => {\n      this.releaseResource(d);\n      this.tensorMap.delete(d);\n    });\n    this.uniformPendingDisposal.forEach(b => this.bufferManager.releaseBuffer(b));\n    this.stagingPendingDisposal.forEach(b => this.bufferManager.releaseBuffer(b, false));\n    this.tensorDataPendingDisposal = [];\n    this.uniformPendingDisposal = [];\n    this.stagingPendingDisposal = [];\n  }\n  ensureCommandEncoderReady() {\n    if (!this.commandEncoder) {\n      this.commandEncoder = this.device.createCommandEncoder();\n    }\n  }\n  endComputePassEncoder() {\n    if (this.computePassEncoder) {\n      this.computePassEncoder.end();\n      this.computePassEncoder = null;\n    }\n  }\n  // Check if parallel compilation is done.\n  async checkCompileCompletionAsync() {\n    let pipelines;\n    try {\n      pipelines = await Promise.all(Object.values(this.pipelineCache));\n    } catch (e) {\n      // TODO: Add test case to catch this exception.\n      throw new Error(e.message);\n    }\n    Object.keys(this.pipelineCache).map((key, i) => {\n      this.pipelineCache[key] = pipelines[i];\n    });\n  }\n  async getBufferData(buffer) {\n    if (env().getBool('WEBGPU_ENGINE_COMPILE_ONLY')) {\n      console.warn('The data may be invalid since WEBGPU_ENGINE_COMPILE_ONLY is true, this can only be called when WEBGPU_ENGINE_COMPILE_ONLY is false');\n      return null;\n    }\n    const size = buffer.size;\n    const stagingBuffer = this.bufferManager.acquireBuffer(size, GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ);\n    this.ensureCommandEncoderReady();\n    this.endComputePassEncoder();\n    this.commandEncoder.copyBufferToBuffer(buffer, 0, stagingBuffer, 0, size);\n    this.submitQueue();\n    await stagingBuffer.mapAsync(GPUMapMode.READ);\n    const values = stagingBuffer.getMappedRange().slice(0);\n    stagingBuffer.unmap();\n    if (stagingBuffer != null) {\n      this.bufferManager.releaseBuffer(stagingBuffer);\n    }\n    // Need to get texture from swapChain to enable profiling tool\n    // to capture a frame\n    if (env().getBool('WEBGPU_USE_PROFILE_TOOL')) {\n      util.assert(this.dummyContext !== undefined, () => `Fail to get context for profiling tool`);\n      this.dummyContext.getCurrentTexture();\n    }\n    return values;\n  }\n  convertAndCacheOnCPU(dataId, data) {\n    const tensorData = this.tensorMap.get(dataId);\n    tensorData.values = data;\n    return tensorData.values;\n  }\n  readSync(dataId) {\n    const tensorData = this.tensorMap.get(dataId);\n    const {\n      values,\n      complexTensorInfos\n    } = tensorData;\n    if (values != null || tensorData.dtype === 'string') {\n      return values;\n    }\n    if (tensorData.dtype === 'complex64') {\n      const realValues = this.readSync(complexTensorInfos.real.dataId);\n      const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n      const complexVals = util.convertBackendValuesAndArrayBuffer(backend_util.mergeRealAndImagArrays(realValues, imagValues).buffer, 'float32');\n      this.convertAndCacheOnCPU(dataId, complexVals);\n      return complexVals;\n    }\n    if (!this.hasReadSyncWarned) {\n      this.hasReadSyncWarned = true;\n      console.warn(`The performance of synchronously reading data from GPU to CPU is ` + `poor on the webgpu backend, please use asynchronous APIs instead.`);\n    }\n    const alphaModes = ['opaque', 'premultiplied'];\n    const buffer = tensorData.resource;\n    const bufferSize = buffer.size;\n    util.assert(bufferSize % 4 === 0, () => 'Because there is 4 bytes for ' + 'one pixel, buffer size must be multiple of 4.');\n    const pixelsSize = bufferSize / 4;\n    const valsGPU = new ArrayBuffer(bufferSize);\n    // TODO: adjust the reading window size according the `bufferSize`.\n    const canvasWidth = 256,\n      canvasHeight = 256;\n    const stagingDeviceStorage = alphaModes.map(_ => new OffscreenCanvas(canvasWidth, canvasHeight));\n    const stagingHostStorage = new OffscreenCanvas(canvasWidth, canvasHeight);\n    this.endComputePassEncoder();\n    stagingDeviceStorage.map((storage, index) => {\n      const context = storage.getContext('webgpu');\n      // TODO: use rgba8unorm format when this format is supported on Mac.\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1298618\n      context.configure({\n        device: this.device,\n        format: 'bgra8unorm',\n        usage: GPUTextureUsage.COPY_DST,\n        alphaMode: alphaModes[index]\n      });\n      return context.getCurrentTexture();\n    }).map((texture, index) => {\n      const bytesPerRow = canvasWidth * 4;\n      const readDataGPUToCPU = (width, height, offset) => {\n        this.ensureCommandEncoderReady();\n        this.commandEncoder.copyBufferToTexture({\n          buffer,\n          bytesPerRow,\n          offset\n        }, {\n          texture\n        }, {\n          width,\n          height\n        });\n        this.submitQueue();\n        const context = stagingHostStorage.getContext('2d', {\n          willReadFrequently: true\n        });\n        context.clearRect(0, 0, width, height);\n        context.drawImage(stagingDeviceStorage[index], 0, 0);\n        const stagingValues = context.getImageData(0, 0, width, height).data;\n        const alphaMode = alphaModes[index];\n        const span = new Uint8ClampedArray(valsGPU, offset, width * height * 4);\n        for (let k = 0; k < span.length; k += 4) {\n          if (alphaMode === 'premultiplied') {\n            span[k + 3] = stagingValues[k + 3];\n          } else {\n            const value = stagingValues[k];\n            span[k] = stagingValues[k + 2];\n            span[k + 1] = stagingValues[k + 1];\n            span[k + 2] = value;\n          }\n        }\n      };\n      const fullyReadCount = Math.floor(pixelsSize / (canvasWidth * canvasHeight));\n      let width = canvasWidth,\n        height = canvasHeight,\n        offset = 0;\n      for (let i = 0; i < fullyReadCount; i++) {\n        // Read the buffer data, which fully fill the whole canvas.\n        readDataGPUToCPU(width, height, offset);\n        offset += canvasWidth * canvasHeight * 4;\n      }\n      const remainSize = pixelsSize % (canvasWidth * canvasHeight);\n      height = Math.floor(remainSize / canvasWidth);\n      if (height > 0) {\n        // Read the buffer data, which fully fill certain rows of canvas.\n        readDataGPUToCPU(width, height, offset);\n        offset += height * (canvasWidth * 4);\n      }\n      width = remainSize % canvasWidth;\n      if (width > 0) {\n        // Read the buffer data, which not fully fill one row of canvas.\n        readDataGPUToCPU(width, 1, offset);\n      }\n    });\n    const vals = util.convertBackendValuesAndArrayBuffer(valsGPU, tensorData.dtype);\n    this.convertAndCacheOnCPU(dataId, vals);\n    return vals;\n  }\n  async read(dataId) {\n    if (!this.tensorMap.has(dataId)) {\n      throw new Error(`Tensor ${dataId} was not registered!`);\n    }\n    const tensorData = this.tensorMap.get(dataId);\n    const {\n      values\n    } = tensorData;\n    if (values != null) {\n      return values;\n    }\n    // Download the values from the GPU.\n    let vals;\n    if (tensorData.dtype === 'complex64') {\n      const ps = await Promise.all([this.read(tensorData.complexTensorInfos.real.dataId), this.read(tensorData.complexTensorInfos.imag.dataId)]);\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      const data = await this.getBufferData(tensorData.resource);\n      vals = util.convertBackendValuesAndArrayBuffer(data, tensorData.dtype);\n    }\n    this.convertAndCacheOnCPU(dataId, vals);\n    return vals;\n  }\n  // The source GPUBuffer and destination GPUBuffer have the same size and\n  // usage.\n  copyBuffer(srcBuffer) {\n    const size = srcBuffer.size;\n    const usage = srcBuffer.usage;\n    const dstBuffer = this.bufferManager.acquireBuffer(size, usage);\n    this.ensureCommandEncoderReady();\n    this.endComputePassEncoder();\n    this.commandEncoder.copyBufferToBuffer(srcBuffer, 0, dstBuffer, 0, size);\n    this.submitQueue();\n    return dstBuffer;\n  }\n  /**\n   * Create a TF.js tensor out of an existing WebGPU buffer.\n   */\n  createTensorFromGPUData(webGPUData, shape, dtype) {\n    let buffer = webGPUData.buffer;\n    if (dtype === 'complex64') {\n      throw new Error(`Cannot write to a complex64 dtype. `);\n    }\n    const dataId = {\n      id: this.nextDataId()\n    };\n    this.tensorMap.set(dataId, {\n      dtype,\n      shape,\n      values: null,\n      refCount: 1,\n      external: webGPUData.zeroCopy\n    });\n    const tensorData = this.tensorMap.get(dataId);\n    const size = webgpu_util.GPUBytesPerElement(tensorData.dtype) * util.sizeFromShape(tensorData.shape);\n    if (webGPUData.buffer.size < size) {\n      throw new Error(`GPUBuffer size(${webGPUData.buffer.size}) is smaller than tensor size(${size})!`);\n    } else if ((webGPUData.buffer.usage & (GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC)) !== (GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC)) {\n      throw new Error('GPUBuffer.usage should include GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC!');\n    }\n    // Do buffer copy by default.\n    if (webGPUData.zeroCopy !== true) {\n      buffer = this.copyBuffer(buffer);\n    }\n    tensorData.resource = buffer;\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n  }\n  /**\n   * Read tensor to a new GPUBuffer.\n   * @param dataId The source tensor.\n   */\n  readToGPU(dataId) {\n    const srcTensorData = this.tensorMap.get(dataId);\n    const {\n      values,\n      dtype,\n      shape,\n      resource\n    } = srcTensorData;\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading buffer for complex64 dtype.');\n    }\n    if (resource == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    }\n    const srcBuffer = resource;\n    const size = srcBuffer.size;\n    const usage = srcBuffer.usage;\n    const buffer = this.bufferManager.acquireBuffer(size, usage);\n    this.ensureCommandEncoderReady();\n    this.endComputePassEncoder();\n    this.commandEncoder.copyBufferToBuffer(resource, 0, buffer, 0, size);\n    this.submitQueue();\n    const tensorInfo = this.makeTensorInfo(shape, dtype);\n    // Make engine track this tensor, so that we can dispose it later.\n    const tensorRef = engine().makeTensorFromTensorInfo(tensorInfo);\n    const tensorData = this.tensorMap.get(tensorInfo.dataId);\n    tensorData.resource = buffer;\n    return {\n      tensorRef,\n      buffer\n    };\n  }\n  bufferSync(t) {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = data.map(d => util.decodeString(d));\n        return buffer(t.shape, t.dtype, strings);\n      } catch (_a) {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape, t.dtype, data);\n  }\n  async time(f) {\n    if (!this.supportTimestampQuery && !this.hasTimestampQueryWarned) {\n      console.warn(`This device doesn't support timestamp-query extension. ` + `Start Chrome browser with flag ` + `--enable-dawn-features=allow_unsafe_apis to try it again. ` + `Otherwise, zero will be shown for the kernel time when profiling ` + `mode is enabled.`);\n      this.hasTimestampQueryWarned = true;\n    }\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers = [];\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n    f();\n    const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map(d => d.query)).filter(d => d != null);\n    const flattenedActiveTimerNames = util.flatten(this.activeTimers.map(d => d.name)).filter(d => d != null);\n    this.activeTimers = oldActiveTimers;\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n    const res = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null\n    };\n    const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n    res['kernelMs'] = util.sum(kernelMs);\n    res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({\n      name: flattenedActiveTimerNames[i],\n      ms: d\n    })).map(d => `${d.name}: ${d.ms}`).join(', ');\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n  makeTensorInfo(shape, dtype, values) {\n    if (dtype === 'string' && values != null && values.length > 0 && util.isString(values[0])) {\n      values = values.map(d => util.encodeString(d));\n    }\n    const dataId = this.write(values, shape, dtype);\n    return {\n      dataId,\n      shape,\n      dtype\n    };\n  }\n  tensorToBinding(tensor) {\n    if (!tensor) {\n      return null;\n    }\n    const tensorData = this.tensorMap.get(tensor.dataId);\n    const resource = tensorData.resource;\n    if (resource instanceof GPUBuffer) {\n      return {\n        buffer: resource\n      };\n    }\n    if (resource instanceof GPUTexture) {\n      return resource.createView();\n    }\n    // GPUExternalTexture\n    return resource;\n  }\n  uploadToGPU(dataId) {\n    const tensorData = this.tensorMap.get(dataId);\n    // Already on the GPU.\n    if (tensorData.resource != null) {\n      return;\n    }\n    const size = webgpu_util.GPUBytesPerElement(tensorData.dtype) * util.sizeFromShape(tensorData.shape);\n    let buffer;\n    const usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST;\n    if (tensorData.values) {\n      buffer = this.bufferManager.acquireBuffer(size, usage, true);\n      if (buffer.mapState === 'unmapped') {\n        const stagingBuffer = this.bufferManager.acquireBuffer(size, GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC, true, false);\n        const arrayBuffer = stagingBuffer.getMappedRange();\n        if (tensorData.dtype === 'int32' || tensorData.dtype === 'bool') {\n          new Int32Array(arrayBuffer).set(tensorData.values);\n        } else {\n          new Float32Array(arrayBuffer).set(tensorData.values);\n        }\n        stagingBuffer.unmap();\n        this.ensureCommandEncoderReady();\n        this.endComputePassEncoder();\n        this.commandEncoder.copyBufferToBuffer(stagingBuffer, 0, buffer, 0, size);\n        this.stagingPendingDisposal.push(stagingBuffer);\n      } else {\n        const arrayBuffer = buffer.getMappedRange();\n        if (tensorData.dtype === 'int32' || tensorData.dtype === 'bool') {\n          new Int32Array(arrayBuffer).set(tensorData.values);\n        } else {\n          new Float32Array(arrayBuffer).set(tensorData.values);\n        }\n        buffer.unmap();\n      }\n      // Once uploaded, don't store the values on cpu.\n      tensorData.values = null;\n    } else {\n      buffer = this.bufferManager.acquireBuffer(size, usage);\n    }\n    tensorData.resource = buffer;\n  }\n  makeUniforms(programUniform) {\n    let currentOffset = 0;\n    let preLength = 0;\n    const offsets = [];\n    let maxAlignmentOfField = 1;\n    programUniform.forEach(d => {\n      if (d.data.length === 0) {\n        d.data = [1];\n      }\n      // https://www.w3.org/TR/WGSL/#alignof\n      let baseAlignment;\n      switch (d.data.length) {\n        case 1:\n          baseAlignment = 4;\n          break;\n        case 2:\n          baseAlignment = 8;\n          break;\n        case 3:\n          baseAlignment = 16;\n          break;\n        case 4:\n          baseAlignment = 16;\n          break;\n        case 5:\n          baseAlignment = 16;\n          break;\n        case 6:\n          baseAlignment = 16;\n          break;\n        default:\n          util.assert(false, () => `Unsupported ${d.data.length}D shape`);\n      }\n      if (preLength === 5 || preLength === 6) {\n        baseAlignment = 16;\n      }\n      if (baseAlignment > maxAlignmentOfField) {\n        maxAlignmentOfField = baseAlignment;\n      }\n      currentOffset = Math.ceil(currentOffset / baseAlignment) * baseAlignment;\n      preLength = d.data.length;\n      offsets.push(currentOffset);\n      currentOffset += d.data.length * 4;\n    });\n    currentOffset = Math.ceil(currentOffset / maxAlignmentOfField) * maxAlignmentOfField;\n    const arrayBuffer = new ArrayBuffer(currentOffset);\n    programUniform.forEach((d, i) => {\n      const offset = offsets[i];\n      if (d.type === 'int32') {\n        new Int32Array(arrayBuffer, offset, d.data.length).set(d.data);\n      } else if (d.type === 'uint32') {\n        new Uint32Array(arrayBuffer, offset, d.data.length).set(d.data);\n      } else {\n        new Float32Array(arrayBuffer, offset, d.data.length).set(d.data);\n      }\n    });\n    const uniformBuffer = this.bufferManager.acquireBuffer(currentOffset, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\n    this.queue.writeBuffer(uniformBuffer, 0, arrayBuffer, 0, currentOffset);\n    this.uniformPendingDisposal.push(uniformBuffer);\n    return {\n      offset: 0,\n      size: currentOffset,\n      buffer: uniformBuffer\n    };\n  }\n  runWebGPUProgram(program, inputs, outputDtype, programDefinedUniform, output) {\n    if (!output) {\n      output = this.makeTensorInfo(program.outputShape, outputDtype);\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      this.tensorMap.get(output.dataId).values = util.getTypedArrayFromDType(output.dtype, 0);\n      return output;\n    }\n    this.uploadToGPU(output.dataId);\n    program.dispatch = reshapeDispatch(this.device, program);\n    const inputsData = inputs.map((input, i) => {\n      if (input.dtype === 'complex64') {\n        throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` + `dtypes, please separate the program into real and imaginary ` + `parts.`);\n      }\n      this.uploadToGPU(input.dataId);\n      return {\n        // Returning dtype from tensorMap because it reflects dtype\n        // of underlying buffer, rather than abstract dtype.\n        dtype: this.tensorMap.get(input.dataId).dtype,\n        shape: input.shape,\n        name: program.variableNames[i]\n      };\n    });\n    program.shaderKey = webgpu_program.makeShaderKey(program, inputsData, output);\n    const parallelCompilation = env().getBool('WEBGPU_ENGINE_COMPILE_ONLY');\n    if (!(program.shaderKey in this.pipelineCache)) {\n      this.pipelineCache[program.shaderKey] = webgpu_program.compileProgram(this.device, program, inputsData, output, parallelCompilation);\n    }\n    program.pipeline = this.pipelineCache[program.shaderKey];\n    if (!parallelCompilation) {\n      this.recordAndSubmit(program, output, inputs, programDefinedUniform);\n    }\n    return output;\n  }\n  recordAndSubmit(program, output, inputs, programDefinedUniform) {\n    if (program.pipeline instanceof Promise) {\n      throw new Error('Please call checkCompileCompletionAsync to ensure parallel compilation is done!');\n    }\n    // There are six kinds of uniforms: NAN, INFINITY, shapes, shape strides,\n    // program size, program defined uniforms.\n    let programUniform = [];\n    let bufferShapes = [];\n    const uniformsType = 'int32';\n    if (program.pixelsOpType == null) {\n      programUniform.push({\n        type: 'float32',\n        data: [NaN]\n      }, {\n        type: 'float32',\n        data: [Infinity]\n      });\n      bufferShapes = inputs.concat(output).map(d => d.shape);\n      const uniformsType = 'int32';\n      bufferShapes.map(d => {\n        programUniform.push({\n          type: uniformsType,\n          data: d\n        });\n        const strides = util.computeStrides(d);\n        programUniform.push({\n          type: uniformsType,\n          data: strides\n        });\n      });\n    } else {\n      const strides = util.computeStrides(output.shape);\n      programUniform.push({\n        type: uniformsType,\n        data: strides\n      });\n    }\n    if (program.size) {\n      const size = util.sizeFromShape(program.outputShape);\n      programUniform.push({\n        type: uniformsType,\n        data: [program.outputComponent ? size / program.outputComponent : size]\n      });\n    }\n    if (programDefinedUniform) {\n      programUniform = [...programUniform, ...programDefinedUniform];\n    }\n    const bindings = [this.tensorToBinding(output), ...inputs.map(t => this.tensorToBinding(t)), this.makeUniforms(programUniform)];\n    inputs.forEach(input => {\n      this.commandQueueOwnedIds.add(input.dataId);\n    });\n    this.commandQueueOwnedIds.add(output.dataId);\n    const bindGroup = this.device.createBindGroup({\n      layout: program.pipeline.getBindGroupLayout(0),\n      entries: bindings.map((b, i) => ({\n        binding: i,\n        resource: b\n      }))\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    this.ensureCommandEncoderReady();\n    const computePassDescriptor = {};\n    if (shouldTimeProgram && this.supportTimestampQuery) {\n      this.endComputePassEncoder();\n      if (this.querySet == null) {\n        this.querySet = this.device.createQuerySet({\n          type: 'timestamp',\n          count: this.querySetCount\n        });\n      }\n      computePassDescriptor.timestampWrites = {\n        querySet: this.querySet,\n        beginningOfPassWriteIndex: 0,\n        endOfPassWriteIndex: 1\n      };\n      this.computePassEncoder = this.commandEncoder.beginComputePass(computePassDescriptor);\n    } else if (!this.computePassEncoder) {\n      this.computePassEncoder = this.commandEncoder.beginComputePass(computePassDescriptor);\n    }\n    this.computePassEncoder.setPipeline(program.pipeline);\n    this.computePassEncoder.setBindGroup(0, bindGroup);\n    this.computePassEncoder.dispatchWorkgroups(program.dispatch[0], program.dispatch[1], program.dispatch[2]);\n    this.dispatchCountInPass++;\n    if (shouldTimeProgram || env().get('WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE') <= this.dispatchCountInPass || program.pixelsOpType === webgpu_program.PixelsOpType.DRAW) {\n      this.endComputePassEncoder();\n      if (shouldTimeProgram) {\n        this.activeTimers.push({\n          name: program.constructor.name,\n          query: this.getQueryTime()\n        });\n      } else {\n        this.submitQueue();\n      }\n    }\n  }\n  async getQueryTime() {\n    if (!this.supportTimestampQuery) {\n      return 0;\n    }\n    if (this.queryResolveBuffer == null) {\n      this.queryResolveBuffer = this.bufferManager.acquireBuffer(this.querySetCount * 8, GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.QUERY_RESOLVE);\n    }\n    this.commandEncoder.resolveQuerySet(this.querySet, 0, this.querySetCount, this.queryResolveBuffer, 0);\n    const queryStagingBuffer = this.bufferManager.acquireBuffer(this.querySetCount * 8, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n    this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer, 0, queryStagingBuffer, 0, this.querySetCount * 8);\n    this.submitQueue();\n    await queryStagingBuffer.mapAsync(GPUMapMode.READ);\n    const arrayBuffer = new BigUint64Array(queryStagingBuffer.getMappedRange());\n    const time = Number(arrayBuffer[1] - arrayBuffer[0]) / 1000000;\n    queryStagingBuffer.unmap();\n    this.bufferManager.releaseBuffer(queryStagingBuffer);\n    return time;\n  }\n  shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n    return env().getBool('WEBGPU_CPU_FORWARD') && inputs.every(input => this.tensorMap.get(input.dataId).resource == null && util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n  numDataIds() {\n    return this.tensorMap.numDataIds() - this.tensorDataPendingDisposal.length;\n  }\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.querySet != null) {\n      this.querySet.destroy();\n    }\n    this.bufferManager.dispose();\n    this.textureManager.dispose();\n    this.disposed = true;\n  }\n}\nWebGPUBackend.nextDataId = 0;\nexport { WebGPUBackend };\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AdapterInfo {\n  constructor(adapterInfo) {\n    if (adapterInfo) {\n      this.vendor = adapterInfo.vendor;\n      this.architecture = adapterInfo.architecture;\n      this.intelGPUGeneration = this.getIntelGPUGeneration();\n    }\n  }\n  getIntelGPUGeneration() {\n    if (this.isIntel()) {\n      if (this.architecture.startsWith('gen')) {\n        return Number(this.architecture.match(/\\d+/));\n      } else if (this.architecture.startsWith('xe')) {\n        return 12;\n      }\n    }\n    return 0;\n  }\n  isIntel() {\n    return this.vendor === 'intel';\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class BufferManager {\n  constructor(device) {\n    this.device = device;\n    this.numUsedBuffers = 0;\n    this.numFreeBuffers = 0;\n    this.freeBuffers = new Map();\n    this.usedBuffers = new Map();\n    this.numBytesUsed = 0;\n    this.numBytesAllocated = 0;\n  }\n  acquireBuffer(size, usage, mappedAtCreation = false, reuse = true) {\n    let buffer;\n    const key = getBufferKey(size, usage);\n    if (reuse) {\n      if (!this.freeBuffers.has(key)) {\n        this.freeBuffers.set(key, []);\n      }\n      if (this.freeBuffers.get(key).length > 0) {\n        buffer = this.freeBuffers.get(key).pop();\n        this.numFreeBuffers--;\n      } else {\n        buffer = this.device.createBuffer({\n          size,\n          usage,\n          mappedAtCreation\n        });\n        this.numBytesAllocated += size;\n      }\n    } else {\n      buffer = this.device.createBuffer({\n        size,\n        usage,\n        mappedAtCreation\n      });\n      this.numBytesAllocated += size;\n    }\n    if (!this.usedBuffers.has(key)) {\n      this.usedBuffers.set(key, []);\n    }\n    this.usedBuffers.get(key).push(buffer);\n    this.numUsedBuffers++;\n    this.numBytesUsed += size;\n    return buffer;\n  }\n  releaseBuffer(buffer, reuse = true) {\n    if (this.freeBuffers.size === 0) {\n      return;\n    }\n    const size = buffer.size;\n    const usage = buffer.usage;\n    const key = getBufferKey(size, usage);\n    const bufferArray = this.usedBuffers.get(key);\n    const index = bufferArray.indexOf(buffer);\n    if (index < 0) {\n      throw new Error('Cannot find the buffer in buffer manager');\n    }\n    bufferArray[index] = bufferArray[bufferArray.length - 1];\n    bufferArray.pop();\n    this.numUsedBuffers--;\n    this.numBytesUsed -= size;\n    if (reuse) {\n      this.freeBuffers.get(key).push(buffer);\n      this.numFreeBuffers++;\n    } else {\n      buffer.destroy();\n      this.numBytesAllocated -= size;\n    }\n  }\n  getNumUsedBuffers() {\n    return this.numUsedBuffers;\n  }\n  getNumFreeBuffers() {\n    return this.numFreeBuffers;\n  }\n  dispose() {\n    this.freeBuffers.forEach((buffers, key) => {\n      buffers.forEach(buffer => {\n        buffer.destroy();\n      });\n    });\n    this.usedBuffers.forEach((buffers, key) => {\n      buffers.forEach(buffer => {\n        buffer.destroy();\n      });\n    });\n    this.freeBuffers = new Map();\n    this.usedBuffers = new Map();\n    this.numUsedBuffers = 0;\n    this.numFreeBuffers = 0;\n    this.numBytesUsed = 0;\n    this.numBytesAllocated = 0;\n  }\n}\nfunction getBufferKey(size, usage) {\n  return `${size}_${usage}`;\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class TextureManager {\n  constructor(device) {\n    this.device = device;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this.freeTextures = new Map();\n    this.usedTextures = new Map();\n    this.numBytesUsed = 0;\n    this.numBytesAllocated = 0;\n  }\n  acquireTexture(width, height, format, usage) {\n    const bytesPerElement = getBytesPerElement(format);\n    const byteSize = width * height * bytesPerElement;\n    const key = getTextureKey(width, height, format, usage);\n    if (!this.freeTextures.has(key)) {\n      this.freeTextures.set(key, []);\n    }\n    if (!this.usedTextures.has(key)) {\n      this.usedTextures.set(key, []);\n    }\n    this.numBytesUsed += byteSize;\n    this.numUsedTextures++;\n    if (this.freeTextures.get(key).length > 0) {\n      this.numFreeTextures--;\n      const newTexture = this.freeTextures.get(key).shift();\n      this.usedTextures.get(key).push(newTexture);\n      return newTexture;\n    }\n    this.numBytesAllocated += byteSize;\n    const newTexture = this.device.createTexture({\n      size: [width, height],\n      format,\n      usage\n    });\n    this.usedTextures.get(key).push(newTexture);\n    return newTexture;\n  }\n  releaseTexture(texture) {\n    if (this.freeTextures.size === 0) {\n      return;\n    }\n    const width = texture.width;\n    const height = texture.height;\n    const format = texture.format;\n    const usage = texture.usage;\n    const key = getTextureKey(width, height, format, usage);\n    if (!this.freeTextures.has(key)) {\n      this.freeTextures.set(key, []);\n    }\n    this.freeTextures.get(key).push(texture);\n    this.numFreeTextures++;\n    this.numUsedTextures--;\n    const textureList = this.usedTextures.get(key);\n    const textureIndex = textureList.indexOf(texture);\n    if (textureIndex < 0) {\n      throw new Error('Cannot release a texture that was never provided by this ' + 'texture manager');\n    }\n    textureList.splice(textureIndex, 1);\n    const bytesPerElement = getBytesPerElement(format);\n    const byteSize = width * height * bytesPerElement;\n    this.numBytesUsed -= byteSize;\n  }\n  getNumUsedTextures() {\n    return this.numUsedTextures;\n  }\n  getNumFreeTextures() {\n    return this.numFreeTextures;\n  }\n  dispose() {\n    this.freeTextures.forEach((textures, key) => {\n      textures.forEach(texture => {\n        texture.destroy();\n      });\n    });\n    this.usedTextures.forEach((textures, key) => {\n      textures.forEach(texture => {\n        texture.destroy();\n      });\n    });\n    this.freeTextures = new Map();\n    this.usedTextures = new Map();\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this.numBytesUsed = 0;\n    this.numBytesAllocated = 0;\n  }\n}\nfunction getTextureKey(width, height, format, usage) {\n  return `${width}_${height}_${format}_${usage}`;\n}\nfunction getBytesPerElement(format) {\n  if (format === 'rgba8unorm') {\n    return 16;\n  } else {\n    throw new Error(`${format} is not supported!`);\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { symbolicallyComputeStrides } from './shader_util';\nexport var PixelsOpType;\n(function (PixelsOpType) {\n  PixelsOpType[PixelsOpType[\"FROM_PIXELS\"] = 0] = \"FROM_PIXELS\";\n  PixelsOpType[PixelsOpType[\"DRAW\"] = 1] = \"DRAW\";\n})(PixelsOpType || (PixelsOpType = {}));\nexport const compileProgram = (device, program, inputsData, output, parallelCompilation) => {\n  const outputData = {\n    dtype: output.dtype,\n    shape: output.shape\n  };\n  const source = makeShader(inputsData, outputData, program);\n  const module = device.createShaderModule({\n    code: source,\n    label: program.constructor.name\n  });\n  let printShaderString = env().get('WEBGPU_PRINT_SHADER');\n  if (printShaderString !== '') {\n    printShaderString = printShaderString.toLowerCase();\n    const printShaderArray = printShaderString.split(',');\n    if (printShaderString === 'all' || printShaderArray.some(item => program.shaderKey.toLowerCase().includes(item))) {\n      console.group(program.shaderKey);\n      console.debug(source);\n      console.groupEnd();\n    }\n  }\n  if (parallelCompilation) {\n    return device.createComputePipelineAsync({\n      compute: {\n        module,\n        entryPoint: '_start'\n      },\n      label: program.constructor.name,\n      layout: 'auto'\n    });\n  } else {\n    return device.createComputePipeline({\n      compute: {\n        module,\n        entryPoint: '_start'\n      },\n      label: program.constructor.name,\n      layout: 'auto'\n    });\n  }\n};\nexport const typeSnippet = (component, type = 'f32') => {\n  switch (component) {\n    case 1:\n      return `${type}`;\n    case 2:\n      return `vec2<${type}>`;\n    case 3:\n      return `vec3<${type}>`;\n    case 4:\n      return `vec4<${type}>`;\n    default:\n      throw new Error(`${component}-component ${type} is not supported.`);\n  }\n};\nexport function getCoordsDataType(rank) {\n  if (rank <= 1) {\n    return 'i32';\n  } else if (rank === 2) {\n    return `vec2<i32>`;\n  } else if (rank === 3) {\n    return `vec3<i32>`;\n  } else if (rank === 4) {\n    return `vec4<i32>`;\n  } else if (rank === 5) {\n    return `vec5`;\n  } else if (rank === 6) {\n    return `vec6`;\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\nexport function getCoordsXYZ(index) {\n  if (index === 0) {\n    return 'x';\n  } else if (index === 1) {\n    return 'y';\n  } else if (index === 2) {\n    return 'z';\n  } else if (index === 3) {\n    return 'w';\n  } else if (index === 4) {\n    return 'u';\n  } else if (index === 5) {\n    return 'v';\n  } else {\n    throw Error(`Index ${index} is not yet supported`);\n  }\n}\nexport function getMainHeaderString(...params) {\n  let snippet;\n  switch (params.length) {\n    case 0:\n      snippet = `\n        fn main()\n      `;\n      break;\n    case 1:\n      snippet = `\n        fn main(${params[0]} : i32)\n      `;\n      break;\n    default:\n      throw Error('Unreachable');\n  }\n  return snippet;\n}\nexport function getStartHeaderString(useGlobalIndex, program) {\n  let snippet;\n  snippet = `\n     ${getWorkgroupSizeString(program)}\n      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,\n                @builtin(global_invocation_id) GlobalId : vec3<u32>,\n                @builtin(local_invocation_index) LocalIndex: u32,\n                @builtin(workgroup_id) WorkgroupId : vec3<u32>,\n                @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {\n        localId = LocalId;\n        localIndex = LocalIndex;\n        globalId = GlobalId;\n        numWorkgroups = NumWorkgroups;\n        workgroupId = WorkgroupId;\n        ${useGlobalIndex ? `main(getGlobalIndex());` : `main();`};\n      }\n    `;\n  return snippet;\n}\nexport function getWorkgroupSizeString(program) {\n  return `\n  @compute @workgroup_size(${program.workgroupSize[0]}, ${program.workgroupSize[1]}, ${program.workgroupSize[2]})\n`;\n}\nfunction makeShader(inputInfo, outputData, program) {\n  const prefixSnippets = [];\n  const flatWorkgroupSize = program.workgroupSize[0] * program.workgroupSize[1] * program.workgroupSize[2];\n  program.outputComponent = program.outputComponent ? program.outputComponent : 1;\n  prefixSnippets.push(`\n\n      var<private> localId: vec3<u32>;\n      var<private> localIndex: u32;\n      var<private> globalId: vec3<u32>;\n      var<private> numWorkgroups: vec3<u32>;\n      var<private> workgroupId: vec3<u32>;\n\n      // Only used when the y/z dimension of workgroup size is 1.\n      fn getGlobalIndex() -> i32 {\n        ${isFlatDispatch(program) ? `  return i32(globalId.x);` : `  return i32((workgroupId.z * numWorkgroups.x * numWorkgroups.y +\n                workgroupId.y * numWorkgroups.x + workgroupId.x) * ${flatWorkgroupSize}u +\n                localIndex);\n        `}\n      }\n    `);\n  if (program.pixelsOpType != null) {\n    const inoutSnippet = program.pixelsOpType === PixelsOpType.FROM_PIXELS ? `@group(0) @binding(0) var<storage, read_write> result: array<${dataTypeToGPUType(outputData.dtype, program.outputComponent)}>;` : `@group(0) @binding(1) var<storage, read> inBuf : array<${dataTypeToGPUType(inputInfo[0].dtype, program.outputComponent)}>;`;\n    const outShapeStridesType = outputData.shape.length === 3 ? 'vec2<i32>' : 'i32';\n    prefixSnippets.push(`\n        struct Uniform {\n          outShapeStrides : ${outShapeStridesType},\n          size            : i32,\n          numChannels     : i32,\n          alpha           : f32,\n        };\n\n        ${inoutSnippet}\n        @group(0) @binding(2) var<uniform> uniforms: Uniform;\n      `);\n    const useGlobalIndex = isFlatDispatchLayout(program);\n    return [commonSnippet, prefixSnippets.join('\\n'), getCoordsFromIndexSnippet(outputData.shape), program.getUserCode(), getStartHeaderString(useGlobalIndex, program)].join('\\n');\n  }\n  let stridesLength;\n  let stridesDataType;\n  let uniformDeclaration = 'struct Uniforms { NAN : f32, INFINITY : f32, ';\n  program.variableNames.forEach((x, i) => {\n    const perDataType = getCoordsDataType(inputInfo[i].shape.length);\n    uniformDeclaration += `${x.charAt(0).toLowerCase() + x.slice(1)}Shape : ${perDataType}, `;\n    stridesLength = inputInfo[i].shape.length - 1;\n    stridesDataType = getCoordsDataType(stridesLength);\n    uniformDeclaration += `${x.charAt(0).toLowerCase() + x.slice(1)}ShapeStrides: ${stridesDataType}, `;\n  });\n  const outputDataType = getCoordsDataType(outputData.shape.length);\n  uniformDeclaration += `outShape : ${outputDataType}, `;\n  stridesLength = outputData.shape.length - 1;\n  stridesDataType = getCoordsDataType(stridesLength);\n  uniformDeclaration += `\n         outShapeStrides: ${stridesDataType}, `;\n  if (program.size) {\n    uniformDeclaration += 'size : i32, ';\n  }\n  if (program.uniforms) {\n    uniformDeclaration += program.uniforms;\n  }\n  uniformDeclaration += '};';\n  uniformDeclaration = insertAlignment(uniformDeclaration);\n  prefixSnippets.push(uniformDeclaration);\n  // Output buffer.\n  if (program.atomic) {\n    prefixSnippets.push(`\n      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;\n    `);\n  } else {\n    prefixSnippets.push(`\n      @group(0) @binding(0) var<storage, read_write> result: array<${dataTypeToGPUType(outputData.dtype, program.outputComponent)}>;\n    `);\n  }\n  program.variableNames.forEach((x, i) => {\n    prefixSnippets.push(`\n      @group(0) @binding(${1 + i}) var<storage, read> ${x}: array<${program.variableComponents ? dataTypeToGPUType(inputInfo[i].dtype, program.variableComponents[i]) : dataTypeToGPUType(inputInfo[i].dtype, program.outputComponent)}>;\n        `);\n  });\n  if (uniformDeclaration !== '') {\n    prefixSnippets.push(`\n      @group(0) @binding(${1 + program.variableNames.length}) var<uniform> uniforms: Uniforms;\n      `);\n  }\n  const coordsSnippet = getOutputCoordsSnippet(outputData.shape, program.dispatchLayout);\n  const sources = [commonSnippet, prefixSnippets.join('\\n') + isInfSnippet, getCoordsFromIndexSnippet(outputData.shape), coordsSnippet, getOutputIndexFromCoordsSnippet(outputData.shape.length)];\n  if (!program.atomic) {\n    sources.push(setOutputSnippet(outputData.shape, outputData.dtype, program.outputComponent));\n  }\n  program.variableNames.forEach((x, i) => {\n    sources.push(`${getCoordsFromIndexSnippet(inputInfo[i].shape, x)}`);\n  });\n  const inputSnippet = inputInfo.map((x, i) => getInputSnippet(x, outputData.shape, program.variableComponents ? program.variableComponents[i] : program.outputComponent, program.dispatchLayout.x.length === outputData.shape.length)).join('\\n');\n  sources.push(inputSnippet);\n  sources.push(program.getUserCode());\n  const useGlobalIndex = isFlatDispatchLayout(program);\n  sources.push(getStartHeaderString(useGlobalIndex, program));\n  const source = sources.join('\\n');\n  return source;\n}\nexport function makeShaderKey(program, inputsData, output) {\n  let key = program.shaderKey;\n  if (program.pixelsOpType != null) {\n    return key;\n  }\n  const shapes = [];\n  const types = [];\n  inputsData.forEach(element => {\n    shapes.push(element.shape);\n    types.push(element.dtype);\n  });\n  shapes.push(output.shape);\n  types.push(output.dtype);\n  const broadcastDims = inputsData.map(d => backend_util.getBroadcastDims(d.shape, output.shape));\n  const inputShapesEqualsOutShape = inputsData.map(d => util.arraysEqual(d.shape, output.shape)).join('_');\n  const broadcastDimsKey = broadcastDims.map(d => d.join('_')).join(';');\n  const flatDispatchString = isFlatDispatch(program) ? 'flatDispatch' : '';\n  key += '_' + (program.workgroupSize ? program.workgroupSize.join(',') : '') + shapes.map(shape => shape.length).join(',') + types.join(',') + program.variableNames.join(',') + broadcastDimsKey + inputShapesEqualsOutShape + flatDispatchString;\n  return key;\n}\nconst commonSnippet = `\n  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};\n  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};\n\n  // Checks whether coordinates lie within the bounds of the shape.\n  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {\n    return all(coord >= vec2<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {\n    return all(coord >= vec3<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {\n    return all(coord >= vec4<i32>(0)) && all(coord < shape);\n  }\n\n  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {\n    return coord;\n  }\n  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {\n    return dot(coords, vec2<i32>(shape.y, 1));\n  }\n  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {\n    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));\n  }\n  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n    return dot(coords, vec4<i32>(\n        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n  }\n  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {\n    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;\n  }\n  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {\n    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;\n  }\n\n  // NaN defination in IEEE 754-1985 is :\n  //   - sign = either 0 or 1.\n  //   - biased exponent = all 1 bits.\n  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).\n  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n  fn isnan(val: f32) -> bool {\n    let floatToUint: u32 = bitcast<u32>(val);\n    return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n  }\n  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {\n    let floatToUint: vec4<u32> = bitcast<vec4<u32>>(val);\n    return (floatToUint & vec4<u32>(0x7fffffffu)) > vec4<u32>(0x7f800000u);\n  }\n`;\nconst isInfSnippet = `\n  fn isinf(val: f32) -> bool {\n    return abs(val) == uniforms.INFINITY;\n  }\n`;\n/**\n * Derives logical coordinates from a flat index. Performs integer division\n * with each stride and decrements the index until the index equals the final\n * dimension coordinate.\n */\nexport function getCoordsFromIndexSnippet(shape, name = '') {\n  const rank = shape.length;\n  const funcName = name !== '' ? `get${name.charAt(0).toUpperCase() + name.slice(1)}CoordsFromIndex` : 'getCoordsFromIndex';\n  const stridesName = name !== '' ? `${name.charAt(0).toLowerCase() + name.slice(1)}ShapeStrides` : `outShapeStrides`;\n  if (rank <= 1) {\n    return `fn ${funcName}(index : i32) -> i32 { return index; }`;\n  }\n  const strides = util.computeStrides(shape);\n  const dtype = getCoordsDataType(rank);\n  const coords = [];\n  for (let i = 0; i < rank; i++) {\n    coords.push(`d${i}`);\n  }\n  if (strides.length === 1) {\n    return `    fn ${funcName}(index : i32) -> vec2<i32> {\n      let d0 = index / uniforms.${stridesName}; let d1 = index - d0 * uniforms.${stridesName};\n      return vec2<i32>(d0, d1);\n    }`;\n  }\n  let snippet;\n  snippet = 'var index2 = index;' + strides.map((_, i) => {\n    const line1 = `let ${coords[i]} = index2 / uniforms.${stridesName}.${getCoordsXYZ(i)}`;\n    const line2 = i === strides.length - 1 ? `let ${coords[i + 1]} = index2 - ${coords[i]} * uniforms.${stridesName}.${getCoordsXYZ(i)}` : `index2 = index2 - ${coords[i]} * uniforms.${stridesName}.${getCoordsXYZ(i)}`;\n    return `${line1}; ${line2};`;\n  }).join('');\n  return `\n    fn ${funcName}(index : i32) -> ${dtype} {\n      ${snippet}\n      return ${dtype}(${coords.join(',')});\n    }\n  `;\n}\nfunction getInputAtCoordsSnippet(inputInfo, component) {\n  const texName = inputInfo.name;\n  const rank = inputInfo.shape.length;\n  const type = getCoordsDataType(rank);\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const dims = ['d0', 'd1', 'd2', 'd3', 'd4', 'd5'].slice(0, rank);\n  const inputs = dims.map(d => `${d} : i32`).join(', ');\n  if (rank < 1) {\n    return `\n      fn ${funcName}() -> ${typeSnippet(component)} {\n        return ${typeSnippet(component)}(${texName}[0]);\n      }\n    `;\n  }\n  const shapeStr = `uniforms.${texName.charAt(0).toLowerCase() + texName.slice(1)}Shape`;\n  let rankStr = `${rank}D`;\n  if (rank === 0) {\n    rankStr = '1D';\n  }\n  return `\n    fn ${funcName}(${inputs}) -> ${typeSnippet(component)} {\n      return ${typeSnippet(component)}(${texName}[getIndexFromCoords${rankStr}(${type}(${dims.join(',')}),\n        ${shapeStr})${component === 1 ? '' : ` / ${component}`}]);\n    }\n   `;\n}\nfunction getInputByOutputSnippet(inputInfo, outShape, component, isFlatDispatchLayout) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'ByOutput';\n  const inRank = inputInfo.shape.length;\n  const outRank = outShape.length;\n  const type = getCoordsDataType(outRank);\n  // If the inShape equals the outShape and the dispatch layout is flat, we can\n  // directly use |gl_GlobalInvocationID.x| as the index and don't need coords\n  // conversion between these two shapes.\n  if (util.arraysEqual(inputInfo.shape, outShape) && isFlatDispatchLayout) {\n    return `\n    fn ${funcName}Index(globalIndex : i32) -> ${typeSnippet(component)} {\n      return ${typeSnippet(component)}(${texName}[globalIndex]);\n    }\n\n    fn ${funcName}Coords(coords : ${type}) -> ${typeSnippet(component)} {\n      return ${typeSnippet(component)}(${texName}[${outRank > 1 ? 'getOutputIndexFromCoords(coords)' : 'coords'}${component === 1 ? '' : ` / ${component}`}]);\n    }\n    `;\n  }\n  const broadcastDims = backend_util.getBroadcastDims(inputInfo.shape, outShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet = '';\n  if (inRank === 0) {\n    return `\n    fn ${funcName}Index(globalIndex : i32) -> ${typeSnippet(component)}{\n      return get${texFuncSnippet}();\n    }\n\n    fn ${funcName}Coords(coords : ${type}) -> ${typeSnippet(component)}{\n      return get${texFuncSnippet}();\n    }\n  `;\n  } else {\n    if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${getCoordsXYZ(d + rankDiff)} = 0;`).join('\\n');\n    }\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    if (outRank > 1) {\n      const coordsType = getCoordsDataType(inRank);\n      const coordsValues = inputInfo.shape.map((s, i) => `coords.${getCoordsXYZ(i + rankDiff)}`).join(', ');\n      unpackedCoordsSnippet = `${coordsType}(${coordsValues})`;\n    } else {\n      unpackedCoordsSnippet = 'coords';\n    }\n  }\n  const shapeStr = `uniforms.${texName.charAt(0).toLowerCase() + texName.slice(1)}Shape`;\n  const rankStr = `${inRank}D`;\n  return `\n  fn ${funcName}Index(globalIndex : i32) -> ${typeSnippet(component)} {\n    var coords = getCoordsFromIndex(globalIndex);\n    ${coordsSnippet}\n    return ${typeSnippet(component)}(${texName}[getIndexFromCoords${rankStr}(${unpackedCoordsSnippet}, ${shapeStr})${component === 1 ? '' : ` / ${component}`}]);\n  }\n\n  fn ${funcName}Coords(coordsIn : ${type}) -> ${typeSnippet(component)} {\n    var coords = coordsIn;\n    ${coordsSnippet}\n    return ${typeSnippet(component)}(${texName}[getIndexFromCoords${rankStr}(${unpackedCoordsSnippet}, ${shapeStr})${component === 1 ? '' : ` / ${component}`}]);\n  }\n`;\n}\nfunction getInputSnippet(inputInfo, outShape, component, isFlatDispatchLayout) {\n  let res = getInputAtCoordsSnippet(inputInfo, component);\n  const inShape = inputInfo.shape;\n  if (inShape.length <= outShape.length) {\n    res += getInputByOutputSnippet(inputInfo, outShape, component, isFlatDispatchLayout);\n  }\n  return res;\n}\n/**\n * Generates getOutputCoords() function that computes output coordinates\n * from dispatch geometry to reduce arithmetic.\n */\nfunction getOutputCoordsSnippet(outShape, dispatchLayout) {\n  const {\n    x,\n    y = [],\n    z = []\n  } = dispatchLayout;\n  const outRank = outShape.length;\n  const rank = x.length + y.length + z.length;\n  // getOutputCoords is only meaningful when the output rank is same with\n  // dispatch layout rank.\n  if (rank !== outRank) {\n    return '';\n  }\n  if (x.length === outRank) {\n    const dtype = getCoordsDataType(outRank);\n    const snippet = `fn getOutputCoords() -> ${dtype}{\n    let globalIndex = getGlobalIndex();\n    return getCoordsFromIndex(globalIndex);\n  }\n  `;\n    return snippet;\n  }\n  let gatherDimensionsStr = '';\n  const dims = [x, y, z];\n  for (let i = 0; i < dims.length; i++) {\n    const arr = dims[i];\n    if (arr.length === 0) {\n      continue;\n    }\n    if (arr.length === 1) {\n      gatherDimensionsStr += `let d${arr[0]} = i32(globalId[${i}]);`;\n    } else {\n      const strides = symbolicallyComputeStrides(arr, 'uniforms.outShape');\n      gatherDimensionsStr += `var index${i} = i32(globalId[${i}]);`;\n      for (let j = 0; j < strides.length; j++) {\n        gatherDimensionsStr += `let d${arr[j]} = index${i} / ${strides[j]};`;\n        if (j === strides.length - 1) {\n          gatherDimensionsStr += `let d${arr[j + 1]} = ` + `index${i} - d${arr[j]} * ${strides[j]};`;\n        } else {\n          gatherDimensionsStr += `index${i} = index${i} - d${arr[j]} * ${strides[j]};`;\n        }\n      }\n    }\n  }\n  const dimensions = [];\n  for (let i = 0; i < rank; i++) {\n    dimensions.push(`d${i}`);\n  }\n  const dtype = getCoordsDataType(rank);\n  let snippet = `fn getOutputCoords() -> ${dtype} {\n  ${gatherDimensionsStr}\n`;\n  if (dimensions.length === 0) {\n    snippet += `return ${dtype}(0); }`;\n  } else {\n    snippet += `return ${dtype}(${dimensions.join(',')}); }`;\n  }\n  return snippet;\n}\nfunction getOutputIndexFromCoordsSnippet(outRank) {\n  let snippet = '';\n  switch (outRank) {\n    case 0:\n    case 1:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : i32) -> i32 {\n          return coords;\n        }\n        `;\n      break;\n    case 2:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {\n          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));\n        }\n        `;\n      break;\n    case 3:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {\n          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));\n        }\n        `;\n      break;\n    case 4:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n          return dot(coords, vec4<i32>(\n            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));\n        }\n        `;\n      break;\n    case 5:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec5) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u;\n        }\n        `;\n      break;\n    case 6:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec6) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u * uniforms.outShapeStrides.u +\n              coords.v;\n        }\n        `;\n      break;\n    default:\n      util.assert(false, () => `Unsupported ${outRank}D shape`);\n      break;\n  }\n  return snippet;\n}\nfunction isFlatDispatch(program) {\n  return program.dispatch[1] === 1 && program.dispatch[2] === 1;\n}\nexport function dataTypeToGPUType(type, component = 1) {\n  if (type === 'float32') {\n    return typeSnippet(component, 'f32');\n  } else if (type === 'int32' || type === 'bool') {\n    return typeSnippet(component, 'i32');\n  }\n  throw new Error(`type ${type} is not supported.`);\n}\nfunction setOutputSnippet(outShape, outBufferType, component) {\n  const outRank = outShape.length;\n  const gpuType = dataTypeToGPUType(outBufferType, component);\n  let snippet = `fn setOutputAtIndex(flatIndex : i32, value : ${typeSnippet(component)}) {\n      result[flatIndex] = ${gpuType}(value);\n    }\n\n    fn setOutputAtIndexI32(flatIndex : i32, value : ${typeSnippet(component, 'i32')}) {\n      result[flatIndex] = ${gpuType}(value);\n    }\n    `;\n  if (outRank >= 2) {\n    const dims = ['d0', 'd1', 'd2', 'd3', 'd4', 'd5'].slice(0, outRank);\n    const type = getCoordsDataType(outRank);\n    snippet += `\n      fn setOutputAtCoords(${dims.map(d => `${d} : i32`).join(', ')}, value : ${typeSnippet(component)}) {\n        let flatIndex = getOutputIndexFromCoords(${type}(${dims.join(', ')}));\n        setOutputAtIndex(flatIndex${component === 1 ? '' : ` / ${component}`}, value);\n      }\n      fn setOutputAtCoordsI32(${dims.map(d => `${d} : i32`).join(', ')}, value : ${typeSnippet(component, 'i32')}) {\n        let flatIndex = getOutputIndexFromCoords(${type}(${dims.join(', ')}));\n        setOutputAtIndexI32(flatIndex${component === 1 ? '' : ` / ${component}`}, value);\n      }\n    `;\n  }\n  return snippet;\n}\nfunction insertAlignment(uniformShader) {\n  // insert alignment when current pattern is vec5 or vec6\n  const curInsertRe = /(\\w+)\\s*:\\s*vec(5|6)/g;\n  uniformShader = uniformShader.replace(curInsertRe, match => {\n    return '@align(16) ' + match;\n  });\n  // insert alignment when previous pattern is vec5 or vec6\n  const preInsertRe = /vec(5|6)\\s*,\\s*(\\w+)/g;\n  uniformShader = uniformShader.replace(preInsertRe, (_, p1, p2) => {\n    return `vec${p1}, @align(16) ${p2}`;\n  });\n  return uniformShader;\n}\nfunction isFlatDispatchLayout(program) {\n  if (program.dispatchLayout.hasOwnProperty('y') && program.dispatchLayout.y.length !== 0) {\n    return false;\n  }\n  if (program.dispatchLayout.hasOwnProperty('z') && program.dispatchLayout.z.length !== 0) {\n    return false;\n  }\n  return true;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Generates WGSL that computes strides.\nexport function symbolicallyComputeStrides(indicesArr, variableName) {\n  if (Math.max(...indicesArr) > 5) {\n    throw new Error('Cannot symbolically compute strides for rank > 6 tensor.');\n  }\n  const numCoords = indicesArr.length;\n  const indicesStr = 'xyzwuv';\n  const shape = indicesArr.map(d => `${variableName}.${indicesStr[d]}`);\n  const strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n  for (let i = numCoords - 3; i >= 0; --i) {\n    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n  }\n  return strides;\n}\nexport const atomicAddSnippet = (ptr, v, type) => {\n  if (type === 'int32') {\n    return `atomicAdd(${ptr}, bitcast<i32>(${v}));`;\n  } else {\n    // atomicAdd only supports uint/int type. For float, we use\n    // atomicCompareExchangeWeak to simulate.\n    return `\n          {\n            var oldValue = 0;\n            loop {\n              let newValueF32 = bitcast<f32>(oldValue) + (${v});\n              let newValue = bitcast<i32>(newValueF32);\n              let res = atomicCompareExchangeWeak(${ptr}, oldValue, newValue);\n              if res.exchanged {\n                break;\n              }\n              oldValue = res.old_value;\n            }\n          }`;\n  }\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nconst arrayProduct = arr => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\nexport function tilesFitEvenlyIntoShape(tileSize, shape) {\n  if (tileSize.length !== shape.length) {\n    throw new Error(`Cannot compute whether rank ${tileSize.length}` + ` tiles fit evenly into rank ${shape.length} shape` + ` - ranks must match.`);\n  }\n  return shape.every((dim, dimIdx) => dim % tileSize[dimIdx] === 0);\n}\n// Computes dispatch geometry based on layout of output dimensions and\n// workgroupSize.\nexport function computeDispatch(layout, outputShape, workgroupSize = [1, 1, 1], elementsPerThread = [1, 1, 1]) {\n  const [dispatchX, dispatchY, dispatchZ] = [Math.ceil(arrayProduct(layout.x.map(d => outputShape[d])) / (workgroupSize[0] * elementsPerThread[0])), layout.y ? Math.ceil(arrayProduct(layout.y.map(d => outputShape[d])) / (workgroupSize[1] * elementsPerThread[1])) : 1, layout.z ? Math.ceil(arrayProduct(layout.z.map(d => outputShape[d])) / (workgroupSize[2] * elementsPerThread[2])) : 1];\n  return [dispatchX, dispatchY, dispatchZ];\n}\nexport function computeWorkgroupInfoForMatMul(dimAOuter, dimInner, dimBOuter, transposeA = false) {\n  // These are experimental values. Usually, we need to adjust the work group\n  // size based on the input shapes to improve the EU occupancy.\n  // TODO: WebGPU limits the maximum allowed shared memory size as 16K. To make\n  // sure it doesn't exceed this limitations. Temporarily reduce the work group\n  // size to [8, 8, 1] and the work per thread size is [4, 4, 1]. But we should\n  // revisit it and find the balance between work group size and work per thread\n  // size.\n  const workgroupSize = [8, 8, 1];\n  const elementsPerThread = [4, 4, 1];\n  if (!transposeA) {\n    if (dimAOuter <= 8) {\n      elementsPerThread[1] = 1;\n    }\n    if (dimInner <= 16 && dimBOuter <= 16) {\n      workgroupSize[0] = 4;\n    }\n  }\n  return {\n    workgroupSize,\n    elementsPerThread\n  };\n}\nexport function computeWorkgroupSizeForConv2d(layout, outputShape, isVec4 = false) {\n  if (isVec4) {\n    return [8, 8, 1];\n  }\n  const dim0 = arrayProduct(layout.x.map(d => outputShape[d]));\n  const dim1 = arrayProduct(layout.y.map(d => outputShape[d]));\n  // TODO(jiajia.qin@intel.com): More fine tune based on outputShape.\n  // These are experimental values. Usually, we need to adjust the work group\n  // size based on the output shape. For example, when one dimension is smaller\n  // than 4, it will be wasteful if we assign a larger size for this dimension,\n  // which results lots of threads doing useless work and reduces parallelism\n  // of hardware threads. But it is always a balance between work group size\n  // and shared memory. If one dimension is too small, such as 1, shared memory\n  // will won't be fully utilized.\n  if (dim0 <= 4) {\n    return [4, 16, 1];\n  }\n  if (dim1 <= 4) {\n    return [16, 4, 1];\n  }\n  return [16, 16, 1];\n}\nexport function computeWorkPerThreadForConv2d(layout, outputShape, isVec4 = false) {\n  if (isVec4) {\n    return [4, 4, 1];\n  }\n  const dim0 = arrayProduct(layout.x.map(d => outputShape[d]));\n  const dim1 = arrayProduct(layout.y.map(d => outputShape[d]));\n  // TODO(jiajia.qin@intel.com): More fine tune based on outputShape.\n  // The following conditions correspond to the values set in\n  // computeWorkgroupSizeForConv2d.\n  if (dim0 <= 4) {\n    return [1, 2, 1];\n  }\n  if (dim1 <= 4) {\n    return [2, 1, 1];\n  }\n  return [2, 2, 1];\n}\nexport function flatDispatchLayout(shape) {\n  return {\n    x: shape.map((d, i) => i)\n  };\n}\nexport function GPUBytesPerElement(dtype) {\n  if (dtype === 'float32' || dtype === 'int32' || dtype === 'bool' || dtype === 'string') {\n    return 4;\n  } else if (dtype === 'complex64') {\n    return 8;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\nexport function isWebGPUSupported() {\n  return !!(typeof globalThis !== 'undefined' && globalThis.navigator && globalThis.navigator.gpu);\n}\nexport function assertNotComplex(tensor, opName) {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(t.dtype !== 'complex64', () => `${opName} does not support complex64 tensors ` + 'in the WebGPU backend.');\n    }\n  });\n}\nexport var MatMulProgramType;\n(function (MatMulProgramType) {\n  MatMulProgramType[MatMulProgramType[\"MatMulReduceProgram\"] = 0] = \"MatMulReduceProgram\";\n  MatMulProgramType[MatMulProgramType[\"MatMulSplitKProgram\"] = 1] = \"MatMulSplitKProgram\";\n  MatMulProgramType[MatMulProgramType[\"MatMulSmallOutputSizeProgram\"] = 2] = \"MatMulSmallOutputSizeProgram\";\n  MatMulProgramType[MatMulProgramType[\"MatMulPackedProgram\"] = 3] = \"MatMulPackedProgram\";\n  MatMulProgramType[MatMulProgramType[\"MatMulMax\"] = 4] = \"MatMulMax\";\n})(MatMulProgramType || (MatMulProgramType = {}));\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { registerKernel } from '@tensorflow/tfjs-core';\nimport { _fusedMatMulConfig } from './kernels/_FusedMatMul';\nimport { absConfig } from './kernels/Abs';\nimport { acosConfig } from './kernels/Acos';\nimport { acoshConfig } from './kernels/Acosh';\nimport { addConfig } from './kernels/Add';\nimport { addNConfig } from './kernels/AddN';\nimport { allConfig } from './kernels/All';\nimport { anyConfig } from './kernels/Any';\nimport { argMaxConfig } from './kernels/ArgMax';\nimport { argMinConfig } from './kernels/ArgMin';\nimport { asinConfig } from './kernels/Asin';\nimport { asinhConfig } from './kernels/Asinh';\nimport { atanConfig } from './kernels/Atan';\nimport { atan2Config } from './kernels/Atan2';\nimport { atanhConfig } from './kernels/Atanh';\nimport { avgPoolConfig } from './kernels/AvgPool';\nimport { avgPool3DConfig } from './kernels/AvgPool3D';\nimport { avgPool3DGradConfig } from './kernels/AvgPool3DGrad';\nimport { avgPoolGradConfig } from './kernels/AvgPoolGrad';\nimport { batchMatMulConfig } from './kernels/BatchMatMul';\nimport { batchToSpaceNDConfig } from './kernels/BatchToSpaceND';\nimport { bincountConfig } from './kernels/Bincount';\nimport { broadcastArgsConfig } from './kernels/BroadcastArgs';\nimport { castConfig } from './kernels/Cast';\nimport { ceilConfig } from './kernels/Ceil';\nimport { clipByValueConfig } from './kernels/ClipByValue';\nimport { complexConfig } from './kernels/Complex';\nimport { complexAbsConfig } from './kernels/ComplexAbs';\nimport { concatConfig } from './kernels/Concat';\nimport { conv2DConfig } from './kernels/Conv2D';\nimport { conv2DBackpropFilterConfig } from './kernels/Conv2DBackpropFilter';\nimport { conv2DBackpropInputConfig } from './kernels/Conv2DBackpropInput';\nimport { conv3DConfig } from './kernels/Conv3D';\nimport { conv3DBackpropFilterV2Config } from './kernels/Conv3DBackpropFilterV2';\nimport { conv3DBackpropInputV2Config } from './kernels/Conv3DBackpropInputV2';\nimport { cosConfig } from './kernels/Cos';\nimport { coshConfig } from './kernels/Cosh';\nimport { cropAndResizeConfig } from './kernels/CropAndResize';\nimport { cumprodConfig } from './kernels/Cumprod';\nimport { cumsumConfig } from './kernels/Cumsum';\nimport { denseBincountConfig } from './kernels/DenseBincount';\nimport { depthToSpaceConfig } from './kernels/DepthToSpace';\nimport { depthwiseConv2dNativeConfig } from './kernels/DepthwiseConv2dNative';\nimport { depthwiseConv2dNativeBackpropFilterConfig } from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport { depthwiseConv2dNativeBackpropInputConfig } from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport { diagConfig } from './kernels/Diag';\nimport { dilation2DConfig } from './kernels/Dilation2D';\nimport { dilation2DBackpropFilterConfig } from './kernels/Dilation2DBackpropFilter';\nimport { dilation2DBackpropInputConfig } from './kernels/Dilation2DBackpropInput';\nimport { drawConfig } from './kernels/Draw';\nimport { einsumConfig } from './kernels/Einsum';\nimport { eluConfig } from './kernels/Elu';\nimport { eluGradConfig } from './kernels/EluGrad';\nimport { equalConfig } from './kernels/Equal';\nimport { erfConfig } from './kernels/Erf';\nimport { expConfig } from './kernels/Exp';\nimport { expandDimsConfig } from './kernels/ExpandDims';\nimport { expm1Config } from './kernels/Expm1';\nimport { fftConfig } from './kernels/FFT';\nimport { fillConfig } from './kernels/Fill';\nimport { flipLeftRightConfig } from './kernels/FlipLeftRight';\nimport { floorConfig } from './kernels/Floor';\nimport { floorDivConfig } from './kernels/FloorDiv';\nimport { fromPixelsConfig } from './kernels/FromPixels';\nimport { fusedBatchNormConfig } from './kernels/FusedBatchNorm';\nimport { fusedConv2DConfig } from './kernels/FusedConv2D';\nimport { fusedDepthwiseConv2DConfig } from './kernels/FusedDepthwiseConv2D';\nimport { gatherNdConfig } from './kernels/GatherNd';\nimport { gatherV2Config } from './kernels/GatherV2';\nimport { greaterConfig } from './kernels/Greater';\nimport { greaterEqualConfig } from './kernels/GreaterEqual';\nimport { identityConfig } from './kernels/Identity';\nimport { ifftConfig } from './kernels/IFFT';\nimport { imagConfig } from './kernels/Imag';\nimport { isFiniteConfig } from './kernels/IsFinite';\nimport { isInfConfig } from './kernels/IsInf';\nimport { isNaNConfig } from './kernels/IsNaN';\nimport { leakyReluConfig } from './kernels/LeakyRelu';\nimport { lessConfig } from './kernels/Less';\nimport { lessEqualConfig } from './kernels/LessEqual';\nimport { linSpaceConfig } from './kernels/LinSpace';\nimport { logConfig } from './kernels/Log';\nimport { log1pConfig } from './kernels/Log1p';\nimport { logicalAndConfig } from './kernels/LogicalAnd';\nimport { logicalNotConfig } from './kernels/LogicalNot';\nimport { logicalOrConfig } from './kernels/LogicalOr';\nimport { lrnConfig } from './kernels/LRN';\nimport { lrnGradConfig } from './kernels/LRNGrad';\nimport { maxConfig } from './kernels/Max';\nimport { maximumConfig } from './kernels/Maximum';\nimport { maxPoolConfig } from './kernels/MaxPool';\nimport { maxPool3DConfig } from './kernels/MaxPool3D';\nimport { maxPool3DGradConfig } from './kernels/MaxPool3DGrad';\nimport { maxPoolGradConfig } from './kernels/MaxPoolGrad';\nimport { maxPoolWithArgmaxConfig } from './kernels/MaxPoolWithArgmax';\nimport { meanConfig } from './kernels/Mean';\nimport { minConfig } from './kernels/Min';\nimport { minimumConfig } from './kernels/Minimum';\nimport { mirrorPadConfig } from './kernels/MirrorPad';\nimport { modConfig } from './kernels/Mod';\nimport { multinomialConfig } from './kernels/Multinomial';\nimport { multiplyConfig } from './kernels/Multiply';\nimport { negConfig } from './kernels/Neg';\nimport { nonMaxSuppressionV3Config } from './kernels/NonMaxSuppressionV3';\nimport { nonMaxSuppressionV5Config } from './kernels/NonMaxSuppressionV5';\nimport { notEqualConfig } from './kernels/NotEqual';\nimport { oneHotConfig } from './kernels/OneHot';\nimport { onesLikeConfig } from './kernels/OnesLike';\nimport { packConfig } from './kernels/Pack';\nimport { padV2Config } from './kernels/PadV2';\nimport { powConfig } from './kernels/Pow';\nimport { preluConfig } from './kernels/Prelu';\nimport { prodConfig } from './kernels/Prod';\nimport { rangeConfig } from './kernels/Range';\nimport { realConfig } from './kernels/Real';\nimport { realDivConfig } from './kernels/RealDiv';\nimport { reciprocalConfig } from './kernels/Reciprocal';\nimport { reluConfig } from './kernels/Relu';\nimport { relu6Config } from './kernels/Relu6';\nimport { reshapeConfig } from './kernels/Reshape';\nimport { resizeBilinearConfig } from './kernels/ResizeBilinear';\nimport { resizeBilinearGradConfig } from './kernels/ResizeBilinearGrad';\nimport { resizeNearestNeighborConfig } from './kernels/ResizeNearestNeighbor';\nimport { resizeNearestNeighborGradConfig } from './kernels/ResizeNearestNeighborGrad';\nimport { reverseConfig } from './kernels/Reverse';\nimport { rotateWithOffsetConfig } from './kernels/RotateWithOffset';\nimport { roundConfig } from './kernels/Round';\nimport { rsqrtConfig } from './kernels/Rsqrt';\nimport { scatterNdConfig } from './kernels/ScatterNd';\nimport { searchSortedConfig } from './kernels/SearchSorted';\nimport { selectConfig } from './kernels/Select';\nimport { seluConfig } from './kernels/Selu';\nimport { sigmoidConfig } from './kernels/Sigmoid';\nimport { signConfig } from './kernels/Sign';\nimport { sinConfig } from './kernels/Sin';\nimport { sinhConfig } from './kernels/Sinh';\nimport { sliceConfig } from './kernels/Slice';\nimport { softmaxConfig } from './kernels/Softmax';\nimport { softplusConfig } from './kernels/Softplus';\nimport { spaceToBatchNDConfig } from './kernels/SpaceToBatchND';\nimport { sparseSegmentMeanConfig } from './kernels/SparseSegmentMean';\nimport { sparseSegmentSumConfig } from './kernels/SparseSegmentSum';\nimport { sparseToDenseConfig } from './kernels/SparseToDense';\nimport { splitVConfig } from './kernels/SplitV';\nimport { sqrtConfig } from './kernels/Sqrt';\nimport { squareConfig } from './kernels/Square';\nimport { squaredDifferenceConfig } from './kernels/SquaredDifference';\nimport { stepConfig } from './kernels/Step';\nimport { stridedSliceConfig } from './kernels/StridedSlice';\nimport { stringNGramsConfig } from './kernels/StringNGrams';\nimport { subConfig } from './kernels/Sub';\nimport { sumConfig } from './kernels/Sum';\nimport { tanConfig } from './kernels/Tan';\nimport { tanhConfig } from './kernels/Tanh';\nimport { tensorScatterUpdateConfig } from './kernels/TensorScatterUpdate';\nimport { tileConfig } from './kernels/Tile';\nimport { topKConfig } from './kernels/TopK';\nimport { transformConfig } from './kernels/Transform';\nimport { transposeConfig } from './kernels/Transpose';\nimport { unpackConfig } from './kernels/Unpack';\nimport { unsortedSegmentSumConfig } from './kernels/UnsortedSegmentSum';\nimport { zerosLikeConfig } from './kernels/ZerosLike';\n// List all kernel configs here\nconst kernelConfigs = [_fusedMatMulConfig, absConfig, acosConfig, acoshConfig, addConfig, addNConfig, allConfig, anyConfig, argMaxConfig, argMinConfig, asinConfig, asinhConfig, atanConfig, atan2Config, atanhConfig, avgPoolConfig, avgPool3DConfig, avgPool3DGradConfig, avgPoolGradConfig, batchMatMulConfig, batchToSpaceNDConfig, bincountConfig, broadcastArgsConfig, castConfig, ceilConfig, clipByValueConfig, complexConfig, complexAbsConfig, concatConfig, conv2DConfig, conv2DBackpropFilterConfig, conv2DBackpropInputConfig, conv3DConfig, conv3DBackpropFilterV2Config, conv3DBackpropInputV2Config, cosConfig, coshConfig, cropAndResizeConfig, cumprodConfig, cumsumConfig, denseBincountConfig, depthToSpaceConfig, depthwiseConv2dNativeBackpropFilterConfig, depthwiseConv2dNativeBackpropInputConfig, depthwiseConv2dNativeConfig, diagConfig, dilation2DConfig, dilation2DBackpropFilterConfig, dilation2DBackpropInputConfig, drawConfig, einsumConfig, eluConfig, eluGradConfig, equalConfig, erfConfig, expConfig, expandDimsConfig, expm1Config, fftConfig, fillConfig, flipLeftRightConfig, fromPixelsConfig, floorConfig, floorDivConfig, fusedBatchNormConfig, fusedConv2DConfig, fusedDepthwiseConv2DConfig, gatherNdConfig, gatherV2Config, greaterConfig, greaterEqualConfig, identityConfig, ifftConfig, imagConfig, isFiniteConfig, isInfConfig, isNaNConfig, leakyReluConfig, lessConfig, lessEqualConfig, linSpaceConfig, log1pConfig, logConfig, logicalAndConfig, logicalNotConfig, logicalOrConfig, lrnConfig, lrnGradConfig, maxConfig, maximumConfig, maxPoolConfig, maxPoolGradConfig, maxPool3DConfig, maxPool3DGradConfig, maxPoolWithArgmaxConfig, meanConfig, minConfig, minimumConfig, mirrorPadConfig, modConfig, multinomialConfig, multiplyConfig, negConfig, nonMaxSuppressionV3Config, nonMaxSuppressionV5Config, notEqualConfig, oneHotConfig, onesLikeConfig, packConfig, padV2Config, powConfig, preluConfig, prodConfig, rangeConfig, realConfig, realDivConfig, reciprocalConfig, reluConfig, relu6Config, reshapeConfig, resizeBilinearConfig, resizeBilinearGradConfig, resizeNearestNeighborConfig, resizeNearestNeighborGradConfig, reverseConfig, rotateWithOffsetConfig, roundConfig, rsqrtConfig, scatterNdConfig, searchSortedConfig, selectConfig, seluConfig, sigmoidConfig, signConfig, sinConfig, sinhConfig, sliceConfig, stepConfig, stridedSliceConfig, stringNGramsConfig, softmaxConfig, softplusConfig, spaceToBatchNDConfig, sparseSegmentMeanConfig, sparseSegmentSumConfig, sparseToDenseConfig, splitVConfig, sqrtConfig, squareConfig, squaredDifferenceConfig, subConfig, sumConfig, tanConfig, tanhConfig, tensorScatterUpdateConfig, tileConfig, topKConfig, transformConfig, transposeConfig, unpackConfig, unsortedSegmentSumConfig, zerosLikeConfig];\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { _FusedMatMul } from '@tensorflow/tfjs-core';\nimport { batchMatMulImpl } from './BatchMatMul_impl';\nexport function _fusedMatMul(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    a,\n    b,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    transposeA,\n    transposeB,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\nexport const _fusedMatMulConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'webgpu',\n  kernelFunc: _fusedMatMul\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { broadcast_util, env, util } from '@tensorflow/tfjs-core';\nimport { MatMulPackedProgram } from '../matmul_packed_webgpu';\nimport { MatMulReduceProgram } from '../matmul_reduce_webgpu';\nimport { MatMulSmallOutputSizeProgram } from '../matmul_small_output_size_webgpu';\nimport { BiasActivationProgram, MatMulSplitKProgram } from '../matmul_splitK_webgpu';\nimport { MatMulProgramType } from '../webgpu_util';\nimport { fill } from './Fill';\nimport { reshape } from './Reshape';\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}) {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n  util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` + `${innerShapeB}) of Tensors with shapes ${a.shape} and ` + `${b.shape} and transposeA=${transposeA}` + ` and transposeB=${transposeB} must match.`);\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] : [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] : [batchDimB, innerShapeB, outerShapeB];\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({\n    inputs: {\n      x: a\n    },\n    backend,\n    attrs: {\n      shape: a3dShape\n    }\n  });\n  const b3d = reshape({\n    inputs: {\n      x: b\n    },\n    backend,\n    attrs: {\n      shape: b3dShape\n    }\n  });\n  const intermediates = [a3d, b3d];\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const inputs = [a3d, b3d];\n  const dimensions = [{\n    type: 'int32',\n    data: [outerShapeA]\n  }, {\n    type: 'int32',\n    data: [outerShapeB]\n  }, {\n    type: 'int32',\n    data: [innerShapeA]\n  }];\n  let program;\n  let out;\n  const outputShape = [batchDim, outerShapeA, outerShapeB];\n  let matmulProgramType = env().get('WEBGPU_MATMUL_PROGRAM_TYPE');\n  if (matmulProgramType < 0) {\n    // Usually increasing workgroups is a good way to gain more performance for\n    // few workgroups by tiling 32x32 (default matmul algorithm). Currently,\n    // there are three ways to increase workgroups. 1) MatMulReduceProgram,\n    // which is used only when the output size is very small (128 for now). 2)\n    // MatMulSplitKProgram, increasing workgroups by spliting K. 3)\n    // MatMulSmallOutputSizeProgram, increasing workgroups by small tile size.\n    // For different devices, the minimum optimal workgroups may be different.\n    // So here we set a |thresholdToIncreaseWorkgroups| to indicate whether we\n    // need to increase workgroups. And the literal number is an empirical\n    // value.\n    const thresholdFlagValue = env().getNumber('WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL');\n    const thresholdToIncreaseWorkgroups = thresholdFlagValue > 0 ? thresholdFlagValue : backend.thresholdToIncreaseWorkgroups;\n    const workgroupsBy32x32 = batchDim * Math.ceil(outerShapeA / 32) * Math.ceil(outerShapeB / 32);\n    const hasFewWorkgroups = workgroupsBy32x32 <= thresholdToIncreaseWorkgroups || outerShapeA <= 8 && workgroupsBy32x32 <= thresholdToIncreaseWorkgroups * 2;\n    if (hasFewWorkgroups) {\n      if (batchDim * outerShapeA * outerShapeB <= 128) {\n        matmulProgramType = MatMulProgramType.MatMulReduceProgram;\n      } else if (batchDim === 1 && innerShapeB >= 2000) {\n        matmulProgramType = MatMulProgramType.MatMulSplitKProgram;\n      } else {\n        matmulProgramType = MatMulProgramType.MatMulSmallOutputSizeProgram;\n      }\n    } else {\n      matmulProgramType = MatMulProgramType.MatMulPackedProgram;\n    }\n  }\n  switch (matmulProgramType) {\n    case MatMulProgramType.MatMulReduceProgram:\n      program = new MatMulReduceProgram(outputShape, transposeA, transposeB, bias, activation, preluActivationWeights);\n      break;\n    case MatMulProgramType.MatMulSplitKProgram:\n      {\n        // The output buffer must be initailzed to zero before using since we\n        // use atomicAdd in MatMulSplitKProgram.\n        out = fill({\n          backend,\n          attrs: {\n            shape: outputShape,\n            value: 0,\n            dtype: a.dtype\n          }\n        });\n        program = new MatMulSplitKProgram(outputShape, innerShapeB, transposeA, transposeB);\n        if (bias || activation) {\n          out = backend.runWebGPUProgram(program, inputs, a.dtype, dimensions, out);\n          const biasActivationProgram = new BiasActivationProgram(out.shape, bias, activation, preluActivationWeights);\n          let uniformData = null;\n          const activationInputs = [out];\n          if (bias) {\n            activationInputs.push(bias);\n          }\n          if (preluActivationWeights) {\n            activationInputs.push(preluActivationWeights);\n          }\n          if (activation === 'leakyrelu') {\n            uniformData = [{\n              type: 'float32',\n              data: [leakyreluAlpha]\n            }];\n            biasActivationProgram.uniforms += ' alpha : f32,';\n          }\n          const outActivated = backend.runWebGPUProgram(biasActivationProgram, activationInputs, out.dtype, uniformData);\n          intermediates.push(out);\n          const outReshaped = reshape({\n            inputs: {\n              x: outActivated\n            },\n            backend,\n            attrs: {\n              shape: outShape\n            }\n          });\n          intermediates.push(outActivated);\n          for (const i of intermediates) {\n            backend.disposeData(i.dataId);\n          }\n          return outReshaped;\n        }\n        break;\n      }\n    case MatMulProgramType.MatMulSmallOutputSizeProgram:\n      program = new MatMulSmallOutputSizeProgram(a3dShape, b3dShape, outputShape, transposeA, transposeB, bias, activation, preluActivationWeights);\n      break;\n    case MatMulProgramType.MatMulPackedProgram:\n      // Experiments show that sequential access is more friendly for Intel\n      // GPUs.\n      const sequentialAccessByThreads = backend.adapterInfo.isIntel();\n      program = new MatMulPackedProgram(a3dShape, outputShape, transposeA, transposeB, bias, activation, preluActivationWeights, sequentialAccessByThreads);\n      break;\n    default:\n      throw new Error(`Unsupported MatMulProgramType ${matmulProgramType}.`);\n  }\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (preluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (activation === 'leakyrelu') {\n    dimensions.push({\n      type: 'float32',\n      data: [leakyreluAlpha]\n    });\n    program.uniforms += ' alpha : f32,';\n  }\n  out = backend.runWebGPUProgram(program, inputs, a.dtype, dimensions, out);\n  const outReshaped = reshape({\n    inputs: {\n      x: out\n    },\n    backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeData(i.dataId);\n  }\n  return outReshaped;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { activationFnSnippet, biasActivationSnippet } from './activation_util';\nimport { getMainHeaderString as main, typeSnippet } from './webgpu_program';\nimport { computeDispatch, computeWorkgroupInfoForMatMul } from './webgpu_util';\nexport function matMulReadFnSource(transposeA, transposeB, fitAOuter = false, fitBOuter = false, fitInner = false, component = 1) {\n  util.assert(transposeA && component === 1 || !transposeA, () => `transposeA ${transposeA} is not compatible with component size ${component}`);\n  const sampleA = `\n      ${transposeA ? `value = getA(batch, col, row);` : `value = getA(batch, row, col);`}\n\n    `;\n  const sampleB = transposeB ? `value = getB(batch, col, row);` : `value = getB(batch, row, col);`;\n  return `\n  fn mm_readA(batch: i32, row: i32, col: i32) -> ${typeSnippet(component)} {\n    var value = ${typeSnippet(component)}(0.0);\n    ${fitAOuter && fitInner ? sampleA : `\n    ${transposeA ? `if(row < uniforms.dimAOuter && col < uniforms.dimInner)` : `if(row < uniforms.aShape[1] && col < uniforms.aShape[2])`}\n    {\n      ${sampleA}\n    }\n    `}\n    return value;\n  }\n\n  fn mm_readB(batch: i32, row: i32, col: i32) -> ${typeSnippet(component)} {\n    var value = ${typeSnippet(component)}(0.0);\n    ${sampleB}\n    return value;\n  }\n  `;\n}\nexport function matMulReadWriteFnSource(hasBias, activation, transposeA, transposeB, fitAOuter = false, fitBOuter = false, fitInner = false, component = 1) {\n  return `\n  ${matMulReadFnSource(transposeA, transposeB, fitAOuter, fitBOuter, fitInner, component)}\n  fn mm_write(batch: i32, row: i32, col: i32, valueIn: ${typeSnippet(component)}) {\n    ${fitAOuter && fitBOuter ? '' : 'if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)'}\n    {\n      var value = valueIn;\n      let coords = vec3<i32>(batch, row, col);\n      ${biasActivationSnippet(hasBias, activation)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], value);\n    }\n  }\n  `;\n}\nconst writeDataToSubAVec4Snippet = (transpose, innerElementSize) => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart + inputCol * ${innerElementSize});\n        `;\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRow + innerRow,\n          kStart + inputCol * ${innerElementSize});\n        `;\n  }\n};\nconst calculateResultSnippet = (transposeA, innerElementSize, rowPerThread, tileInner) => {\n  if (transposeA) {\n    return `\n      for (var k = 0; k < ${tileInner}; k++) {\n        let BCached0 = mm_Bsub[k][tileCol];\n        let ACached0 = mm_Asub[k][localRow];\n        for (var i = 0; i < ${rowPerThread}; i++) {\n          acc[i] = fma(BCached0, vec4<f32>(ACached0[i]), acc[i]);\n        }\n      }`;\n  } else {\n    let bCachedStr = '';\n    let accStr = '';\n    for (let i = 0; i < innerElementSize; i++) {\n      bCachedStr += `let BCached${i} = mm_Bsub[k * ${innerElementSize} + ${i}][tileCol];`;\n      accStr += `acc[i] = fma(BCached${i}, vec4<f32>(ACached[${i}]), acc[i]);`;\n    }\n    return `\n      for (var k = 0; k < ${tileInner / innerElementSize}; k++) {\n        ${bCachedStr}\n        for (var i = 0; i < ${rowPerThread}; i++) {\n          let ACached = mm_Asub[tileRow + i][k];\n          ${accStr}\n        }\n      }`;\n  }\n};\nexport function makeMatMulPackedVec4Source(workPerThread, workgroupSize, transposeA = false, tileInner = 32, splitK = false, splitedDimInner = 32, broadcastBatch = false) {\n  const tileAOuter = workgroupSize[1] * workPerThread[1];\n  const tileBOuter = workgroupSize[0] * workPerThread[0];\n  const tileAWidth = transposeA ? tileAOuter : tileInner;\n  const tileAHight = transposeA ? tileInner : tileAOuter;\n  const innerElementSize = tileAWidth / workgroupSize[0];\n  const rowPerThreadB = tileInner / workgroupSize[1];\n  const rowPerThread = workPerThread[1];\n  const colPerThread = workPerThread[0];\n  util.assert((transposeA && innerElementSize === 4 && workPerThread[1] === 4 || !transposeA && (innerElementSize === 3 || innerElementSize === 4)) && tileAWidth % workgroupSize[0] === 0 && tileInner % workgroupSize[1] === 0 && workPerThread[0] === 4, () => `If transposeA ${transposeA} is true, innerElementSize ${innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\n          Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\n      tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}. tileInner ${tileInner} must be divisible by workgroupSize[1] ${workgroupSize[1]}. colPerThread ${workPerThread[0]} must be 4.`);\n  return `\n  var<workgroup> mm_Asub : array<array<vec${innerElementSize}<f32>, ${tileAWidth / innerElementSize}>, ${tileAHight}>;\n  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${tileBOuter / workPerThread[0]}>, ${tileInner}>;\n\n  ${main()} {\n    let localRow = i32(localId.y);\n    let tileRow = localRow * ${rowPerThread};\n    let tileCol = i32(localId.x);\n\n    let globalRow = i32(globalId.y) * ${rowPerThread};\n    let globalCol = i32(globalId.x) * ${colPerThread};\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n    let batchA = ${splitK || !broadcastBatch ? 'batch' : 'batch % uniforms.aShape[0]'};\n    let batchB = ${splitK || !broadcastBatch ? 'batch' : 'batch % uniforms.bShape[0]'};\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n    let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : `(uniforms.dimInner - 1) / ${tileInner} + 1`};\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n    var acc: array<vec4<f32>, ${rowPerThread}>;\n\n    // Loop over shared dimension.\n    let tileRowB = localRow * ${rowPerThreadB};\n    for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n            let inputRow = tileRow + innerRow;\n            let inputCol = tileCol;\n            ${writeDataToSubAVec4Snippet(transposeA, innerElementSize)}\n        }\n\n        // Load one tile of B into local memory.\n        for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow++) {\n            let inputRow = tileRowB + innerRow;\n            let inputCol = tileCol;\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB, kStart + inputRow, globalCol);\n        }\n        kStart = kStart + ${tileInner};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        ${calculateResultSnippet(transposeA, innerElementSize, rowPerThread, tileInner)}\n        workgroupBarrier();\n    }\n\n    for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n    }\n  }`;\n}\nconst writeDataToSubASnippet = transpose => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart + inputCol);\n        `;\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRowStart + inputRow,\n          kStart + inputCol);\n        `;\n  }\n};\nconst readDataFromSubASnippet = transposeA => {\n  return transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' : 'let ACached = mm_Asub[tileRow + innerRow][k];';\n};\n// sequentialAccessByThreads means sequential data in memory is accessed by\n// threads, instead of a single thread (default behavior).\nexport function makeMatMulPackedSource(workPerThread, workgroupSize, transposeA = false, tileInner = 32, splitK = false, splitedDimInner = 32, sequentialAccessByThreads = false, broadcastBatch = false) {\n  const tileAOuter = workPerThread[1] * workgroupSize[1];\n  const tileBOuter = workPerThread[0] * workgroupSize[0];\n  const tileAWidth = transposeA ? tileAOuter : tileInner;\n  const tileAHight = transposeA ? tileInner : tileAOuter;\n  util.assert(tileAHight % workgroupSize[1] === 0 && tileAWidth % workgroupSize[0] === 0 && tileInner % workgroupSize[1] === 0, () => `tileAHight ${tileAHight} must be divisible by workgroupSize[1]${workgroupSize[1]}, tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}, tileInner ${tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`);\n  const rowPerThreadA = tileAHight / workgroupSize[1];\n  const colPerThreadA = tileAWidth / workgroupSize[0];\n  const rowPerThreadB = tileInner / workgroupSize[1];\n  const rowPerThread = workPerThread[1];\n  const colPerThread = workPerThread[0];\n  const matmulSnippet = sequentialAccessByThreads ? `\n      let localRow = i32(localId.y);\n      let localCol = i32(localId.x);\n      let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n      let globalColStart = i32(workgroupId.x) * ${tileBOuter};\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var inputRow = localRow; inputRow < ${tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\n          for (var inputCol = localCol; inputCol < ${tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\n            ${writeDataToSubASnippet(transposeA)}\n          }\n        }\n        // Load one tile of B into local memory.\n        for (var inputRow = localRow; inputRow < ${tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\n              for (var inputCol = localCol; inputCol < ${tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n              kStart + inputRow,\n              globalColStart + inputCol);\n          }\n        }\n        kStart = kStart + ${tileInner};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        var BCached : array<f32, ${colPerThread}>;\n        for (var k = 0; k < ${tileInner}; k++) {\n          for (var inner = 0; inner < ${colPerThread}; inner++) {\n            BCached[inner] = mm_Bsub[k][localCol + inner * ${workgroupSize[0]}];\n          }\n          for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n            let ACached = ${transposeA ? `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];` : `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`}\n            for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n              acc[innerRow][innerCol] =\n                  fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);\n            }\n          }\n        }\n        workgroupBarrier();\n      }\n      for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n        let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\n        for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n          let gCol = globalColStart + localCol + innerCol * ${workgroupSize[0]};\n          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n        }\n      }\n      ` : `\n  let tileRow = i32(localId.y) * ${rowPerThread};\n  let tileCol = i32(localId.x) * ${colPerThread};\n\n  let globalRow = i32(globalId.y) * ${rowPerThread};\n  let globalCol = i32(globalId.x) * ${colPerThread};\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n  let tileRowA = i32(localId.y) * ${rowPerThreadA};\n  let tileColA = i32(localId.x) * ${colPerThreadA};\n  let tileRowB = i32(localId.y) * ${rowPerThreadB};\n  // Loop over shared dimension.\n  for (var t = 0; t < numTiles; t++) {\n    // Load one tile of A into local memory.\n    for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol++) {\n        let inputRow = tileRowA + innerRow;\n        let inputCol = tileColA + innerCol;\n        ${writeDataToSubASnippet(transposeA)}\n      }\n    }\n\n    // Load one tile of B into local memory.\n    for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n        let inputRow = tileRowB + innerRow;\n        let inputCol = tileCol + innerCol;\n        mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n          kStart + inputRow,\n          globalCol + innerCol);\n      }\n    }\n    kStart = kStart + ${tileInner};\n    workgroupBarrier();\n\n    // Compute acc values for a single thread.\n    var BCached : array<f32, ${colPerThread}>;\n    for (var k = 0; k < ${tileInner}; k++) {\n      for (var inner = 0; inner < ${colPerThread}; inner++) {\n        BCached[inner] = mm_Bsub[k][tileCol + inner];\n      }\n\n      for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n        ${readDataFromSubASnippet(transposeA)}\n        for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n          acc[innerRow][innerCol] =\n              fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);\n        }\n      }\n    }\n\n    workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n    for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n      mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n          acc[innerRow][innerCol]);\n    }\n  }\n  `;\n  return `\n    var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHight}>;\n    var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n\n    ${main()} {\n      let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n      let batchA = ${splitK || !broadcastBatch ? 'batch' : 'batch % uniforms.aShape[0]'};\n      let batchB = ${splitK || !broadcastBatch ? 'batch' : 'batch % uniforms.bShape[0]'};\n      let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : `(uniforms.dimInner - 1) / ${tileInner} + 1`};\n      var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n      var acc : array<array<f32, ${colPerThread}>, ${rowPerThread}>;\n\n      // Without this initialization strange values show up in acc.\n      for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n        for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n          acc[innerRow][innerCol] = 0.0;\n        }\n      }\n      ${matmulSnippet}\n    }\n  `;\n}\nconst readVectorASnippet = transpose => {\n  return transpose ? `\n      mm_readA(batchA, colA, globalRow),\n      mm_readA(batchA, colA + 1, globalRow),\n      mm_readA(batchA, colA + 2, globalRow),\n      mm_readA(batchA, colA + 3, globalRow)\n  ` : `\n      mm_readA(batchA, globalRow, colA),\n      mm_readA(batchA, globalRow, colA + 1),\n      mm_readA(batchA, globalRow, colA + 2),\n      mm_readA(batchA, globalRow, colA + 3)\n  `;\n};\nexport function makeVectorMatrixProductSource(workgroupSize, transposeA = false) {\n  util.assert(workgroupSize[1] === 1 && workgroupSize[2] === 1, () => `A linear work group size is required. But got ${workgroupSize}.`);\n  const tileSize = workgroupSize[0] * 4;\n  return `\n    var<workgroup> mm_Asub : array<vec4<f32>, ${workgroupSize[0]}>;\n\n    ${main()} {\n      let tileCol = i32(localId.x);\n      let globalCol = i32(globalId.x);\n      let globalRow = i32(globalId.y);\n\n      let numTiles = (uniforms.dimInner - 1) / ${tileSize} + 1;\n      let batch = i32(globalId.z);\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      // Without this initialization strange values show up in acc.\n      var acc = 0.0;\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        let colA = t * ${tileSize} + tileCol * 4;\n        mm_Asub[tileCol] = vec4<f32>(${readVectorASnippet(transposeA)});\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        for (var k = 0; k < ${tileSize / 4}; k++) {\n          let rowB = t * ${tileSize} + k * 4;\n          let BCached = vec4<f32>(mm_readB(batchB, rowB, globalCol),\n                              mm_readB(batchB, rowB + 1, globalCol),\n                              mm_readB(batchB, rowB + 2, globalCol),\n                              mm_readB(batchB, rowB + 3, globalCol));\n\n          let ACached = mm_Asub[k];\n          acc = acc + dot(ACached, BCached);\n        }\n\n        workgroupBarrier();\n      }\n\n      mm_write(batch, globalRow, globalCol, acc);\n    }\n  `;\n}\nexport class MatMulPackedProgram {\n  constructor(aShape, outputShape, transposeA = false, transposeB = false, bias = null, activation = null, preluActivationWeights = null, sequentialAccessByThreads = false) {\n    this.variableNames = ['A', 'B'];\n    this.uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n    this.outputShape = outputShape;\n    this.dispatchLayout = {\n      x: [2],\n      y: [1],\n      z: [0]\n    };\n    const dimInner = transposeA ? aShape[1] : aShape[2];\n    this.isVec4 = (dimInner % 4 === 0 && !transposeA || outputShape[1] % 4 === 0 && transposeA) && outputShape[2] % 4 === 0 && !transposeB;\n    this.outputComponent = this.isVec4 ? 4 : 1;\n    this.isVectorA = outputShape[1] === 1 && !transposeA;\n    if (!this.isVec4 && this.isVectorA) {\n      // For makeVectorMatrixProductSource\n      this.elementsPerThread = [1, 1, 1];\n      this.workgroupSize = [32, 1, 1];\n    } else {\n      const workgroupInfo = computeWorkgroupInfoForMatMul(outputShape[1], dimInner, outputShape[2], transposeA);\n      this.workgroupSize = workgroupInfo.workgroupSize;\n      this.elementsPerThread = workgroupInfo.elementsPerThread;\n    }\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, this.elementsPerThread);\n    const addBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    this.sequentialAccessByThreads = sequentialAccessByThreads;\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n    [this.fitAOuter, this.fitBOuter, this.fitInner] = this.getShapeFit(outputShape[1], outputShape[2], dimInner);\n    this.shaderKey = `matMulPacked_${this.elementsPerThread}_${transposeA}_${transposeB}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.isVectorA}_${this.sequentialAccessByThreads}`;\n  }\n  getShapeFit(dimAOuter, dimBOuter, dimInner) {\n    const tileAOuter = this.workgroupSize[1] * this.elementsPerThread[1];\n    const tileBOuter = this.workgroupSize[0] * this.elementsPerThread[0];\n    if (!this.isVec4 && this.isVectorA) {\n      // For makeVectorMatrixProductSource\n      this.tileInner = this.workgroupSize[0] * 4;\n    } else {\n      this.tileInner = tileBOuter;\n    }\n    const fitAOuter = dimAOuter % tileAOuter === 0;\n    const fitBOuter = dimBOuter % tileBOuter === 0;\n    const fitInner = dimInner % this.tileInner === 0;\n    return [fitAOuter, fitBOuter, fitInner];\n  }\n  getUserCode() {\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivationWeights, this.isVec4)}\n      ${matMulReadWriteFnSource(this.addBias, this.activation, false /* transposeA is implemented in makeMatMulPackedSource */, this.transposeB, this.fitAOuter, this.fitBOuter, this.fitInner, this.isVec4 ? 4 : 1)}\n      ${this.isVec4 ? makeMatMulPackedVec4Source(this.elementsPerThread, this.workgroupSize, this.transposeA, this.tileInner, false, null, true) : this.isVectorA ? makeVectorMatrixProductSource(this.workgroupSize, this.transposeA) : makeMatMulPackedSource(this.elementsPerThread, this.workgroupSize, this.transposeA, this.tileInner, false, null, this.sequentialAccessByThreads, true)}\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var BinaryOpType;\n(function (BinaryOpType) {\n  BinaryOpType[BinaryOpType[\"ADD\"] = 0] = \"ADD\";\n  BinaryOpType[BinaryOpType[\"ATAN2\"] = 1] = \"ATAN2\";\n  BinaryOpType[BinaryOpType[\"COMPLEX_MULTIPLY_IMAG\"] = 2] = \"COMPLEX_MULTIPLY_IMAG\";\n  BinaryOpType[BinaryOpType[\"COMPLEX_MULTIPLY_REAL\"] = 3] = \"COMPLEX_MULTIPLY_REAL\";\n  BinaryOpType[BinaryOpType[\"DIV\"] = 4] = \"DIV\";\n  BinaryOpType[BinaryOpType[\"ELU_DER\"] = 5] = \"ELU_DER\";\n  BinaryOpType[BinaryOpType[\"EQUAL\"] = 6] = \"EQUAL\";\n  BinaryOpType[BinaryOpType[\"FLOOR_DIV\"] = 7] = \"FLOOR_DIV\";\n  BinaryOpType[BinaryOpType[\"GREATER\"] = 8] = \"GREATER\";\n  BinaryOpType[BinaryOpType[\"GREATER_EQUAL\"] = 9] = \"GREATER_EQUAL\";\n  BinaryOpType[BinaryOpType[\"LESS\"] = 10] = \"LESS\";\n  BinaryOpType[BinaryOpType[\"LESS_EQUAL\"] = 11] = \"LESS_EQUAL\";\n  BinaryOpType[BinaryOpType[\"LOGICAL_AND\"] = 12] = \"LOGICAL_AND\";\n  BinaryOpType[BinaryOpType[\"LOGICAL_OR\"] = 13] = \"LOGICAL_OR\";\n  BinaryOpType[BinaryOpType[\"MAX\"] = 14] = \"MAX\";\n  BinaryOpType[BinaryOpType[\"MIN\"] = 15] = \"MIN\";\n  BinaryOpType[BinaryOpType[\"MOD\"] = 16] = \"MOD\";\n  BinaryOpType[BinaryOpType[\"MUL\"] = 17] = \"MUL\";\n  BinaryOpType[BinaryOpType[\"NOT_EQUAL\"] = 18] = \"NOT_EQUAL\";\n  BinaryOpType[BinaryOpType[\"POW\"] = 19] = \"POW\";\n  BinaryOpType[BinaryOpType[\"PRELU\"] = 20] = \"PRELU\";\n  BinaryOpType[BinaryOpType[\"SQUARED_DIFFERENCE\"] = 21] = \"SQUARED_DIFFERENCE\";\n  BinaryOpType[BinaryOpType[\"SUB\"] = 22] = \"SUB\";\n})(BinaryOpType || (BinaryOpType = {}));\nconst ADD = 'let resultTemp = a + b;';\nconst ATAN2 = 'let resultTemp = atan2(a, b);';\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nconst COMPLEX_MULTIPLY_REAL = 'let resultTemp = areal * breal - aimag * bimag;';\nconst COMPLEX_MULTIPLY_IMAG = 'let resultTemp = areal * bimag + aimag * breal;';\nconst DIV = 'let resultTemp = a / b;';\nconst ELU_DER = 'let resultTemp = select(a * (b + 1.0), a, b >= b - b);';\nconst EQUAL = `\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a == b);\n`;\nconst FLOOR_DIV = `\n  let remainder =\n      select(a % b, round(a % b), (round(a) == a) & (round(b) == b));\n  let quotient = (a - remainder) / b;\n  let resultTemp =\n      round(select(quotient, quotient - 1, sign(remainder) == -sign(b)));\n`;\nconst GREATER = `\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a > b);\n`;\nconst GREATER_EQUAL = `\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a >= b);\n`;\nconst LESS = `\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a < b);\n`;\nconst LESS_EQUAL = `\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a <= b);\n`;\nconst LOGICAL_AND = 'return f32(a >= 1.0 && b >= 1.0);';\nconst LOGICAL_AND_VEC4 = `return (vec4<f32>(a >= vec4<f32>(1.0)) *\n  vec4<f32>(b >= vec4<f32>(1.0)));`;\nconst LOGICAL_OR = 'return f32(a >= 1.0 || b >= 1.0);';\nconst LOGICAL_OR_VEC4 = `return min(vec4<f32>(a >= vec4<f32>(1.0)) +\n  vec4<f32>(b >= vec4<f32>(1.0)), vec4<f32>(1.0));`;\nconst MAX = 'let resultTemp = max(a, b);';\nconst MIN = 'let resultTemp = min(a, b);';\nconst MOD = `\n  let isNaN = b == 0.;\n  var resultTemp = a % b;\n  resultTemp = select((resultTemp + b) % b, resultTemp,\n      (a < 0. && b < 0.) || (a >= 0. && b > 0.));\n`;\nconst MOD_VEC4 = `\n  let isNaN = !vec4<bool>(b);\n  var resultTemp = vec4<f32>(a % b);\n  if (!((a[0] < 0. && b[0] < 0.) || (a[0] >= 0. && b[0] > 0.))) {\n    resultTemp[0] = (resultTemp[0] + b[0]) % b[0];\n  }\n  if (!((a[1] < 0. && b[1] < 0.) || (a[1] >= 0. && b[1] > 0.))) {\n    resultTemp[1] = (resultTemp[1] + b[1]) % b[1];\n  }\n  if (!((a[2] < 0. && b[2] < 0.) || (a[2] >= 0. && b[2] > 0.))) {\n    resultTemp[2] = (resultTemp[2] + b[2]) % b[2];\n  }\n  if (!((a[3] < 0. && b[3] < 0.) || (a[3] >= 0. && b[3] > 0.))) {\n    resultTemp[3] = (resultTemp[3] + b[3]) % b[3];\n  }\n`;\nconst MUL = 'let resultTemp = a * b;';\nconst NOT_EQUAL = `\n  var resultTemp = f32(a != b);\n  let valueForNaN = 1.0;\n`;\nconst NOT_EQUAL_VEC4 = `\n  var resultTemp = vec4<f32>(a != b);\n  let valueForNaN = 1.0;\n`;\nconst POW = `\n  let isNaN = a < 0.0 && floor(b) < b;\n  if (b == 0.0) {\n    return 1.0;\n  }\n  var resultTemp = select(sign(a) * pow(abs(a), b), pow(abs(a), b),\n      round(abs(b) % 2.0) != 1.0);\n`;\nconst POW_VEC4 = `\n  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);\n  let isModRound1 = vec4<f32>(isModRound1Bool);\n  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);\n  var resultTemp = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  let isExpZero = b == vec4<f32>(0.0);\n  if (isExpZero.r) {\n    resultTemp.r = 1.0;\n  }\n  if (isExpZero.g) {\n    resultTemp.g = 1.0;\n  }\n  if (isExpZero.b) {\n    resultTemp.b = 1.0;\n  }\n  if (isExpZero.a) {\n    resultTemp.a = 1.0;\n  }\n  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);\n`;\nconst PRELU = `if (a < 0.0) { return b * a; }  return a;`;\nconst PRELU_VEC4 = `\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n`;\nconst SQUARED_DIFFERENCE = 'let resultTemp = (a - b) * (a - b);';\nconst SUB = 'let resultTemp = a - b;';\nexport function getBinaryOpString(type, useVec4) {\n  let doOpSnippet;\n  // Ops with NaN check\n  do {\n    switch (type) {\n      case BinaryOpType.ATAN2:\n        doOpSnippet = ATAN2;\n        break;\n      case BinaryOpType.MAX:\n        doOpSnippet = MAX;\n        break;\n      case BinaryOpType.MIN:\n        doOpSnippet = MIN;\n        break;\n      case BinaryOpType.MOD:\n        doOpSnippet = useVec4 ? MOD_VEC4 : MOD;\n        break;\n      case BinaryOpType.NOT_EQUAL:\n        doOpSnippet = useVec4 ? NOT_EQUAL_VEC4 : NOT_EQUAL;\n        break;\n      case BinaryOpType.POW:\n        doOpSnippet = useVec4 ? POW_VEC4 : POW;\n        break;\n      default:\n        continue;\n    }\n    let isNaN;\n    let dTypeN;\n    let boolN;\n    if (useVec4) {\n      isNaN = 'isnanVec4';\n      dTypeN = 'vec4<f32>';\n      boolN = 'vec4<bool>';\n    } else {\n      isNaN = 'isnan';\n      dTypeN = 'f32';\n      boolN = 'bool';\n    }\n    return `\n      let aIsNaN = ${isNaN}(a);\n      let aPostLegalization = select(a, ${dTypeN}(42), aIsNaN);\n      let bIsNaN = ${isNaN}(b);\n      let bPostLegalization = select(b, ${dTypeN}(42), bIsNaN);\n      let isNaN = false;\n      let valueForNaN = uniforms.NAN;\n      {\n        let a = aPostLegalization;\n        let b = bPostLegalization;\n        ${doOpSnippet}\n        return select(\n            resultTemp, ${dTypeN}(valueForNaN),\n            ${boolN}(isNaN) | aIsNaN | bIsNaN);\n      }\n    `;\n  } while (false);\n  // Ops without NaN check\n  switch (type) {\n    case BinaryOpType.ADD:\n      doOpSnippet = ADD;\n      break;\n    case BinaryOpType.COMPLEX_MULTIPLY_IMAG:\n      doOpSnippet = COMPLEX_MULTIPLY_IMAG;\n      break;\n    case BinaryOpType.COMPLEX_MULTIPLY_REAL:\n      doOpSnippet = COMPLEX_MULTIPLY_REAL;\n      break;\n    case BinaryOpType.DIV:\n      doOpSnippet = DIV;\n      break;\n    case BinaryOpType.ELU_DER:\n      doOpSnippet = ELU_DER;\n      break;\n    case BinaryOpType.EQUAL:\n      doOpSnippet = EQUAL;\n      break;\n    case BinaryOpType.FLOOR_DIV:\n      doOpSnippet = FLOOR_DIV;\n      break;\n    case BinaryOpType.GREATER:\n      doOpSnippet = GREATER;\n      break;\n    case BinaryOpType.GREATER_EQUAL:\n      doOpSnippet = GREATER_EQUAL;\n      break;\n    case BinaryOpType.LESS:\n      doOpSnippet = LESS;\n      break;\n    case BinaryOpType.LESS_EQUAL:\n      doOpSnippet = LESS_EQUAL;\n      break;\n    case BinaryOpType.LOGICAL_AND:\n      return useVec4 ? LOGICAL_AND_VEC4 : LOGICAL_AND;\n    case BinaryOpType.LOGICAL_OR:\n      return useVec4 ? LOGICAL_OR_VEC4 : LOGICAL_OR;\n    case BinaryOpType.MUL:\n      doOpSnippet = MUL;\n      break;\n    case BinaryOpType.PRELU:\n      return useVec4 ? PRELU_VEC4 : PRELU;\n    case BinaryOpType.SQUARED_DIFFERENCE:\n      doOpSnippet = SQUARED_DIFFERENCE;\n      break;\n    case BinaryOpType.SUB:\n      doOpSnippet = SUB;\n      break;\n    default:\n    // throw new Error(`BinaryType ${type} is not implemented!`);\n  }\n  return `\n    ${doOpSnippet}\n    return resultTemp;\n  `;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport var UnaryOpType;\n(function (UnaryOpType) {\n  UnaryOpType[UnaryOpType[\"ABS\"] = 0] = \"ABS\";\n  UnaryOpType[UnaryOpType[\"ACOS\"] = 1] = \"ACOS\";\n  UnaryOpType[UnaryOpType[\"ACOSH\"] = 2] = \"ACOSH\";\n  UnaryOpType[UnaryOpType[\"ASIN\"] = 3] = \"ASIN\";\n  UnaryOpType[UnaryOpType[\"ASINH\"] = 4] = \"ASINH\";\n  UnaryOpType[UnaryOpType[\"ATAN\"] = 5] = \"ATAN\";\n  UnaryOpType[UnaryOpType[\"ATANH\"] = 6] = \"ATANH\";\n  UnaryOpType[UnaryOpType[\"CEIL\"] = 7] = \"CEIL\";\n  UnaryOpType[UnaryOpType[\"COS\"] = 8] = \"COS\";\n  UnaryOpType[UnaryOpType[\"COSH\"] = 9] = \"COSH\";\n  UnaryOpType[UnaryOpType[\"ELU\"] = 10] = \"ELU\";\n  UnaryOpType[UnaryOpType[\"ERF\"] = 11] = \"ERF\";\n  UnaryOpType[UnaryOpType[\"EXP\"] = 12] = \"EXP\";\n  UnaryOpType[UnaryOpType[\"EXPM1\"] = 13] = \"EXPM1\";\n  UnaryOpType[UnaryOpType[\"FLOOR\"] = 14] = \"FLOOR\";\n  UnaryOpType[UnaryOpType[\"IS_FINITE\"] = 15] = \"IS_FINITE\";\n  UnaryOpType[UnaryOpType[\"IS_INF\"] = 16] = \"IS_INF\";\n  UnaryOpType[UnaryOpType[\"IS_NAN\"] = 17] = \"IS_NAN\";\n  UnaryOpType[UnaryOpType[\"LINEAR\"] = 18] = \"LINEAR\";\n  UnaryOpType[UnaryOpType[\"LOG\"] = 19] = \"LOG\";\n  UnaryOpType[UnaryOpType[\"LOG1P\"] = 20] = \"LOG1P\";\n  UnaryOpType[UnaryOpType[\"LOGICAL_NOT\"] = 21] = \"LOGICAL_NOT\";\n  UnaryOpType[UnaryOpType[\"NEG\"] = 22] = \"NEG\";\n  UnaryOpType[UnaryOpType[\"RELU\"] = 23] = \"RELU\";\n  UnaryOpType[UnaryOpType[\"RELU6\"] = 24] = \"RELU6\";\n  UnaryOpType[UnaryOpType[\"LEAKYRELU\"] = 25] = \"LEAKYRELU\";\n  UnaryOpType[UnaryOpType[\"RECIPROCAL\"] = 26] = \"RECIPROCAL\";\n  UnaryOpType[UnaryOpType[\"ROUND\"] = 27] = \"ROUND\";\n  UnaryOpType[UnaryOpType[\"RSQRT\"] = 28] = \"RSQRT\";\n  UnaryOpType[UnaryOpType[\"SELU\"] = 29] = \"SELU\";\n  UnaryOpType[UnaryOpType[\"SIGMOID\"] = 30] = \"SIGMOID\";\n  UnaryOpType[UnaryOpType[\"SIGN\"] = 31] = \"SIGN\";\n  UnaryOpType[UnaryOpType[\"SIN\"] = 32] = \"SIN\";\n  UnaryOpType[UnaryOpType[\"SINH\"] = 33] = \"SINH\";\n  UnaryOpType[UnaryOpType[\"SOFTPLUS\"] = 34] = \"SOFTPLUS\";\n  UnaryOpType[UnaryOpType[\"SQRT\"] = 35] = \"SQRT\";\n  UnaryOpType[UnaryOpType[\"SQUARE\"] = 36] = \"SQUARE\";\n  UnaryOpType[UnaryOpType[\"STEP\"] = 37] = \"STEP\";\n  UnaryOpType[UnaryOpType[\"TAN\"] = 38] = \"TAN\";\n  UnaryOpType[UnaryOpType[\"TANH\"] = 39] = \"TANH\";\n  UnaryOpType[UnaryOpType[\"TO_INT\"] = 40] = \"TO_INT\";\n})(UnaryOpType || (UnaryOpType = {}));\nconst ABS = `return abs(a);`;\nconst ACOS = `\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return acos(a);\n`;\nconst ACOSH = `\n  if (a < 1.) {\n    return uniforms.NAN;\n  }\n  return acosh(a);\n`;\nconst ASIN = `\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return asin(a);\n`;\nconst ASINH = `return asinh(a);`;\nconst ATAN = `\n  if (isnan(a)) {\n    return uniforms.NAN;\n  }\n  return atan(a);\n`;\nconst ATANH = `\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  if (a == 1.) {\n    return uniforms.INFINITY;\n  }\n  if (a == -1.) {\n    return -uniforms.INFINITY;\n  }\n  return atanh(a);\n`;\nconst CEIL = `return ceil(a);`;\nconst COS = `return cos(a);`;\nconst COSH = `\n  let e2x = exp(-a);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\nconst EXPM1 = `return exp(a) - 1.0;`;\nconst ELU = `if (a >= 0.0) { return a; }  return (exp(a) - 1.0);`;\nconst ELU_VEC4 = `\n  var resFloat = exp(a) - vec4<f32>(1.0);\n  if (a.r >= 0.0) {\n    resFloat.r = a.r;\n  }\n  if (a.g >= 0.0) {\n    resFloat.g = a.g;\n  }\n  if (a.b >= 0.0) {\n    resFloat.b = a.b;\n  }\n  if (a.a >= 0.0) {\n    resFloat.a = a.a;\n  }\n  return resFloat;\n`;\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  let p = ${backend_util.ERF_P};\n  let a1 = ${backend_util.ERF_A1};\n  let a2 = ${backend_util.ERF_A2};\n  let a3 = ${backend_util.ERF_A3};\n  let a4 = ${backend_util.ERF_A4};\n  let a5 = ${backend_util.ERF_A5};\n\n  let sign = sign(a);\n  let absA = abs(a);\n  let t = 1.0 / (1.0 + p * absA);\n  return sign * (1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * exp(-absA * absA));\n`;\nconst EXP = `return exp(a);`;\nconst FLOOR = `return floor(a);`;\nconst IS_FINITE = `return f32(!isnan(a) && !isinf(a));`;\nconst IS_INF = `return f32(isinf(a));`;\nconst IS_NAN = `return f32(isnan(a));`;\nconst LINEAR = `return a;`;\nconst LOG = `if (a < 0.0) { return uniforms.NAN; }\n  return log(a);`;\nconst LOG1P = `\n  if (isnan(a)) { return a; }\n  return log(1.0 + a);\n`;\nconst LOGICAL_NOT = `return f32(!(a >= 1.0));`;\nconst NEG = `return -a;`;\nconst LEAKYRELU = `if (a < 0.0) { return uniforms.alpha * a; } return a;`;\nconst LEAKYRELU_VEC4 = `\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n`;\nconst RECIPROCAL = `return 1.0 / a;`;\nconst RELU = `return select(a, 0.0, a < 0.0);`;\nconst RELU6 = 'return clamp(a, 0.0, 6.0);';\nconst RELU6_VEC4 = 'return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));';\nconst RELU_VEC4 = `\n  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));\n`;\nconst ROUND = `return round(a);`;\nconst RSQRT = `return inverseSqrt(a);`;\n// Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n// See: https://arxiv.org/abs/1706.02515\nconst SELU = `\n  if (a >= 0.0) {\n    return ${backend_util.SELU_SCALE} * a;\n  } else {\n    return ${backend_util.SELU_SCALEALPHA} * (exp(a) - 1.0);\n  }\n`;\nconst SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * a));`;\nconst SIGN = `return sign(a);`;\nconst SIN = `return sin(a);`;\nconst SINH = `\n  let e2x = exp(a);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\nconst SOFTPLUS = `\n  let epsilon = 1.1920928955078125e-7;\n  let threshold = log(epsilon) + 2.0;\n\n  let too_large = a > -threshold;\n  let too_small = a < threshold;\n  let exp_a = exp(a);\n\n  if (too_large) {\n    return a;\n  } else if (too_small) {\n    return exp_a;\n  } else {\n    return log(exp_a + 1.0);\n  }\n`;\nconst SQRT = `return sqrt(a);`;\nconst SQUARE = `return a * a;`;\nconst STEP = `\n  if (isnan(a)) {\n    return a;\n  }\n\n  return select(uniforms.stepAlpha, 1.0, a > 0.0);\n`;\nconst TAN = `return tan(a);`;\nconst TANH = `\n  let e2x = exp(-2.0 * abs(a));\n  return sign(a) * (1.0 - e2x) / (1.0 + e2x);\n`;\nconst TO_INT = `return f32(i32((a)));`;\nexport function getUnaryOpString(type, useVec4) {\n  switch (type) {\n    case UnaryOpType.ABS:\n      return ABS;\n    case UnaryOpType.ACOS:\n      return ACOS;\n    case UnaryOpType.ACOSH:\n      return ACOSH;\n    case UnaryOpType.ASIN:\n      return ASIN;\n    case UnaryOpType.ASINH:\n      return ASINH;\n    case UnaryOpType.ATAN:\n      return ATAN;\n    case UnaryOpType.ATANH:\n      return ATANH;\n    case UnaryOpType.COS:\n      return COS;\n    case UnaryOpType.COSH:\n      return COSH;\n    case UnaryOpType.CEIL:\n      return CEIL;\n    case UnaryOpType.ELU:\n      return useVec4 ? ELU_VEC4 : ELU;\n    case UnaryOpType.ERF:\n      return ERF;\n    case UnaryOpType.EXP:\n      return EXP;\n    case UnaryOpType.EXPM1:\n      return EXPM1;\n    case UnaryOpType.FLOOR:\n      return FLOOR;\n    case UnaryOpType.IS_FINITE:\n      return IS_FINITE;\n    case UnaryOpType.IS_INF:\n      return IS_INF;\n    case UnaryOpType.IS_NAN:\n      return IS_NAN;\n    case UnaryOpType.LINEAR:\n      return LINEAR;\n    case UnaryOpType.LOG:\n      return LOG;\n    case UnaryOpType.LOG1P:\n      return LOG1P;\n    case UnaryOpType.LOGICAL_NOT:\n      return LOGICAL_NOT;\n    case UnaryOpType.NEG:\n      return NEG;\n    case UnaryOpType.LEAKYRELU:\n      return useVec4 ? LEAKYRELU_VEC4 : LEAKYRELU;\n    case UnaryOpType.RECIPROCAL:\n      return RECIPROCAL;\n    case UnaryOpType.RELU:\n      return useVec4 ? RELU_VEC4 : RELU;\n    case UnaryOpType.RELU6:\n      return useVec4 ? RELU6_VEC4 : RELU6;\n    case UnaryOpType.ROUND:\n      return ROUND;\n    case UnaryOpType.RSQRT:\n      return RSQRT;\n    case UnaryOpType.SELU:\n      return SELU;\n    case UnaryOpType.SIGMOID:\n      return SIGMOID;\n    case UnaryOpType.SIGN:\n      return SIGN;\n    case UnaryOpType.SIN:\n      return SIN;\n    case UnaryOpType.SINH:\n      return SINH;\n    case UnaryOpType.SOFTPLUS:\n      return SOFTPLUS;\n    case UnaryOpType.SQRT:\n      return SQRT;\n    case UnaryOpType.SQUARE:\n      return SQUARE;\n    case UnaryOpType.STEP:\n      return STEP;\n    case UnaryOpType.TAN:\n      return TAN;\n    case UnaryOpType.TANH:\n      return TANH;\n    case UnaryOpType.TO_INT:\n      return TO_INT;\n    default:\n      throw new Error(`BinaryType ${type} is not implemented!`);\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BinaryOpType, getBinaryOpString } from './binary_op_util';\nimport { getUnaryOpString, UnaryOpType } from './unary_op_util';\nimport { typeSnippet } from './webgpu_program';\nexport function activationFnSnippet(activation, hasPreluActivationWeights = false, packed = false, coordsLength = 3) {\n  if (activation === null) {\n    return '';\n  }\n  let activationOpSnippet = '';\n  if (activation === 'linear') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.LINEAR);\n  } else if (activation === 'relu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.RELU, packed);\n  } else if (activation === 'elu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.ELU, packed);\n  } else if (activation === 'relu6') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.RELU6, packed);\n  } else if (activation === 'prelu') {\n    activationOpSnippet = getBinaryOpString(BinaryOpType.PRELU, packed);\n  } else if (activation === 'sigmoid') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.SIGMOID, packed);\n  } else if (activation === 'leakyrelu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.LEAKYRELU, packed);\n  } else {\n    throw new Error(`Activation ${activation} has not been implemented for the WebGPU backend.`);\n  }\n  const elementSize = packed ? 4 : 1;\n  const dataType = typeSnippet(elementSize);\n  let activationFnSnippet = '';\n  if (hasPreluActivationWeights) {\n    activationFnSnippet = `\n      fn activation(a : ${dataType}, coords : vec${coordsLength}<i32>) -> ${dataType} {\n        let b = getPreluActivationWeightsByOutputCoords(coords);\n        ${activationOpSnippet}\n      }`;\n  } else {\n    activationFnSnippet = `\n      fn activation(a : ${dataType}, coords : vec${coordsLength}<i32>) -> ${dataType} {\n        ${activationOpSnippet}\n      }`;\n  }\n  return activationFnSnippet;\n}\nexport function biasActivationSnippet(hasBias, activation) {\n  return `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      ${activation ? 'value = activation(value, coords);' : ''}\n      `;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { activationFnSnippet } from './activation_util';\nimport { matMulReadWriteFnSource } from './matmul_packed_webgpu';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch } from './webgpu_util';\nexport function makeMatMulReduceSource(workgroupSizeX) {\n  return `\n    var<workgroup> sumValues : array<f32, ${workgroupSizeX}>;\n    ${main()} {\n      let coords = getOutputCoords();\n      let batch = coords[0];\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      let row = coords[1];\n      let col = coords[2];\n      var sum = 0.0;\n      let Length = uniforms.dimInner;\n      for (var k = i32(localId.x); k < Length; k = k + ${workgroupSizeX}) {\n        let dataA = mm_readA(batchA, row, k);\n        let dataB = mm_readB(batchB, k, col);\n        sum = sum + dataA * dataB;\n      }\n      sumValues[localId.x] = sum;\n      workgroupBarrier();\n\n      for(var currentSize = ${workgroupSizeX / 2}u; currentSize > 1u;\n          currentSize = currentSize / 2u) {\n        if (localId.x < currentSize)\n        {\n          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (localId.x == 0u) {\n        sum = sumValues[0] + sumValues[1];\n        mm_write(batch, row, col, sum);\n      }\n    }\n  `;\n}\nexport class MatMulReduceProgram {\n  constructor(outputShape, transposeA = false, transposeB = false, bias = null, activation = null, preluActivationWeights = null) {\n    this.variableNames = ['A', 'B'];\n    this.uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n    this.workgroupSize = [256, 1, 1];\n    this.outputShape = outputShape;\n    this.dispatchLayout = {\n      x: [],\n      y: [1, 2],\n      z: [0]\n    };\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    const addBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n    this.shaderKey = `matMulReduce_${this.activation}_${transposeA}_${transposeB}`;\n  }\n  getUserCode() {\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivationWeights)}\n      ${matMulReadWriteFnSource(this.addBias, this.activation, this.transposeA, this.transposeB)}\n      ${makeMatMulReduceSource(this.workgroupSize[0])}\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { activationFnSnippet } from './activation_util';\nimport { matMulReadWriteFnSource } from './matmul_packed_webgpu';\nimport { getMainHeaderString as main } from './webgpu_program';\nexport function makeMatMulSmallOutputSizeSource(workgroupSize) {\n  const tileAOuter = workgroupSize[1];\n  const tileBOuter = workgroupSize[0];\n  const tileInner = tileAOuter > tileBOuter ? tileAOuter : tileBOuter;\n  return `\n  var<workgroup> mm_Asub : array<array<f32, ${tileInner}>, ${tileAOuter}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n\n  // If the output size is small for matrix multiplication, avoid to use vec4\n  // and handle some elements per thread to optimally utilize the ALU.\n  // Read data from global memory to registers firstly, then store them into\n  // shared memory, so it is instruction-Level parallelism for arithmetic\n  // operations and others handle IO operations between barrier api, makes ALU\n  // and load/store units work simultaneously, could improves the performance.\n  ${main()} {\n    let tileRow = i32(localId.y);\n    let tileCol = i32(localId.x);\n    let globalRow = i32(globalId.y);\n    let globalCol = i32(globalId.x);\n    let batch = i32(globalId.z);\n    let batchA = batch % uniforms.aShape[0];\n    let batchB = batch % uniforms.bShape[0];\n\n    // uniforms.dimInner should be greater than 0.\n    let numTiles = (uniforms.dimInner - 1) / ${tileInner} + 1;\n    var acc = 0.0;\n\n    var globalColA = tileCol;\n    var globalRowB = 0;\n    var regA = mm_readA(batchA, globalRow, globalColA);\n    var regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n    var regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n    globalColA = globalColA + ${tileInner};\n    globalRowB = globalRowB + ${tileInner};\n\n    for (var t = 0; t < numTiles; t = t + 1) {\n      mm_Asub[tileRow][tileCol] = regA;\n      mm_Bsub[2 * tileRow][tileCol] = regB0;\n      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;\n\n      workgroupBarrier();\n\n      regA = mm_readA(batchA, globalRow, globalColA);\n      regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n      regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n      globalColA = globalColA + ${tileInner};\n      globalRowB = globalRowB + ${tileInner};\n\n      for (var k = 0; k < ${tileInner}; k = k + 1) {\n        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];\n      }\n      workgroupBarrier();\n    }\n\n    mm_write(batch, globalRow, globalCol, acc);\n  }\n  `;\n}\nexport class MatMulSmallOutputSizeProgram {\n  constructor(aShape, bShape, outputShape, transposeA = false, transposeB = false, bias = null, activation = null, preluActivationWeights = null) {\n    this.variableNames = ['A', 'B'];\n    this.uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n    this.workgroupSize = [16, 8, 1];\n    this.outputShape = outputShape;\n    this.dispatchLayout = {\n      x: [2],\n      y: [1],\n      z: [0]\n    };\n    this.dispatch = [Math.ceil(outputShape[2] / this.workgroupSize[0]), Math.ceil(outputShape[1] / this.workgroupSize[1]), outputShape[0]];\n    const addBias = bias != null;\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n    this.shaderKey = `matMulSmallOutputSize_${this.activation}_${transposeA}_${transposeB}`;\n  }\n  getUserCode() {\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivationWeights)}\n      ${matMulReadWriteFnSource(this.addBias, this.activation, this.transposeA, this.transposeB)}\n      ${makeMatMulSmallOutputSizeSource(this.workgroupSize)}\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { activationFnSnippet, biasActivationSnippet } from './activation_util';\nimport { makeMatMulPackedSource, makeMatMulPackedVec4Source, matMulReadFnSource } from './matmul_packed_webgpu';\nimport { atomicAddSnippet } from './shader_util';\nimport { getMainHeaderString as main, typeSnippet } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class MatMulSplitKProgram {\n  constructor(outputShape, dimInner, transposeA = false, transposeB = false) {\n    this.variableNames = ['A', 'B'];\n    this.uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n    this.workgroupSize = [8, 8, 1];\n    this.atomic = true;\n    this.splitedDimInner = 128;\n    util.assert(outputShape[0] === 1, () => 'MatMulSplitKProgram only supports batch = 1.');\n    this.outputShape = outputShape;\n    this.dispatchLayout = {\n      x: [2],\n      y: [1],\n      z: [0, 3]\n    };\n    const isVec4 = (transposeA && this.outputShape[1] % 4 === 0 || !transposeA && dimInner % 4 === 0) && this.outputShape[2] % 4 === 0;\n    this.elementsPerThread = [4, 4, this.splitedDimInner];\n    this.outputComponent = isVec4 ? 4 : 1;\n    if (!isVec4) {\n      if (this.outputShape[1] < 16) {\n        this.elementsPerThread[1] = 1;\n      }\n      if (this.outputShape[2] < 16) {\n        this.elementsPerThread[0] = 1;\n      }\n    }\n    this.dispatch = computeDispatch(this.dispatchLayout, [this.outputShape[0], this.outputShape[1], this.outputShape[2], dimInner], this.workgroupSize, this.elementsPerThread);\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.shaderKey = `matMulSplitK_${transposeA}_${transposeB}_${this.elementsPerThread}_${this.outputComponent}`;\n  }\n  getUserCode() {\n    const component = this.outputComponent;\n    const userCode = `\n      ${matMulReadFnSource(false, this.transposeB, false, false, false, component)}\n      fn mm_write(batch: i32, row : i32, col : i32, value : ${typeSnippet(component)}) {\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n          let coords = vec3<i32>(batch, row, col);\n          let flatIndex = getOutputIndexFromCoords(coords);\n          // The problem is that we should initialize output to zero before using.\n          // Otherwise, the original value will be added to the result.\n          for (var i = 0; i < ${component}; i = i + 1) {\n            ${atomicAddSnippet('&result[flatIndex + i]', `${component > 1 ? 'value[i]' : 'value'}`, 'float32')}\n          }\n        }\n      }\n      ${component === 4 ? makeMatMulPackedVec4Source(this.elementsPerThread, this.workgroupSize, this.transposeA, 32, true, this.splitedDimInner) : makeMatMulPackedSource(this.elementsPerThread, this.workgroupSize, this.transposeA, 32, true, this.splitedDimInner)}\n    `;\n    return userCode;\n  }\n}\nexport class BiasActivationProgram {\n  constructor(outputShape, bias = null, activation = null, preluActivationWeights = null) {\n    this.uniforms = '';\n    this.variableNames = ['x'];\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.addBias = bias != null;\n    this.hasPreluActivationWeights = preluActivationWeights != null;\n    this.activation = activation;\n    if (this.addBias) {\n      this.variableNames.push('bias');\n    }\n    if (this.hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    this.shaderKey = `biasActivation_${activation}`;\n  }\n  getUserCode() {\n    return `\n    ${activationFnSnippet(this.activation, this.hasPreluActivationWeights)}\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        var value = getXByOutputIndex(index);\n        ${biasActivationSnippet(this.addBias, this.activation)}\n        setOutputAtIndex(index, value);\n      }\n    }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Fill, util } from '@tensorflow/tfjs-core';\nimport { FillProgram } from '../fill_webgpu';\nexport function fill(args) {\n  const {\n    backend,\n    attrs\n  } = args;\n  const {\n    shape,\n    value\n  } = attrs;\n  let {\n    dtype\n  } = attrs;\n  dtype = dtype || util.inferDtype(value);\n  if (dtype === 'string') {\n    // String type should be handled in CPU memory.\n    const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n    values.fill(value);\n    return backend.makeTensorInfo(shape, dtype, values);\n  } else {\n    const program = new FillProgram(shape);\n    const uniformData = [{\n      type: 'float32',\n      data: [value]\n    }];\n    return backend.runWebGPUProgram(program, [], dtype, uniformData);\n  }\n}\nexport const fillConfig = {\n  kernelName: Fill,\n  backendName: 'webgpu',\n  kernelFunc: fill\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class FillProgram {\n  constructor(shape) {\n    this.variableNames = [];\n    this.outputShape = [];\n    this.uniforms = 'value : f32,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'fill';\n  }\n  getUserCode() {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        setOutputAtIndex(index, uniforms.value);\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reshape, util } from '@tensorflow/tfjs-core';\nexport function reshape(args) {\n  const {\n    inputs,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    shape\n  } = attrs;\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n  util.assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old ` + `shape (${x.shape}) has ${xSize} elements. The new shape and old ` + `shape must have the same number of elements.`);\n  // Backend needs to track refCount for the dataId for reshape op\n  args.backend.incRef(x.dataId);\n  return {\n    dataId: x.dataId,\n    shape: $shape,\n    dtype: x.dtype\n  };\n}\nexport const reshapeConfig = {\n  kernelName: Reshape,\n  backendName: 'webgpu',\n  kernelFunc: reshape\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { simpleAbsImplCPU } from '../kernel_utils/shared';\nimport { UnaryOpType } from '../unary_op_util';\nexport const abs = unaryKernelFunc({\n  opType: UnaryOpType.ABS,\n  cpuKernelImpl: simpleAbsImplCPU\n});\nexport const absConfig = {\n  kernelName: Abs,\n  backendName: 'webgpu',\n  kernelFunc: abs\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, upcastType } from '@tensorflow/tfjs-core';\nimport { BinaryOpComplexProgram } from '../binary_op_complex_webgpu';\nimport { BinaryOpType } from '../binary_op_util';\nimport { BinaryOpProgram } from '../binary_op_webgpu';\nimport { complex } from '../kernels/Complex';\nimport { UnaryOpProgram } from '../unary_op_webgpu';\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opType Op type to create `UnaryOpProgram`.\n * @param cpuKernelImpl Optional. Shared functionality from tfjs-backend-cpu, it\n *     will be involved when necessary.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc({\n  opType,\n  cpuKernelImpl,\n  dtype\n}) {\n  return ({\n    inputs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    const webgpuBackend = backend;\n    const $dtype = dtype || x.dtype;\n    if (webgpuBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webgpuBackend.tensorMap.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values, $dtype);\n      return webgpuBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n    const program = new UnaryOpProgram(x.shape, opType);\n    return webgpuBackend.runWebGPUProgram(program, [x], $dtype);\n  };\n}\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opType Op type to create `BinaryOpProgram`.\n * @param cpuKernelImpl Optional. Shared functionality from tfjs-backend-cpu, it\n *     will be involved when necessary.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({\n  opType,\n  cpuKernelImpl,\n  supportsComplex = false,\n  dtype\n}) {\n  return ({\n    inputs,\n    backend\n  }) => {\n    const {\n      a,\n      b\n    } = inputs;\n    const webgpuBackend = backend;\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webgpuBackend.tensorMap.get(a.dataId);\n      const bData = webgpuBackend.tensorMap.get(b.dataId);\n      let real, imag;\n      if (opType !== BinaryOpType.MUL) {\n        [real, imag] = [[aData.complexTensorInfos.real, bData.complexTensorInfos.real], [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]].map(complexParts => {\n          const [aPart, bPart] = complexParts;\n          const aHandle = {\n            dataId: aPart.dataId,\n            dtype: aPart.dtype,\n            shape: a.shape\n          };\n          const bHandle = {\n            dataId: bPart.dataId,\n            dtype: bPart.dtype,\n            shape: b.shape\n          };\n          const program = new BinaryOpProgram(opType, a.shape, b.shape);\n          return webgpuBackend.runWebGPUProgram(program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n        });\n      } else {\n        const realProgram = new BinaryOpComplexProgram(BinaryOpType.COMPLEX_MULTIPLY_REAL, a.shape, b.shape);\n        const imagProgram = new BinaryOpComplexProgram(BinaryOpType.COMPLEX_MULTIPLY_IMAG, a.shape, b.shape);\n        const inputs = [{\n          dataId: aData.complexTensorInfos.real.dataId,\n          dtype: aData.complexTensorInfos.real.dtype,\n          shape: a.shape\n        }, {\n          dataId: aData.complexTensorInfos.imag.dataId,\n          dtype: aData.complexTensorInfos.imag.dtype,\n          shape: a.shape\n        }, {\n          dataId: bData.complexTensorInfos.real.dataId,\n          dtype: bData.complexTensorInfos.real.dtype,\n          shape: b.shape\n        }, {\n          dataId: bData.complexTensorInfos.imag.dataId,\n          dtype: bData.complexTensorInfos.imag.dtype,\n          shape: b.shape\n        }];\n        real = webgpuBackend.runWebGPUProgram(realProgram, inputs, 'float32');\n        imag = webgpuBackend.runWebGPUProgram(imagProgram, inputs, 'float32');\n      }\n      const complexOutput = complex({\n        inputs: {\n          real,\n          imag\n        },\n        backend: webgpuBackend\n      });\n      webgpuBackend.disposeData(real.dataId);\n      webgpuBackend.disposeData(imag.dataId);\n      // TODO: Implement CPU forwarding for complex inputs.\n      return complexOutput;\n    }\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' || webgpuBackend.shouldExecuteOnCPU([a, b])) && cpuKernelImpl != null) {\n      const aData = webgpuBackend.tensorMap.get(a.dataId).values;\n      const bData = webgpuBackend.tensorMap.get(b.dataId).values;\n      const decodedAVals = a.dtype === 'string' ?\n      // tslint:disable-next-line: no-any\n      backend_util.fromUint8ToStringArray(aData) : aData;\n      const decodedBVals = a.dtype === 'string' ?\n      // tslint:disable-next-line: no-any\n      backend_util.fromUint8ToStringArray(bData) : bData;\n      const [outValues, outShape] = cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n      return webgpuBackend.makeTensorInfo(outShape, $dtype, outValues);\n    }\n    const program = new BinaryOpProgram(opType, a.shape, b.shape);\n    return webgpuBackend.runWebGPUProgram(program, [a, b], $dtype);\n  };\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { getBinaryOpString } from './binary_op_util';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class BinaryOpComplexProgram {\n  constructor(op, aShape, bShape) {\n    this.variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n    this.workgroupSize = [128, 1, 1];\n    this.size = true;\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `binaryOpComplex_${op}`;\n    this.op = op;\n  }\n  getUserCode() {\n    const opStr = getBinaryOpString(this.op, false);\n    const userCode = `\n      fn binaryOpComplex(\n          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {\n        ${opStr}\n      }\n\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let areal = getARealByOutputIndex(index);\n          let aimag = getAImagByOutputIndex(index);\n          let breal = getBRealByOutputIndex(index);\n          let bimag = getBImagByOutputIndex(index);\n          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { getBinaryOpString } from './binary_op_util';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class BinaryOpProgram {\n  constructor(op, aShape, bShape) {\n    this.size = true;\n    this.variableNames = ['A', 'B'];\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.op = op;\n    this.useSharedMemoryWithA = aShape.length <= 1 && bShape.length > 1 && aShape[0] < 128;\n    this.useSharedMemoryWithB = bShape.length <= 1 && aShape.length > 1 && bShape[0] < 128;\n    if (this.useSharedMemoryWithA || this.useSharedMemoryWithB) {\n      this.outputComponent = 1;\n      this.variableComponents = [1, 1];\n      // lastDimensionSize is used as sharedBuf array size, so can not be\n      // used as uniform.\n      this.lastDimensionSize = this.useSharedMemoryWithB ? bShape[0] : aShape[0];\n      this.shaderKey = `binary_${op}_${this.lastDimensionSize}`;\n      this.type = 'shared';\n      // This is an experimental value when using shared memory.\n      // Note that the maximum of workgroup X dimension is 256.\n      this.workgroupSize = [256, 1, 1];\n    } else {\n      const aDivisibleBy4 = aShape.length > 0 && aShape[aShape.length - 1] % 4 === 0;\n      const bDivisibleBy4 = bShape.length > 0 && bShape[bShape.length - 1] % 4 === 0;\n      if (aDivisibleBy4 && bDivisibleBy4) {\n        this.outputComponent = 4;\n        this.variableComponents = [4, 4];\n      } else if (aDivisibleBy4 && (util.isScalarShape(bShape) || bShape[bShape.length - 1] === 1) || bDivisibleBy4 && (util.isScalarShape(aShape) || aShape[aShape.length - 1] === 1)) {\n        this.outputComponent = 4;\n        this.variableComponents = aDivisibleBy4 ? [4, 1] : [1, 4];\n      } else {\n        this.outputComponent = 1;\n        this.variableComponents = [1, 1];\n      }\n      this.type = 'nonshared';\n      this.shaderKey = `binary_${op}_${this.variableComponents}`;\n      // TODO(jiajia.qin@intel.com): Heuristically select a good work group\n      // size.\n      this.workgroupSize = [128, 1, 1];\n    }\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.outputComponent, 1, 1]);\n  }\n  getUserCode() {\n    let userCode;\n    const dType = this.outputComponent === 4 ? 'vec4<f32>' : 'f32';\n    const opFnStr = `\n    fn binaryOperation(a : ${dType}, b : ${dType}) -> ${dType} {\n      ${getBinaryOpString(this.op, this.outputComponent === 4)}\n    };\n    `;\n    if (this.type === 'shared') {\n      const sharedIndexSnippet = this.lastDimensionSize > 1 ? `coords[${this.outputShape.length - 1}]` : '0';\n      const accessDataSnippet = this.useSharedMemoryWithB ? `let a = getAByOutputIndex(index);\n          let b = sharedBuf[${sharedIndexSnippet}];` : `let a = sharedBuf[${sharedIndexSnippet}];\n          let b = getBByOutputIndex(index);`;\n      userCode = `\n        ${opFnStr}\n        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;\n        ${main('index')} {\n          // Fill in the shared memory buffer.\n          let localIndex = i32(localId.x);\n          if(localIndex < ${this.lastDimensionSize}) {\n            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB ? 'B' : 'A'}[localIndex]);\n          }\n          workgroupBarrier();\n\n          if(index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            ${accessDataSnippet}\n            setOutputAtIndex(index, binaryOperation(a, b));\n          }\n        }\n        `;\n    } else {\n      userCode = `\n       ${opFnStr}\n       ${main('index')} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index * ${this.outputComponent});\n           let a = ${dType}(getAByOutputCoords(coords));\n           let b = ${dType}(getBByOutputCoords(coords));\n           setOutputAtIndex(index, binaryOperation(a, b));\n         }\n       }\n       `;\n    }\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Complex } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\n/**\n * Complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    real,\n    imag\n  } = inputs;\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.tensorMap.get(complexInfo.dataId);\n  const realTensorInfo = identity({\n    inputs: {\n      x: real\n    },\n    backend\n  });\n  const imagTensorInfo = identity({\n    inputs: {\n      x: imag\n    },\n    backend\n  });\n  complex.complexTensorInfos = {\n    real: realTensorInfo,\n    imag: imagTensorInfo\n  };\n  return complexInfo;\n}\nexport const complexConfig = {\n  kernelName: Complex,\n  backendName: 'webgpu',\n  kernelFunc: complex\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Identity } from '@tensorflow/tfjs-core';\nexport function identity(args) {\n  const {\n    inputs\n  } = args;\n  const {\n    x\n  } = inputs;\n  args.backend.incRef(x.dataId);\n  return {\n    dataId: x.dataId,\n    shape: x.shape,\n    dtype: x.dtype\n  };\n}\nexport const identityConfig = {\n  kernelName: Identity,\n  backendName: 'webgpu',\n  kernelFunc: identity\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getUnaryOpString } from './unary_op_util';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class UnaryOpProgram {\n  constructor(outputShape, op, uniforms = '') {\n    this.variableNames = ['A'];\n    this.size = true;\n    // TODO(jiajia.qin@intel.com): Heuristically select a good work group size.\n    const workgroupSizeX = 128;\n    this.workgroupSize = [workgroupSizeX, 1, 1];\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.op = op;\n    if (uniforms !== '') {\n      this.uniforms = uniforms;\n    }\n    this.shaderKey = `unary_${op}`;\n  }\n  getUserCode() {\n    return `\n      fn unaryOperation(a : f32) -> f32 {\n        ${getUnaryOpString(this.op, false)}\n      }\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let a = getAByOutputIndex(index);\n          setOutputAtIndex(index, unaryOperation(a));\n        }\n      }\n      `;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\nconst {\n  addImpl: addImplCPU,\n  castImpl: castImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  floorDivImpl: floorDivImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  greaterImpl: greaterImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  lessImpl: lessImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  scatterImpl: scatterImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU\n} = shared;\nexport { addImplCPU, castImplCPU, ceilImplCPU, concatImplCPU, equalImplCPU, expImplCPU, expm1ImplCPU, floorImplCPU, floorDivImplCPU, gatherNdImplCPU, gatherV2ImplCPU, greaterEqualImplCPU, greaterImplCPU, lessEqualImplCPU, lessImplCPU, logImplCPU, maxImplCPU, maximumImplCPU, minimumImplCPU, multiplyImplCPU, prodImplCPU, negImplCPU, notEqualImplCPU, scatterImplCPU, simpleAbsImplCPU, sliceImplCPU, stridedSliceImplCPU, stringNGramsImplCPU, subImplCPU, rangeImplCPU, rsqrtImplCPU, tileImplCPU, topKImplCPU, transposeImplCPU, uniqueImplCPU };\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Acos } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const acos = unaryKernelFunc({\n  opType: UnaryOpType.ACOS\n});\nexport const acosConfig = {\n  kernelName: Acos,\n  backendName: 'webgpu',\n  kernelFunc: acos\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Acosh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const acosh = unaryKernelFunc({\n  opType: UnaryOpType.ACOSH\n});\nexport const acoshConfig = {\n  kernelName: Acosh,\n  backendName: 'webgpu',\n  kernelFunc: acosh\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Add } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { addImplCPU as cpuAdd } from '../kernel_utils/shared';\nexport const addKernelFunc = binaryKernelFunc({\n  opType: BinaryOpType.ADD,\n  cpuKernelImpl: cpuAdd,\n  supportsComplex: true\n});\nexport const addConfig = {\n  kernelName: Add,\n  backendName: 'webgpu',\n  kernelFunc: addKernelFunc\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, upcastType } from '@tensorflow/tfjs-core';\nimport { AddNPackedProgram } from '../addn_packed_webgpu';\nimport { identity } from './Identity';\nexport function addN(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({\n      inputs: {\n        x: tensors[0]\n      },\n      backend\n    });\n  }\n  const dtype = tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  const program = new AddNPackedProgram(shapes);\n  return backend.runWebGPUProgram(program, tensors, dtype);\n}\nexport const addNConfig = {\n  kernelName: AddN,\n  backendName: 'webgpu',\n  kernelFunc: addN\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class AddNPackedProgram {\n  constructor(shapes) {\n    this.workPerThread = 1;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = shapes[0];\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]);\n    this.shaderKey = 'addN';\n  }\n  getUserCode() {\n    const snippets = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`let v${variable} = get${variable}ByOutputCoords(coords);`);\n    });\n    // Calculate the sum of all elements.\n    const operation = this.variableNames.map(variable => {\n      return `v${variable}`;\n    }).join(' + ');\n    const userCode = `\n      ${main('index')} {\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if (flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            ${snippets.join('\\n        ')}\n            setOutputAtIndex(flatIndex, ${operation});\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { All } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nexport function all(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    keepDims,\n    axis\n  } = attrs;\n  return reduce(x, axis, keepDims, 'all', backend);\n}\nexport const allConfig = {\n  kernelName: All,\n  backendName: 'webgpu',\n  kernelFunc: all\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, sumOutType, util } from '@tensorflow/tfjs-core';\nimport { reshape } from '../kernels/Reshape';\nimport { transpose } from '../kernels/Transpose';\nimport { ReduceProgram } from '../reduce_webgpu';\nimport { maxImplCPU } from './shared';\nimport { prodImplCPU } from './shared';\nconst RETURN_TYPES = {\n  'mean': 'float32',\n  'all': 'bool',\n  'any': 'bool'\n};\nexport function reduce(x, axis, keepDims, reduceType, backend) {\n  const xRank = x.shape.length;\n  const toDispose = [];\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let input = x;\n  if (permutedAxes != null) {\n    input = transpose({\n      inputs: {\n        x\n      },\n      attrs: {\n        perm: permutedAxes\n      },\n      backend\n    });\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(input);\n  }\n  backend_util.assertAxesAreInnerMostDims(reduceType, axes, xRank);\n  const [reduceOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(input.shape, axes);\n  let resOutShape = reduceOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    resOutShape = backend_util.expandShapeToKeepDim(reduceOutShape, origAxes);\n  }\n  let res;\n  if ((reduceType === 'max' || reduceType === 'prod') && backend.shouldExecuteOnCPU([input])) {\n    const xVals = backend.tensorMap.get(input.dataId).values;\n    switch (reduceType) {\n      case 'max':\n        const outValues = maxImplCPU(xVals, util.sizeFromShape(reduceShape), resOutShape, x.dtype);\n        res = backend.makeTensorInfo(resOutShape, x.dtype, outValues);\n        break;\n      case 'prod':\n        const {\n          outVals,\n          outShape,\n          outDtype\n        } = prodImplCPU(input.shape, input.dtype, xVals, axes);\n        res = backend.makeTensorInfo(outShape, outDtype, outVals);\n        break;\n      default:\n        throw new Error(`${reduceType} CPU implementation is not yet supported.`);\n    }\n  } else {\n    const inSize = util.sizeFromShape(reduceShape);\n    const xSize = util.sizeFromShape(input.shape);\n    const batchSize = xSize / inSize;\n    const reduceInfo = {\n      windowSize: inSize,\n      inSize,\n      batchSize,\n      outSize: 1\n    };\n    const dtype = RETURN_TYPES[reduceType] || sumOutType(x.dtype);\n    const uniformData = [{\n      type: 'int32',\n      data: [inSize]\n    }];\n    const program = new ReduceProgram(reduceInfo, reduceType, backend.device.limits.maxComputeWorkgroupSizeX);\n    const reduced = backend.runWebGPUProgram(program, [input], dtype, uniformData);\n    toDispose.push(reduced);\n    res = reshape({\n      inputs: {\n        x: reduced\n      },\n      attrs: {\n        shape: resOutShape\n      },\n      backend\n    });\n  }\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return res;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose, util } from '@tensorflow/tfjs-core';\nimport { transposeImplCPU as cpuTranspose } from '../kernel_utils/shared';\nimport { TransposeSharedProgram } from '../transpose_shared_webgpu';\nimport { TransposeProgram } from '../transpose_webgpu';\nexport function transpose(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    perm\n  } = attrs;\n  const webgpuBackend = backend;\n  const xRank = x.shape.length;\n  const newShape = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = webgpuBackend.tensorMap.get(x.dataId);\n    const values = xData.values;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n  if (x.shape.length === 2 && util.arraysEqual(perm, [1, 0])) {\n    const program = new TransposeSharedProgram(x.shape, perm);\n    return webgpuBackend.runWebGPUProgram(program, [x], x.dtype);\n  }\n  const program = new TransposeProgram(x.shape, perm);\n  return webgpuBackend.runWebGPUProgram(program, [x], x.dtype);\n}\nexport const transposeConfig = {\n  kernelName: Transpose,\n  backendName: 'webgpu',\n  kernelFunc: transpose\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch } from './webgpu_util';\nexport class TransposeSharedProgram {\n  constructor(aShape, newDim) {\n    this.variableNames = ['A'];\n    // Note that the maximum number of workgroup invocations by webgpu is 256.\n    this.workgroupSize = [16, 16, 1];\n    const outputShape = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.dispatchLayout = {\n      x: [0],\n      y: [1]\n    };\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, [1, 1, 1]);\n    this.shaderKey = 'transposeShared';\n  }\n  getUserCode() {\n    util.assert(this.workgroupSize[0] === this.workgroupSize[1], () => `Must be a square tile, current tile shape is ${this.workgroupSize[0]} x ${this.workgroupSize[1]}`);\n    const tileSize = this.workgroupSize[0];\n    const userCode = `\n      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0] + 1}>, ${this.workgroupSize[0]}>;\n      ${main()} {\n        var x = i32(workgroupId.x) * ${tileSize} + i32(localId.x);\n        var y = i32(workgroupId.y) * ${tileSize} + i32(localId.y);\n        let width = uniforms.outShape[0];\n        let height = uniforms.outShape[1];\n        if (x < width && y < height) {\n          tile[localId.y][localId.x] = f32(A[y * width + x]);\n        }\n        workgroupBarrier();\n\n        x = i32(workgroupId.y) * ${tileSize} + i32(localId.x);\n        y = i32(workgroupId.x) * ${tileSize} + i32(localId.y);\n        if (x < height && y < width) {\n          setOutputAtIndex((y * height + x), tile[localId.x]\n            [localId.y]);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType, getCoordsXYZ, getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class TransposeProgram {\n  constructor(aShape, newDim) {\n    this.variableNames = ['A'];\n    this.workPerThread = 1;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    const outputShape = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]);\n    this.newDim = newDim;\n    this.shaderKey = `transpose_${newDim}`;\n  }\n  getUserCode() {\n    const dtype = getCoordsDataType(this.outputShape.length);\n    const switched = getSwitchedCoords(this.newDim);\n    const userCode = `\n      ${main('index')} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(\n              ${dtype}(${switched}), uniforms.aShape)]);\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\nexport function getSwitchedCoords(newDim) {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = `coords.${getCoordsXYZ(i)}`;\n  }\n  return switchedCoords.join();\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class ReduceProgram {\n  constructor(reduceInfo, reduceType, maxComputeWorkgroupSizeX) {\n    this.variableNames = ['x'];\n    this.uniforms = 'reduceSize : i32,';\n    this.size = true;\n    this.inputShape = [reduceInfo.batchSize, reduceInfo.inSize];\n    const [outputShape] = backend_util.computeOutAndReduceShapes(this.inputShape, [1]);\n    this.outputShape = outputShape.length === 0 ? [1] : outputShape;\n    // If reduceSize |reduceInfo.inSize| is very large, the I/O accessing will\n    // become the bottleneck. Increasing workgroupSize can reduce the times of\n    // accessing global memory. The threshold value is just to make sure the\n    // reduceSize is large enough for a bigger workgroupSize.\n    if (reduceInfo.inSize >= 32768 && maxComputeWorkgroupSizeX >= 512) {\n      this.workgroupSize = [512, 1, 1];\n    } else if (reduceInfo.inSize >= 4096) {\n      this.workgroupSize = [256, 1, 1];\n    } else {\n      this.workgroupSize = [64, 1, 1];\n    }\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    // A work group only outputs a data, so we transfer [1, 1, 1] to compute\n    // dispatch size.\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, [1, 1, 1]);\n    this.reduceType = reduceType;\n    this.shaderKey = `reduce_${reduceType}`;\n  }\n  getUserCode() {\n    let reduceOp = ``;\n    let initValue = '0.0';\n    const workgroupSizeX = this.workgroupSize[0];\n    if (this.reduceType === 'min' || this.reduceType === 'max') {\n      reduceOp = `\n         if (isnan(candidate)) {\n          bestValue = uniforms.NAN;\n         } else if (!isnan(bestValue) && candidate ${this.reduceType === 'min' ? '<' : '>'} bestValue)\n           {  bestValue = candidate; }`;\n      initValue = 'f32(x[offset])';\n    } else if (this.reduceType === 'sum' || this.reduceType === 'mean') {\n      reduceOp = ' bestValue = bestValue + candidate; ';\n    } else if (this.reduceType === 'prod') {\n      reduceOp = ' bestValue = bestValue * candidate; ';\n      initValue = '1.0';\n    } else if (this.reduceType === 'all') {\n      reduceOp = ' bestValue = f32(bestValue >= 1.0 && candidate >= 1.0); ';\n      initValue = '1.0';\n    } else if (this.reduceType === 'any') {\n      reduceOp = ' bestValue = f32(bestValue >= 1.0 || candidate >= 1.0); ';\n      initValue = '0.0';\n    }\n    const outputSnippet = this.reduceType === 'mean' ?\n    // tslint:disable-next-line:max-line-length\n    `setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));` : `setOutputAtIndex(outputIndex, bestValue);`;\n    const sharedMemorySnippet = `\n         var<workgroup> xBestValues : array<f32, ${workgroupSizeX}>;\n       `;\n    const userCode = `\n       fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n       }\n\n       ${sharedMemorySnippet}\n       fn getOffset(outputIndex : i32) -> i32 {\n         let outputCoords = getCoordsFromIndex(outputIndex);\n         let offset = ${this.outputShape.length === 1 ? 'outputCoords' : 'outputCoords[0]'} * uniforms.reduceSize;\n          return offset;\n       }\n       ${main('index')} {\n         let outputIndex = index / ${workgroupSizeX};\n         let offset = getOffset(outputIndex);\n         var bestValue = ${initValue};\n         let Length = uniforms.reduceSize;\n         let WorkPerThread = DIV_CEIL(u32(Length), ${workgroupSizeX}u);\n         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;\n             k = k + ${workgroupSizeX}) {\n           let candidate = f32(x[offset + k]);\n           ${reduceOp}\n         }\n         xBestValues[localId.x] = bestValue;\n         workgroupBarrier();\n\n         var reduceSize = min(u32(Length), ${workgroupSizeX}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            ${reduceOp}\n            xBestValues[localId.x] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (localId.x == 0u && outputIndex < uniforms.size) {\n          ${outputSnippet}\n        }\n       }\n     `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Any } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nexport function any(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    keepDims,\n    axis\n  } = attrs;\n  return reduce(x, axis, keepDims, 'any', backend);\n}\nexport const anyConfig = {\n  kernelName: Any,\n  backendName: 'webgpu',\n  kernelFunc: any\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMax, backend_util, util } from '@tensorflow/tfjs-core';\nimport { ArgMinMaxProgram } from '../argminmax_webgpu';\nimport { transpose } from './Transpose';\nexport function argMax(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis\n  } = attrs;\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const program = new ArgMinMaxProgram($x.shape, axes[0], 'max');\n  const uniformData = [{\n    type: 'float32',\n    data: [Number.NEGATIVE_INFINITY]\n  }];\n  const out = backend.runWebGPUProgram(program, [$x], 'int32', uniformData);\n  intermediateTensorInfos.forEach(t => backend.disposeData(t.dataId));\n  return out;\n}\nexport const argMaxConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgpu',\n  kernelFunc: argMax\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { getCoordsXYZ, getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class ArgMinMaxProgram {\n  constructor(inputShape, axis, reduceType) {\n    this.workgroupSize = [64, 1, 1];\n    this.variableNames = ['x'];\n    this.uniforms = 'infinityValue : f32,';\n    this.size = true;\n    const axes = [axis];\n    this.op = reduceType === 'min' ? '<' : '>';\n    // |outShape| is the shape with the removed axis\n    const [outputShape, reduceShape] = backend_util.computeOutAndReduceShapes(inputShape, axes);\n    this.outputShape = outputShape.length === 0 ? [1] : outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    // The shared algorithm is mainly used for large reduce size. It fully\n    // utilizes the threads in one workgroup to do the reduction. However,\n    // when the reduce size is very small, it's better to use the plain\n    // algorithm to reduce the number of workgroups to speedup. The threthold\n    // can be further tuned.\n    if (util.sizeFromShape(reduceShape) < 32) {\n      this.type = 'plain';\n      this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    } else {\n      this.type = 'shared';\n      // A work group only outputs a data, so we transfer [1, 1, 1] to compute\n      // dispatch size.\n      this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, [1, 1, 1]);\n    }\n    this.inputShape = inputShape;\n    this.shaderKey = `argMinMax_${this.op}_${this.type}`;\n  }\n  getUserCode() {\n    const workgroupSizeX = this.workgroupSize[0];\n    const getInputShapeLastDim = () => {\n      if (this.inputShape.length === 1) {\n        return 'uniforms.xShape';\n      } else {\n        return `uniforms.xShape.${getCoordsXYZ(this.inputShape.length - 1)}`;\n      }\n    };\n    const splitOutputCoords = () => {\n      let snippet = '';\n      if (this.outputShape.length === 1) {\n        if (this.inputShape.length !== 1) {\n          snippet += 'outputCoords,';\n        }\n      } else {\n        for (let i = 0; i < this.outputShape.length; i++) {\n          snippet += `outputCoords.${getCoordsXYZ(i)},`;\n        }\n      }\n      return snippet;\n    };\n    if (this.type === 'shared') {\n      const sharedMemorySnippet = `\n      var<workgroup> xBestIndices : array<i32, ${workgroupSizeX}>;\n      var<workgroup> xBestValues : array<f32, ${workgroupSizeX}>;\n    `;\n      const userCode = `\n      fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n      }\n\n      ${sharedMemorySnippet}\n\n      ${main('index')} {\n        let outputIndex = index / ${workgroupSizeX};\n        let reduceLength = ${getInputShapeLastDim()};\n\n        var bestIndex = i32(localId.x);\n        var bestValue = uniforms.infinityValue;\n        let outputCoords = getCoordsFromIndex(outputIndex);\n        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;\n            k = k + ${workgroupSizeX}) {\n          let candidate = getX(${splitOutputCoords()} k);\n          if (!isnan(candidate) && candidate ${this.op} bestValue) {\n            bestValue = candidate;\n            bestIndex = k;\n          }\n        }\n        xBestValues[localId.x] = bestValue;\n        xBestIndices[localId.x] = bestIndex;\n        workgroupBarrier();\n\n        var reduceSize = min(u32(reduceLength), ${workgroupSizeX}u);\n        for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n            currentSize = reduceSize / 2u) {\n          let interval = DIV_CEIL(reduceSize, 2u);\n          if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              xBestValues[localId.x] = bestValue;\n              xBestIndices[localId.x] = xBestIndices[localId.x + interval];\n            }\n          }\n          reduceSize = interval;\n          workgroupBarrier();\n        }\n\n        if (localId.x == 0u && outputIndex < uniforms.size) {\n          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);\n        }\n      }\n    `;\n      return userCode;\n    } else {\n      const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let outputCoords = getCoordsFromIndex(index);\n          var bestIndex = 0;\n          var bestValue = getX(${splitOutputCoords()} 0);\n          let reduceLength = ${getInputShapeLastDim()};\n          for (var i = 1; i < reduceLength; i++) {\n            let candidate = getX(${splitOutputCoords()} i);\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              bestIndex = i;\n            }\n          }\n          setOutputAtIndexI32(index, bestIndex);\n        }\n      }\n      `;\n      return userCode;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMin, backend_util, util } from '@tensorflow/tfjs-core';\nimport { ArgMinMaxProgram } from '../argminmax_webgpu';\nimport { transpose } from './Transpose';\nexport function argMin(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis\n  } = attrs;\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n  const program = new ArgMinMaxProgram($x.shape, axes[0], 'min');\n  const uniformData = [{\n    type: 'float32',\n    data: [Number.POSITIVE_INFINITY]\n  }];\n  const out = backend.runWebGPUProgram(program, [$x], 'int32', uniformData);\n  intermediateTensorInfos.forEach(t => backend.disposeData(t.dataId));\n  return out;\n}\nexport const argMinConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgpu',\n  kernelFunc: argMin\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Asin } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const asin = unaryKernelFunc({\n  opType: UnaryOpType.ASIN\n});\nexport const asinConfig = {\n  kernelName: Asin,\n  backendName: 'webgpu',\n  kernelFunc: asin\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Asinh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const asinh = unaryKernelFunc({\n  opType: UnaryOpType.ASINH\n});\nexport const asinhConfig = {\n  kernelName: Asinh,\n  backendName: 'webgpu',\n  kernelFunc: asinh\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atan } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const atan = unaryKernelFunc({\n  opType: UnaryOpType.ATAN\n});\nexport const atanConfig = {\n  kernelName: Atan,\n  backendName: 'webgpu',\n  kernelFunc: atan\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atan2 } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nexport const atan2 = binaryKernelFunc({\n  opType: BinaryOpType.ATAN2\n});\nexport const atan2Config = {\n  kernelName: Atan2,\n  backendName: 'webgpu',\n  kernelFunc: atan2\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atanh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const atanh = unaryKernelFunc({\n  opType: UnaryOpType.ATANH\n});\nexport const atanhConfig = {\n  kernelName: Atanh,\n  backendName: 'webgpu',\n  kernelFunc: atanh\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool, backend_util } from '@tensorflow/tfjs-core';\nimport { poolImpl } from './Pool_impl';\nexport function avgPool(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const dilations = 1;\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  return poolImpl(x, convInfo, 'avg', backend);\n}\nexport const avgPoolConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgpu',\n  kernelFunc: avgPool\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { PoolWithFilterSizeEqualsOneProgram } from '../pool_filtersizeone_webgpu';\nimport { Pool2DProgram } from '../pool_webgpu';\nimport { identity } from './Identity';\nimport { max } from './Max';\nimport { mean } from './Mean';\nimport { reshape } from './Reshape';\nexport function poolImpl(x, convInfo, poolType, backend) {\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n  if (convInfo.filterWidth === convInfo.inWidth && convInfo.filterHeight === convInfo.inHeight && convInfo.batchSize === 1 && convInfo.padInfo.type === 'VALID') {\n    const length = x.shape.length;\n    const reshapeX = reshape({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        shape: [x.shape[length - 3] * x.shape[length - 2] /* height * width */, x.shape[length - 1] /* channel */]\n      }\n    });\n    let reduceX;\n    if (poolType === 'avg') {\n      reduceX = mean({\n        inputs: {\n          x: reshapeX\n        },\n        backend,\n        attrs: {\n          axis: 0,\n          keepDims: false\n        }\n      });\n    } else {\n      util.assert(poolType === 'max', () => `Invalid pool type ${poolType}`);\n      reduceX = max({\n        inputs: {\n          x: reshapeX\n        },\n        backend,\n        attrs: {\n          reductionIndices: 0,\n          keepDims: false\n        }\n      });\n    }\n    const result = reshape({\n      inputs: {\n        x: reduceX\n      },\n      backend,\n      attrs: {\n        shape: convInfo.outShape\n      }\n    });\n    backend.disposeData(reshapeX.dataId);\n    backend.disposeData(reduceX.dataId);\n    return result;\n  }\n  let program;\n  const dimensions = [{\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }];\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1) {\n    program = new PoolWithFilterSizeEqualsOneProgram(convInfo);\n  } else {\n    if (poolType === 'avg') {\n      program = new Pool2DProgram(convInfo, 'avg');\n    } else {\n      util.assert(poolType === 'max', () => `Invalid pool type ${poolType}`);\n      program = new Pool2DProgram(convInfo, 'max');\n    }\n    dimensions.push({\n      type: 'int32',\n      data: [convInfo.padInfo.top, convInfo.padInfo.left]\n    }, {\n      type: 'int32',\n      data: [convInfo.dilationHeight, convInfo.dilationWidth]\n    }, {\n      type: 'int32',\n      data: [convInfo.inHeight, convInfo.inWidth]\n    }, {\n      type: 'int32',\n      data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n    });\n  }\n  return backend.runWebGPUProgram(program, [x], x.dtype, dimensions);\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class PoolWithFilterSizeEqualsOneProgram {\n  constructor(convInfo) {\n    this.variableNames = ['x'];\n    this.uniforms = `strides : vec2<i32>,`;\n    this.workgroupSize = [256, 1, 1];\n    this.size = true;\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'poolWithFilterSizeEqualsOne';\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n\n          let xRCCorner = coords.yz * uniforms.strides;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          let value = getX(batch, xRCorner, xCCorner, d);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class Pool2DProgram {\n  constructor(convInfo, poolType, computePositions = false, flattenPositions = false, includeBatchIndex = false) {\n    this.variableNames = ['x'];\n    this.uniforms = `strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,`;\n    // TODO(jiajia.qin@intel.com): Dynamically choose different workgroupSize for\n    // different output shapes.\n    this.workgroupSize = [128, 1, 1];\n    this.size = true;\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.poolType = poolType;\n    this.computePositions = computePositions;\n    this.flattenPositions = flattenPositions;\n    this.includeBatchIndex = includeBatchIndex;\n    this.shaderKey = `pool2D_${poolType}_${computePositions}_${flattenPositions}_${includeBatchIndex}`;\n  }\n  getUserCode() {\n    let updateSnippet;\n    if (this.poolType === 'avg') {\n      updateSnippet = `resultValue = resultValue + value; count = count + 1.0;`;\n    } else if (this.computePositions) {\n      const positionStr = this.flattenPositions ? this.includeBatchIndex ? `((batch * uniforms.xShape[1] + xR) * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d` : `(xR * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d` : `wR * uniforms.filterDims.y + wC`;\n      updateSnippet = `let currMaxValue = mix(value, maxValue, maxValueFound);\n      if (value >= currMaxValue) {\n        maxValue = value;\n        maxValueFound = 1.0;\n        maxPosition = ${positionStr};\n      }`;\n    } else {\n      updateSnippet = `resultValue = max(value, resultValue);`;\n    }\n    let returnValue = `resultValue`;\n    if (this.poolType === 'avg') {\n      returnValue = `resultValue / max(count, 1.0)`;\n    }\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n          let xRCCorner = vec2<i32>(coords.yz) * uniforms.strides - uniforms.pads;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          ${this.computePositions ? `var maxValue = 0.0;\n            var maxValueFound = 0.0;\n            var maxPosition = 0;` : `var resultValue = ${this.poolType === 'avg' ? '0.0' : '-1.0 / pow(10.0, -20.0)'};`}\n\n          var count = 0.0;\n          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilations.x) {\n            let xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilations.y) {\n              let xC = xCCorner + wC;\n              if (xC < 0 || xC >= uniforms.convDims.y) {\n                continue;\n              }\n\n              let value = getX(batch, xR, xC, d);\n              ${updateSnippet}\n            }\n          }\n\n          ${this.computePositions ? `setOutputAtIndexI32(index, maxPosition);` : `setOutputAtIndex(index, ${returnValue});`}\n        }\n      }\n    `;\n    return userCode;\n  }\n}\nexport class Pool3DProgram {\n  constructor(convInfo, poolType, computePositions = false, flattenPositions = false, includeBatchIndex = false) {\n    this.variableNames = ['x'];\n    this.uniforms = `strides : vec3<i32>, pads : vec3<i32>, convDims : vec3<i32>, filterDims : vec3<i32>,`;\n    this.workgroupSize = [128, 1, 1];\n    this.size = true;\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.poolType = poolType;\n    this.computePositions = computePositions;\n    this.flattenPositions = flattenPositions;\n    this.includeBatchIndex = includeBatchIndex;\n    this.shaderKey = `pool3D_${poolType}_${computePositions}_${flattenPositions}_${includeBatchIndex}`;\n  }\n  getUserCode() {\n    let updateSnippet;\n    if (this.poolType === 'avg') {\n      updateSnippet = `resultValue += value; count += 1.0;`;\n    } else if (this.computePositions) {\n      const positionStr = this.flattenPositions ? this.includeBatchIndex ? `(((batch * uniforms.xShape.y + xD) * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch` : `((xD * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch` : `wD * uniforms.filterDims.y * uniforms.filterDims.y + wR * uniforms.filterDims.z + wC`;\n      updateSnippet = `let currMaxValue = mix(value, maxValue, maxValueFound);\n      if (value >= currMaxValue) {\n        maxValue = value;\n        maxValueFound = 1.0;\n        maxPosition = ${positionStr};\n      }`;\n    } else {\n      updateSnippet = `resultValue = max(value, resultValue);`;\n    }\n    let returnValue = `resultValue`;\n    if (this.poolType === 'avg') {\n      returnValue = `resultValue / max(count, 1.0)`;\n    }\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords.x;\n          let ch = coords.u;\n\n          let xCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;\n          let xDCorner = xCorner.x;\n          let xRCorner = xCorner.y;\n          let xCCorner = xCorner.z;\n\n          ${this.computePositions ? `var maxValue = 0.0;\n            var maxValueFound = 0.0;\n            var maxPosition = 0;` : `var resultValue = ${this.poolType === 'avg' ? '0.0' : '-1.0 / pow(10.0, -20.0)'};`}\n\n          var count = 0.0;\n          for (var wD = 0; wD < uniforms.filterDims.x; wD++) {\n            let xD = xDCorner + wD;\n            if (xD < 0 || xD >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wR = 0; wR < uniforms.filterDims.y; wR++) {\n              let xR = xRCorner + wR;\n              if (xR < 0 || xR >= uniforms.convDims.y) {\n                continue;\n              }\n\n              for (var wC = 0; wC < uniforms.filterDims.z; wC++) {\n                let xC = xCCorner + wC;\n                if (xC < 0 || xC >= uniforms.convDims.z) {\n                  continue;\n                }\n\n                let value = getX(batch, xD, xR, xC, ch);\n                ${updateSnippet}\n              }\n            }\n          }\n\n          ${this.computePositions ? `setOutputAtIndexI32(index, maxPosition);` : `setOutputAtIndex(index, ${returnValue});`}\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nexport function max(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    reductionIndices,\n    keepDims\n  } = attrs;\n  return reduce(x, reductionIndices, keepDims, 'max', backend);\n}\nexport const maxConfig = {\n  kernelName: Max,\n  backendName: 'webgpu',\n  kernelFunc: max\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Mean } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nexport function mean(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    keepDims,\n    axis\n  } = attrs;\n  return reduce(x, axis, keepDims, 'mean', backend);\n}\nexport const meanConfig = {\n  kernelName: Mean,\n  backendName: 'webgpu',\n  kernelFunc: mean\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3D, backend_util } from '@tensorflow/tfjs-core';\nimport { Pool3DProgram } from '../pool_webgpu';\nexport function avgPool3D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode\n  } = attrs;\n  const dilations = [1, 1, 1];\n  const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);\n  const avgPoolProgram = new Pool3DProgram(convInfo, 'avg');\n  const dimensions = [{\n    type: 'int32',\n    data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.inDepth, convInfo.inHeight, convInfo.inWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n  }];\n  return backend.runWebGPUProgram(avgPoolProgram, [x], x.dtype, dimensions);\n}\nexport const avgPool3DConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'webgpu',\n  kernelFunc: avgPool3D\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3DGrad, backend_util } from '@tensorflow/tfjs-core';\nimport { AvgPool3DBackpropProgram } from '../avg_pool_backprop_webgpu';\nexport function avgPool3DGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input\n  } = inputs;\n  const x = input;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n  const program = new AvgPool3DBackpropProgram(convInfo);\n  const avgMultiplier = 1 / (convInfo.filterDepth * convInfo.filterHeight * convInfo.filterWidth);\n  const uniformData = [{\n    type: 'int32',\n    data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterDepth - 1 - convInfo.padInfo.front, convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top, convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outDepth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outHeight]\n  }, {\n    type: 'int32',\n    data: [convInfo.outWidth]\n  }, {\n    type: 'float32',\n    data: [avgMultiplier]\n  }];\n  return backend.runWebGPUProgram(program, [dy], x.dtype, uniformData);\n}\nexport const avgPool3DGradConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'webgpu',\n  kernelFunc: avgPool3DGrad\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class AvgPool2DBackpropProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy'];\n    this.uniforms = `strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32, avgMultiplier : f32,`;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = convInfo.inShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `avgPool2DBackprop`;\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d = coords[3];\n\n        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;\n        let dyRCorner = dyRCCorner.x;\n        let dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR = wR + uniforms.dilations[0]) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC = wC + uniforms.dilations[1]) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            let dyValue = getDy(batch, idyR, idyC, d);\n\n            dotProd = dotProd + dyValue * uniforms.avgMultiplier;\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `;\n    return userCode;\n  }\n}\nexport class AvgPool3DBackpropProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy'];\n    this.uniforms = `strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,\n       outDepth : i32, outHeight : i32, outWidth : i32, avgMultiplier : f32,`;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = convInfo.inShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `avgPool3DBackprop`;\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let ch = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyDCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {\n          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);\n\n          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {\n            continue;\n          }\n          let idyD = i32(dyD);\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              dotProd += dyValue * uniforms.avgMultiplier;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPoolGrad, backend_util } from '@tensorflow/tfjs-core';\nimport { AvgPool2DBackpropProgram } from '../avg_pool_backprop_webgpu';\nimport { assertNotComplex } from '../webgpu_util';\nexport function avgPoolGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input\n  } = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {\n    filterSize,\n    strides,\n    pad\n  } = attrs;\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad);\n  const program = new AvgPool2DBackpropProgram(convInfo);\n  const avgMultiplier = 1 / (convInfo.filterHeight * convInfo.filterWidth);\n  const uniformData = [{\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top, convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.dilationHeight, convInfo.dilationWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outHeight]\n  }, {\n    type: 'int32',\n    data: [convInfo.outWidth]\n  }, {\n    type: 'float32',\n    data: [avgMultiplier]\n  }];\n  return backend.runWebGPUProgram(program, [dy], x.dtype, uniformData);\n}\nexport const avgPoolGradConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'webgpu',\n  kernelFunc: avgPoolGrad\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BatchMatMul } from '@tensorflow/tfjs-core';\nimport { batchMatMulImpl } from './BatchMatMul_impl';\nexport function batchMatMul(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    a,\n    b\n  } = inputs;\n  const {\n    transposeA,\n    transposeB\n  } = attrs;\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend\n  });\n}\nexport const batchMatMulConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'webgpu',\n  kernelFunc: batchMatMul\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BatchToSpaceND, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { transpose } from './Transpose';\nexport const batchToSpaceND = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockShape,\n    crops\n  } = attrs;\n  util.assert(x.shape.length <= 4, () => 'batchToSpaceND for rank > 4 with a WebGPU backend not ' + 'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n  const toDispose = [];\n  const reshapedIntermediate = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: reshaped\n    }\n  });\n  const transposedIntermediate = transpose({\n    inputs: {\n      x: reshapedIntermediate\n    },\n    backend,\n    attrs: {\n      perm: permuted\n    }\n  });\n  const reshapedIntermediate2 = reshape({\n    inputs: {\n      x: transposedIntermediate\n    },\n    backend,\n    attrs: {\n      shape: reshapedPermuted\n    }\n  });\n  const sliced = slice({\n    inputs: {\n      x: reshapedIntermediate2\n    },\n    backend,\n    attrs: {\n      begin: sliceBeginCoords,\n      size: sliceSize\n    }\n  });\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return sliced;\n};\nexport const batchToSpaceNDConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgpu',\n  kernelFunc: batchToSpaceND\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { sliceImplCPU } from '../kernel_utils/shared';\nimport { SliceProgram } from '../slice_webgpu';\nexport function slice(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    begin,\n    size\n  } = attrs;\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xTensorData = backend.tensorMap.get(x.dataId);\n    const outValues = sliceImplCPU(xTensorData.values, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n  // TODO(xing.xu): Add shadow slice support.\n  const program = new SliceProgram($begin, $size);\n  const uniformData = [{\n    type: 'int32',\n    data: $begin\n  }];\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\nexport const sliceConfig = {\n  kernelName: Slice,\n  backendName: 'webgpu',\n  kernelFunc: slice\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType, getCoordsXYZ, getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class SliceProgram {\n  constructor(start, destSize) {\n    this.variableNames = ['source'];\n    this.workPerThread = 1;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]);\n    this.start = start;\n    this.uniforms = `start : ${getCoordsDataType(start.length)}, `;\n    this.shaderKey = 'slice';\n  }\n  getUserCode() {\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getCoords(this.rank);\n    let coordSum;\n    if (this.start.length === 1) {\n      coordSum = this.outputShape.map((_, i) => {\n        return `sourceLoc = uniforms.start + coords;`;\n      });\n    } else {\n      coordSum = this.outputShape.map((_, i) => {\n        return `sourceLoc.${coords[i]} = uniforms.start.${getCoordsXYZ(i)} + coords.${coords[i]};`;\n      });\n    }\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          var sourceLoc : ${dtype};\n          let coords = getCoordsFromIndex(index);\n          ${coordSum.join('\\n')}\n          setOutputAtIndex(index, getSource(${sourceCoords}));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\nfunction getCoords(rank) {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(coord => `sourceLoc.${coord}`).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Bincount, util } from '@tensorflow/tfjs-core';\nimport { BincountProgram } from '../bincount_webgpu';\nimport { fill } from './Fill';\nexport function bincount(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    weights\n  } = inputs;\n  const {\n    size\n  } = attrs;\n  const xSize = util.sizeFromShape(x.shape);\n  const weightsSize = util.sizeFromShape(weights.shape);\n  const hasWeights = weightsSize > 0;\n  const outputSize = [size];\n  const dtype = weights.dtype;\n  const output = fill({\n    backend,\n    attrs: {\n      shape: outputSize,\n      value: 0,\n      dtype\n    }\n  });\n  const program = new BincountProgram([xSize], hasWeights);\n  const uniformData = [{\n    type: 'int32',\n    data: [size]\n  }];\n  const bincountInputs = hasWeights ? [x, weights] : [x];\n  const res = backend.runWebGPUProgram(program, bincountInputs, dtype, uniformData, output);\n  return res;\n}\nexport const bincountConfig = {\n  kernelName: Bincount,\n  backendName: 'webgpu',\n  kernelFunc: bincount\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { atomicAddSnippet } from './shader_util';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nconst writeSnippet = `\n  fn bincount_write(index: i32, value: f32) {\n    ${atomicAddSnippet('&result[index]', 'value', 'float32')}\n  }\n`;\nconst binaryWriteSnippet = `\n  fn bincount_write(index: i32, value: f32) {\n    atomicStore(&result[index], bitcast<i32>(value));\n  }\n`;\nexport class BincountProgram {\n  constructor(shape, hasWeights, binaryOutput = false) {\n    this.outputShape = [];\n    this.variableNames = ['x'];\n    this.uniforms = 'binCountSize : i32,';\n    this.workgroupSize = [64, 1, 1];\n    this.atomic = true;\n    this.hasWeights = true;\n    this.binaryOutput = false;\n    this.outputShape = shape;\n    this.rank = shape.length;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.binaryOutput = binaryOutput;\n    if (binaryOutput) {\n      this.atomic = false;\n    }\n    this.hasWeights = hasWeights;\n    if (this.hasWeights) {\n      this.variableNames.push('w');\n    }\n    this.shaderKey = `bincount_${this.hasWeights}_${this.binaryOutput}_${this.rank}`;\n  }\n  getUserCode() {\n    const userCode = `\n    ${this.binaryOutput ? binaryWriteSnippet : writeSnippet}\n  ${main('index')} {\n    ${this.rank === 1 ? `if (index < uniforms.xShape) {\n      let indexVal = i32(getX(index));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${this.binaryOutput ? 1. : this.hasWeights ? 'getW(index)' : '1.'};\n        bincount_write(indexVal, value);\n      }\n    }` : `let coord = getCoordsFromIndex(index);\n    if (coordsInBounds2D(coord, uniforms.xShape)) {\n      let indexVal = i32(getX(coord[0], coord[1]));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${this.binaryOutput ? 1. : this.hasWeights ? 'getW(coord[0], coord[1])' : '1.'};\n        bincount_write(coord.x * uniforms.binCountSize + indexVal, value);\n      }\n    }`}\n  }\n  `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BroadcastArgs, util } from '@tensorflow/tfjs-core';\nimport { BroadcastArgsProgram } from '../broadcast_args_webgpu';\nexport function broadcastArgs(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    s0,\n    s1\n  } = inputs;\n  if (backend.shouldExecuteOnCPU([s0, s1])) {\n    const s0TensorInfo = backend.tensorMap.get(s0.dataId);\n    const s1TensorInfo = backend.tensorMap.get(s1.dataId);\n    const s0Vals = s0TensorInfo.values;\n    const s1Vals = s1TensorInfo.values;\n    const broadcastShape = backend_util.assertAndGetBroadcastShape(Array.from(s0Vals), Array.from(s1Vals));\n    return backend.makeTensorInfo([broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n  }\n  const s0Size = util.sizeFromShape(s0.shape);\n  const s1Size = util.sizeFromShape(s1.shape);\n  const outputSize = Math.max(s0Size, s1Size);\n  const program = new BroadcastArgsProgram(outputSize);\n  const uniformData = [{\n    type: 'int32',\n    data: [s0Size]\n  }, {\n    type: 'int32',\n    data: [s1Size]\n  }];\n  return backend.runWebGPUProgram(program, [s0, s1], 'int32', uniformData);\n}\nexport const broadcastArgsConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'webgpu',\n  kernelFunc: broadcastArgs\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class BroadcastArgsProgram {\n  constructor(shape) {\n    this.outputShape = [];\n    this.variableNames = ['s0', 's1'];\n    this.uniforms = 's0Size : i32, s1Size : i32, ';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = [shape];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'broadcastArgs';\n  }\n  getUserCode() {\n    const userCode = `\n  ${main('index')} {\n    if (index < uniforms.size) {\n      var s0 = 1.0;\n      var s1 = 1.0;\n      let indexS0 = index - uniforms.size + uniforms.s0Size;\n      let indexS1 = index - uniforms.size + uniforms.s1Size;\n      if (indexS0 >= 0) {\n        s0 = getS0(indexS0);\n      }\n      if (indexS1 >= 0) {\n        s1 = getS1(indexS1);\n      }\n\n      if (s0 == 1.0) {\n        setOutputAtIndex(index, s1);\n      } else if (s1 == 1.0) {\n        setOutputAtIndex(index, s0);\n      } else if (s0 != s1) {\n        setOutputAtIndex(index, uniforms.NAN);\n      } else {\n        setOutputAtIndex(index, s0);\n      }\n    }\n  }\n  `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { castImplCPU } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { notEqual } from './NotEqual';\nimport { real } from './Real';\nimport { int } from '../kernel_utils/int';\nexport function cast(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dtype\n  } = attrs;\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({\n        inputs: {\n          x\n        },\n        backend\n      });\n    }\n    // TODO: Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    const result = complex({\n      inputs: {\n        real: floatX,\n        imag: zerosTensor\n      },\n      backend\n    });\n    zerosTensor.dispose();\n    backend.disposeData(floatX.dataId);\n    return result;\n  }\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const result = cast({\n      inputs: {\n        x: realPart\n      },\n      backend,\n      attrs: {\n        dtype\n      }\n    });\n    backend.disposeData(realPart.dataId);\n    return result;\n  }\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n    return {\n      dataId: result.dataId,\n      shape: result.shape,\n      dtype\n    };\n  }\n  if (backend.shouldExecuteOnCPU([x])) {\n    const values = backend.tensorMap.get(x.dataId).values;\n    const [resultShape, resultType, resultData] = castImplCPU(values, x.shape, x.dtype, dtype);\n    return backend.makeTensorInfo(resultShape, resultType, resultData);\n  }\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo([], 'bool', util.getTypedArrayFromDType('bool', 1));\n    const binaryInputs = {\n      a: x,\n      b: zerosTensorInfo\n    };\n    const result = notEqual({\n      inputs: binaryInputs,\n      backend\n    });\n    backend.disposeData(zerosTensorInfo.dataId);\n    return result;\n  }\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\nexport const castConfig = {\n  kernelName: Cast,\n  backendName: 'webgpu',\n  kernelFunc: cast\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NotEqual } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { notEqualImplCPU as cpuNotEqual } from '../kernel_utils/shared';\nexport const notEqual = binaryKernelFunc({\n  opType: BinaryOpType.NOT_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: cpuNotEqual\n});\nexport const notEqualConfig = {\n  kernelName: NotEqual,\n  backendName: 'webgpu',\n  kernelFunc: notEqual\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Real } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nexport function real(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    input\n  } = inputs;\n  const inputData = backend.tensorMap.get(input.dataId);\n  return identity({\n    inputs: {\n      x: inputData.complexTensorInfos.real\n    },\n    backend\n  });\n}\nexport const realConfig = {\n  kernelName: Real,\n  backendName: 'webgpu',\n  kernelFunc: real\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { UnaryOpType } from '../unary_op_util';\nimport { UnaryOpProgram } from '../unary_op_webgpu';\nexport function int(input, backend) {\n  const program = new UnaryOpProgram(input.shape, UnaryOpType.TO_INT);\n  const output = backend.runWebGPUProgram(program, [input], 'int32');\n  return {\n    dataId: output.dataId,\n    shape: output.shape,\n    dtype: output.dtype\n  };\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Ceil } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { ceilImplCPU } from '../kernel_utils/shared';\nimport { UnaryOpType } from '../unary_op_util';\nexport const ceil = unaryKernelFunc({\n  opType: UnaryOpType.CEIL,\n  cpuKernelImpl: ceilImplCPU\n});\nexport const ceilConfig = {\n  kernelName: Ceil,\n  backendName: 'webgpu',\n  kernelFunc: ceil\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ClipByValue, util } from '@tensorflow/tfjs-core';\nimport { ClipVec4Program } from '../clip_vec4_webgpu';\nimport { ClipProgram } from '../clip_webgpu';\nexport function clipByValue(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    clipValueMin,\n    clipValueMax\n  } = attrs;\n  let program;\n  const uniformData = [{\n    type: 'float32',\n    data: [clipValueMin]\n  }, {\n    type: 'float32',\n    data: [clipValueMax]\n  }];\n  if (util.sizeFromShape(x.shape) % 4 === 0) {\n    program = new ClipVec4Program(x.shape);\n  } else {\n    program = new ClipProgram(x.shape);\n  }\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\nexport const clipByValueConfig = {\n  kernelName: ClipByValue,\n  backendName: 'webgpu',\n  kernelFunc: clipByValue\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class ClipVec4Program {\n  constructor(outputShape) {\n    this.variableNames = ['A'];\n    this.uniforms = 'minVal : f32, maxVal : f32,';\n    this.workPerThread = 4;\n    this.workgroupSize = [64, 1, 1];\n    this.outputComponent = 4;\n    this.size = true;\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]);\n    this.shaderKey = 'clipVec4';\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          var clampedValue = clamp(\n              value, vec4<f32>(uniforms.minVal), vec4<f32>(uniforms.maxVal));\n          clampedValue = select(clampedValue, value, isnanVec4(value));\n          setOutputAtIndex(index, clampedValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class ClipProgram {\n  constructor(outputShape) {\n    this.variableNames = ['A'];\n    this.uniforms = 'minVal : f32, maxVal : f32,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'clip';\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          if (isnan(value)) {\n            setOutputAtIndex(index, value);\n            return;\n          }\n          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ComplexAbs } from '@tensorflow/tfjs-core';\nimport { ComplexAbsProgram } from '../complex_abs_webgpu';\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(complexTensor, complexPart) {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\nexport function complexAbs(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  const xData = backend.tensorMap.get(x.dataId);\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real), makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag)];\n  return backend.runWebGPUProgram(program, programInputs, programInputs[0].dtype);\n}\nexport const complexAbsConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgpu',\n  kernelFunc: complexAbs\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class ComplexAbsProgram {\n  constructor(shape) {\n    this.outputShape = [];\n    this.variableNames = ['real', 'imag'];\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'complexAbs';\n  }\n  getUserCode() {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let re = abs(getRealByOutputIndex(index));\n        let im = abs(getImagByOutputIndex(index));\n        let mx = max(re, im);\n\n        // The length function in wgsl may be not underflow-safe on some GPUs.\n        // So the safe solution is to ensure underflow-safety in all cases.\n        setOutputAtIndex(index, select(mx * length(vec2<f32>(1, min(re, im)/mx)), 0.0, mx == 0.0));\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { concatImpl } from './Concat_impl';\nimport { identity } from './Identity';\nexport function concat(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    axis\n  } = attrs;\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({\n      inputs: {\n        x: $inputs[0]\n      },\n      backend\n    });\n  }\n  return concatImpl($inputs, $axis, backend);\n}\nexport const concatConfig = {\n  kernelName: Concat,\n  backendName: 'webgpu',\n  kernelFunc: concat\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { ConcatProgram } from '../concat_webgpu';\nimport { concatImplCPU } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concatImpl(inputs, axis, backend) {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map(t => real({\n      inputs: {\n        input: t\n      },\n      backend\n    }));\n    const imags = inputs.map(t => imag({\n      inputs: {\n        input: t\n      },\n      backend\n    }));\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n    const result = complex({\n      inputs: {\n        real: realConcated,\n        imag: imagConcated\n      },\n      backend\n    });\n    reals.forEach(r => backend.disposeData(r.dataId));\n    imags.forEach(i => backend.disposeData(i.dataId));\n    backend.disposeData(realConcated.dataId);\n    backend.disposeData(imagConcated.dataId);\n    return result;\n  }\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgpu doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({\n        inputs: {\n          x: t\n        },\n        backend,\n        attrs: {\n          shape\n        }\n      });\n    });\n    const inputsValShapes = tensors2D.map(t => {\n      return {\n        vals: backend.readSync(t.dataId),\n        shape: t.shape\n      };\n    });\n    // Concats 2d tensors along axis=1.\n    const outShape = backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals = concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n    const finalOutShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n    tensors2D.forEach(t => backend.disposeData(t.dataId));\n    return outInfo;\n  }\n  // There is a storage buffer limitation in compute stage, one for output so\n  // the maximum for input is limits.maxStorageBuffersPerShaderStage - 1\n  const maxInputNum = backend.device.limits.maxStorageBuffersPerShaderStage - 1;\n  if (inputs.length > maxInputNum) {\n    const reducedInputs = [];\n    for (let i = 0; i < inputs.length; i += maxInputNum) {\n      const subArray = inputs.slice(i, i + maxInputNum);\n      reducedInputs.push(concatImpl(subArray, axis, backend));\n    }\n    const result = concatImpl(reducedInputs, axis, backend);\n    for (const i of reducedInputs) {\n      backend.disposeData(i.dataId);\n    }\n    return result;\n  }\n  const {\n    tensors2D,\n    outShape\n  } = computeTensors2D(inputs, axis, backend);\n  const shapes = tensors2D.map(t => t.shape);\n  const program = new ConcatProgram(shapes);\n  const uniformData = [];\n  const offsets = new Array(shapes.length - 1);\n  if (offsets.length > 0) {\n    offsets[0] = shapes[0][1];\n    uniformData.push({\n      type: 'int32',\n      data: [offsets[0]]\n    });\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n      uniformData.push({\n        type: 'int32',\n        data: [offsets[i]]\n      });\n    }\n  }\n  const res = backend.runWebGPUProgram(program, tensors2D, tensors2D[0].dtype, uniformData);\n  tensors2D.forEach(r => backend.disposeData(r.dataId));\n  const reshapedResult = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  backend.disposeData(res.dataId);\n  return reshapedResult;\n}\nfunction computeTensors2D(inputs, axis, backend) {\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(t => reshape({\n    inputs: {\n      x: t\n    },\n    backend,\n    attrs: {\n      shape: [util.sizeFromShape(t.shape.slice(0, axis)), util.sizeFromShape(t.shape.slice(axis))]\n    }\n  }));\n  return {\n    tensors2D,\n    outShape\n  };\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class ConcatProgram {\n  constructor(shapes) {\n    this.uniforms = '';\n    this.workPerThread = 1;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]);\n    this.offsetLength = shapes.length - 1;\n    for (let i = 0; i < this.offsetLength; i++) {\n      this.uniforms += `offset${i} : i32,`;\n    }\n    this.shaderKey = 'concat';\n  }\n  getUserCode() {\n    const snippets = [];\n    if (this.offsetLength > 0) {\n      snippets.push(`if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }`);\n      for (let i = 1; i < this.offsetLength; i++) {\n        snippets.push(`else if (yC < uniforms.offset${[i]}){ ` + `setOutputAtCoords(coords.x, coords.y, getT${i}(yR, yC - uniforms.offset${i - 1})); }`);\n      }\n      const lastIndex = this.offsetLength;\n      const lastShiftIndex = this.offsetLength - 1;\n      snippets.push(`else { setOutputAtCoords(coords.x, coords.y, getT${lastIndex}(yR, yC - uniforms.offset${lastShiftIndex})); }`);\n    } else {\n      snippets.push(`setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));`);\n    }\n    const userCode = `\n      ${main('index')} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            let yR = coords.x;\n            let yC = coords.y;\n\n            ${snippets.join('\\n        ')}\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Imag } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nexport function imag(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    input\n  } = inputs;\n  const inputData = backend.tensorMap.get(input.dataId);\n  return identity({\n    inputs: {\n      x: inputData.complexTensorInfos.imag\n    },\n    backend\n  });\n}\nexport const imagConfig = {\n  kernelName: Imag,\n  backendName: 'webgpu',\n  kernelFunc: imag\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D } from '@tensorflow/tfjs-core';\nimport { conv2DImpl } from './Conv2D_impl';\nexport function conv2d(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode\n  } = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n  return conv2DImpl({\n    x,\n    filter,\n    convInfo,\n    backend\n  });\n}\nexport const conv2DConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgpu',\n  kernelFunc: conv2d\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { Conv2DMMProgram } from '../conv2d_mm_webgpu';\nimport { Conv2DNaiveProgram } from '../conv2d_naive_webgpu';\nimport { Im2ColProgram } from '../im2col_webgpu';\nimport { batchMatMulImpl } from './BatchMatMul_impl';\nimport { reshape } from './Reshape';\n// conv2dByMatMul fuses height and width into one dimension to compute\n// batchMatMul, so bias and activation weights are also supposed to fuse the two\n// dimensions into one.\n//\n// This function computes the target shape for fusing height and width\n// dimensions. Returning null means the shape is already compatible.\nfunction getShapeForBatchMatMul(shape, isChannelsLast) {\n  const length = shape.length;\n  if (length >= 3) {\n    return isChannelsLast ? [...shape.slice(0, -3) /* batch */, shape[length - 3] * shape[length - 2] /* height * width */, shape[length - 1] /* channel */] : [...shape.slice(0, -3) /* batch */, shape[length - 3] /* channel */, shape[length - 2] * shape[length - 1] /* height * width */];\n  } else if (!isChannelsLast && length === 1 && shape[0] > 1) {\n    return [shape[0], 1];\n  } else {\n    return null;\n  }\n}\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nfunction conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}) {\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = isChannelsLast ? false : true;\n  const transposeB = false;\n  const sameSize = isChannelsLast && convInfo.filterHeight === convInfo.inHeight && convInfo.filterWidth === convInfo.inWidth && convInfo.padInfo.type === 'VALID';\n  const intermediates = [];\n  let xReshaped;\n  let filterReshaped;\n  if (sameSize) {\n    const sharedDim = convInfo.inHeight * convInfo.inWidth * convInfo.inChannels;\n    xReshaped = reshape({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        shape: [1, convInfo.batchSize, sharedDim]\n      }\n    });\n    filterReshaped = reshape({\n      inputs: {\n        x: filter\n      },\n      backend,\n      attrs: {\n        shape: [1, sharedDim, convInfo.outChannels]\n      }\n    });\n  } else {\n    xReshaped = reshape({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        shape: isChannelsLast ? [convInfo.batchSize, convInfo.inHeight * convInfo.inWidth, convInfo.inChannels] : [convInfo.batchSize, convInfo.inChannels, convInfo.inHeight * convInfo.inWidth]\n      }\n    });\n    filterReshaped = reshape({\n      inputs: {\n        x: filter\n      },\n      backend,\n      attrs: {\n        shape: [1, convInfo.inChannels, convInfo.outChannels]\n      }\n    });\n  }\n  intermediates.push(xReshaped);\n  intermediates.push(filterReshaped);\n  if (preluActivationWeights != null) {\n    const targetShape = getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {\n          x: preluActivationWeights\n        },\n        backend,\n        attrs: {\n          shape: targetShape\n        }\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({\n        inputs: {\n          x: bias\n        },\n        backend,\n        attrs: {\n          shape: targetShape\n        }\n      });\n      intermediates.push(bias);\n    }\n  }\n  const result = batchMatMulImpl({\n    a: isChannelsLast ? xReshaped : filterReshaped,\n    b: isChannelsLast ? filterReshaped : xReshaped,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    activation,\n    preluActivationWeights,\n    leakyreluAlpha\n  });\n  const out = reshape({\n    inputs: {\n      x: result\n    },\n    backend,\n    attrs: {\n      shape: convInfo.outShape\n    }\n  });\n  intermediates.push(result);\n  for (const i of intermediates) {\n    backend.disposeData(i.dataId);\n  }\n  return out;\n}\n// Implements the im2col algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nfunction conv2dWithIm2Col({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}) {\n  // Rearranges conv2d input so each block to be convolved over forms the\n  // row of a new matrix with shape [outHeight * outWidth,\n  // filterWidth * filterHeight * inChannels]. The filter is also rearranged so\n  // each output channel forms a col of a new matrix with shape [\n  // filterWidth * filterHeight * inChannels, outChannels]. The convolution is\n  // then computed by multiplying these matrices and reshaping the result.\n  const {\n    filterWidth,\n    filterHeight,\n    inChannels,\n    strideWidth,\n    strideHeight,\n    padInfo,\n    outWidth,\n    outHeight,\n    dilationWidth,\n    dilationHeight,\n    dataFormat\n  } = convInfo;\n  const isChannelsLast = dataFormat === 'channelsLast';\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = isChannelsLast ? [convInfo.batchSize, numCols, sharedDim] : [convInfo.batchSize, sharedDim, numCols];\n  const im2ColProgram = new Im2ColProgram(x2ColShape, isChannelsLast);\n  const dimensions = [{\n    type: 'int32',\n    data: [padInfo.top, padInfo.left]\n  }, {\n    type: 'int32',\n    data: [strideHeight, strideWidth]\n  }, {\n    type: 'int32',\n    data: [dilationHeight, dilationWidth]\n  }, {\n    type: 'int32',\n    data: [outWidth]\n  }, {\n    type: 'int32',\n    data: [inChannels * filterWidth]\n  }, {\n    type: 'int32',\n    data: [inChannels]\n  }];\n  const x2Col = backend.runWebGPUProgram(im2ColProgram, [x], x.dtype, dimensions);\n  const intermediates = [];\n  intermediates.push(x2Col);\n  const filterReshaped = reshape({\n    inputs: {\n      x: filter\n    },\n    backend,\n    attrs: {\n      shape: [1, sharedDim, -1]\n    }\n  });\n  intermediates.push(filterReshaped);\n  if (preluActivationWeights != null) {\n    const targetShape = getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {\n          x: preluActivationWeights\n        },\n        backend,\n        attrs: {\n          shape: targetShape\n        }\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({\n        inputs: {\n          x: bias\n        },\n        backend,\n        attrs: {\n          shape: targetShape\n        }\n      });\n      intermediates.push(bias);\n    }\n  }\n  const transposeA = isChannelsLast ? false : true;\n  const transposeB = false;\n  const result = batchMatMulImpl({\n    a: isChannelsLast ? x2Col : filterReshaped,\n    b: isChannelsLast ? filterReshaped : x2Col,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    activation,\n    preluActivationWeights,\n    leakyreluAlpha\n  });\n  const out = reshape({\n    inputs: {\n      x: result\n    },\n    backend,\n    attrs: {\n      shape: convInfo.outShape\n    }\n  });\n  intermediates.push(result);\n  for (const i of intermediates) {\n    backend.disposeData(i.dataId);\n  }\n  return out;\n}\nexport function conv2DImpl({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}) {\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const sameSize = isChannelsLast && convInfo.filterHeight === convInfo.inHeight && convInfo.filterWidth === convInfo.inWidth && convInfo.padInfo.type === 'VALID';\n  const useNaiveConv2d = env().getBool('WEBGPU_USE_NAIVE_CONV2D_DEBUG');\n  if (!useNaiveConv2d && (sameSize || convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID'))) {\n    return conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  }\n  const thresholdFlagValue = env().getNumber('WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL');\n  const thresholdToIncreaseWorkgroups = thresholdFlagValue > -1 ? thresholdFlagValue : backend.thresholdToIncreaseWorkgroups;\n  const workgroupsBy32x32 = convInfo.batchSize * Math.ceil(convInfo.outHeight * convInfo.outWidth / 32) * Math.ceil(convInfo.outChannels / 32);\n  if (env().getBool('WEBGPU_CONV_SEPARATE_IM2COL_SHADER') || workgroupsBy32x32 <= thresholdToIncreaseWorkgroups) {\n    return conv2dWithIm2Col({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      preluActivationWeights,\n      leakyreluAlpha,\n      activation\n    });\n  }\n  let program;\n  const padInfo = [convInfo.padInfo.top, convInfo.padInfo.left];\n  const dimensions = [{\n    type: 'int32',\n    data: [convInfo.filterHeight, convInfo.filterWidth]\n  }, {\n    type: 'int32',\n    data: [...padInfo]\n  }, {\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.dilationHeight, convInfo.dilationWidth]\n  }];\n  if (useNaiveConv2d) {\n    program = new Conv2DNaiveProgram(convInfo, hasBias, activation, hasPreluActivationWeights);\n  } else {\n    const dimAOuter = isChannelsLast ? convInfo.outHeight * convInfo.outWidth : convInfo.outChannels;\n    const dimBOuter = isChannelsLast ? convInfo.outChannels : convInfo.outHeight * convInfo.outWidth;\n    const dimInner = convInfo.filterHeight * convInfo.filterWidth * convInfo.inChannels;\n    dimensions.push({\n      type: 'int32',\n      data: [dimAOuter]\n    }, {\n      type: 'int32',\n      data: [dimBOuter]\n    }, {\n      type: 'int32',\n      data: [dimInner]\n    });\n    // Experiments show that sequential access is more friendly for Intel GPUs.\n    const sequentialAccessByThreads = backend.adapterInfo.isIntel();\n    program = new Conv2DMMProgram(convInfo, dimAOuter, dimBOuter, dimInner, hasBias, activation, hasPreluActivationWeights, sequentialAccessByThreads);\n  }\n  const intermediates = [];\n  const inputVar = [x, filter];\n  if (hasBias) {\n    if (!isChannelsLast && bias.shape.length === 1) {\n      bias = reshape({\n        inputs: {\n          x: bias\n        },\n        backend,\n        attrs: {\n          shape: [bias.shape[0], 1, 1]\n        }\n      });\n      intermediates.push(bias);\n    }\n    inputVar.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    if (!isChannelsLast && preluActivationWeights.shape.length === 1) {\n      preluActivationWeights = reshape({\n        inputs: {\n          x: preluActivationWeights\n        },\n        backend,\n        attrs: {\n          shape: [preluActivationWeights.shape[0], 1, 1]\n        }\n      });\n      intermediates.push(preluActivationWeights);\n    }\n    inputVar.push(preluActivationWeights);\n  }\n  if (activation === 'leakyrelu') {\n    dimensions.push({\n      type: 'float32',\n      data: [leakyreluAlpha]\n    });\n    program.uniforms += ' alpha : f32,';\n  }\n  const out = backend.runWebGPUProgram(program, inputVar, x.dtype, dimensions);\n  for (const i of intermediates) {\n    backend.disposeData(i.dataId);\n  }\n  return out;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { activationFnSnippet, biasActivationSnippet } from './activation_util';\nimport { makeMatMulPackedSource, makeMatMulPackedVec4Source } from './matmul_packed_webgpu';\nimport { typeSnippet } from './webgpu_program';\nimport { computeDispatch, computeWorkgroupSizeForConv2d, computeWorkPerThreadForConv2d } from './webgpu_util';\nfunction conv2dCommonSnippet(isChannelsLast, fitAOuter, fitBOuter, fitInner, addBias = false, activation = null, hasPreluActivationWeights = false, innerElementSizeX = 4, innerElementSizeW = 4, innerElementSize = 4) {\n  const getXSnippet = innerElementSize => {\n    switch (innerElementSize) {\n      case 1:\n        return 'resData = f32(x[xIndex]);';\n      case 3:\n        return 'resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);';\n      case 4:\n        return 'resData = vec4<f32>(x[xIndex / 4]);';\n      default:\n        throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n  const getWSnippet = innerElementSize => {\n    switch (innerElementSize) {\n      case 1:\n        return 'return f32(W[row * uniforms.wShape[3] + col]);';\n      case 4:\n        return 'return vec4<f32>(W[(row * uniforms.wShape[3] + col) / 4]);';\n      default:\n        throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n  const coordASnippet = isChannelsLast ? `\n      let coord = vec4<i32>(batch, xRow, xCol, xCh);\n      ` : `\n      let coord = vec4<i32>(batch, xCh, xRow, xCol);\n      `;\n  const coordResSnippet = isChannelsLast ? `\n      let coords = vec4<i32>(\n        batch,\n        row / outWidth,\n        row % outWidth,\n        col);\n      ` : `\n      let coords = vec4<i32>(\n        batch,\n        row,\n        col / outWidth,\n        col % outWidth);\n      `;\n  const xHight = isChannelsLast ? 'uniforms.xShape[1]' : 'uniforms.xShape[2]';\n  const xWidth = isChannelsLast ? 'uniforms.xShape[2]' : 'uniforms.xShape[3]';\n  const row = isChannelsLast ? 'row' : 'col';\n  const col = isChannelsLast ? 'col' : 'row';\n  const readXSnippet = `\n      let inChannels = uniforms.wShape[2];\n      let outWidth = ${isChannelsLast ? 'uniforms.outShape[2]' : 'uniforms.outShape[3]'};\n      let outRow = ${row} / outWidth;\n      let outCol = ${row} % outWidth;\n\n      let WRow = ${col} / (uniforms.filterDims[1] * inChannels);\n      let WCol = ${col} / inChannels % uniforms.filterDims[1];\n      let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * WRow - uniforms.pads[0];\n      let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * WCol - uniforms.pads[1];\n      let xCh = ${col} % inChannels;\n      var resData = ${typeSnippet(innerElementSizeX)}(0.0);\n      // The bounds checking is always needed since we use it to pad zero for\n      // the 'same' padding type.\n      if (xRow >= 0 && xRow < ${xHight} && xCol >= 0 && xCol < ${xWidth}) {\n        ${coordASnippet}\n        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);\n        ${getXSnippet(innerElementSizeX)}\n      }\n      return resData;`;\n  const sampleX = isChannelsLast ? fitAOuter && fitInner ? `\n      ${readXSnippet}` : `\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${readXSnippet}\n      }\n      return ${typeSnippet(innerElementSizeX)}(0.0);` : fitInner && fitBOuter ? `\n      ${readXSnippet}` : `\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${readXSnippet}\n      }\n      return ${typeSnippet(innerElementSizeX)}(0.0);`;\n  const sampleW = `${getWSnippet(innerElementSizeW)}`;\n  const resType = typeSnippet(innerElementSize);\n  const aType = isChannelsLast ? typeSnippet(innerElementSizeX) : typeSnippet(innerElementSizeW);\n  const bType = isChannelsLast ? typeSnippet(innerElementSizeW) : typeSnippet(innerElementSizeX);\n  const userCode = `\n      ${activationFnSnippet(activation, hasPreluActivationWeights, innerElementSize === 4, 4)}\n      fn mm_readA(batch: i32, row : i32, col : i32) -> ${aType} {\n        ${isChannelsLast ? sampleX : sampleW}\n      }\n\n      fn mm_readB(batch: i32, row : i32, col : i32) -> ${bType} {\n        ${isChannelsLast ? sampleW : sampleX}\n      }\n\n      fn mm_write(batch: i32, row : i32, col : i32, valueIn : ${resType}) {\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n        {\n        var value = valueIn;\n        let outWidth = ${isChannelsLast ? 'uniforms.outShape[2]' : 'uniforms.outShape[3]'};\n        ${coordResSnippet}\n        ${biasActivationSnippet(addBias, activation)}\n        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }`;\n  return userCode;\n}\nexport class Conv2DMMProgram {\n  constructor(convInfo, dimAOuter, dimBOuter, dimInner, addBias = false, activation = null, hasPreluActivationWeights = false, sequentialAccessByThreads = false) {\n    this.variableNames = ['x', 'W'];\n    this.uniforms = `filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n    this.outputShape = convInfo.outShape;\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.isVec4 = ((convInfo.inChannels % 4 === 0 || convInfo.inChannels % 3 === 0) && this.isChannelsLast || convInfo.outWidth % 4 === 0 && !this.isChannelsLast) && convInfo.outChannels % 4 === 0;\n    this.dispatchLayout = this.isChannelsLast ? {\n      x: [3],\n      y: [1, 2],\n      z: [0]\n    } : {\n      x: [2, 3],\n      y: [1],\n      z: [0]\n    };\n    this.workgroupSize = computeWorkgroupSizeForConv2d(this.dispatchLayout, this.outputShape, this.isVec4);\n    this.elementsPerThread = computeWorkPerThreadForConv2d(this.dispatchLayout, this.outputShape, this.isVec4);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, this.elementsPerThread);\n    if (this.isVec4) {\n      this.outputComponent = 4;\n      if (this.isChannelsLast && convInfo.inChannels % 4 !== 0) {\n        this.innerElementSize = 3;\n        this.variableComponents = [1, 4];\n      } else {\n        this.innerElementSize = 4;\n        this.variableComponents = [4, 4];\n      }\n      if (addBias) {\n        this.variableNames.push('bias');\n        this.variableComponents.push(4);\n      }\n      if (hasPreluActivationWeights) {\n        this.variableNames.push('preluActivationWeights');\n        this.variableComponents.push(4);\n      }\n    } else {\n      this.innerElementSize = this.elementsPerThread[0];\n      if (addBias) {\n        this.variableNames.push('bias');\n      }\n      if (hasPreluActivationWeights) {\n        this.variableNames.push('preluActivationWeights');\n      }\n    }\n    this.sequentialAccessByThreads = sequentialAccessByThreads;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n    this.tileAOuter = this.workgroupSize[1] * this.elementsPerThread[1];\n    this.tileBOuter = this.workgroupSize[0] * this.elementsPerThread[0];\n    this.tileInner = Math.max(this.workgroupSize[0] * this.innerElementSize, this.workgroupSize[1]);\n    this.fitAOuter = dimAOuter % this.tileAOuter === 0;\n    this.fitBOuter = dimBOuter % this.tileBOuter === 0;\n    this.fitInner = dimInner % this.tileInner === 0;\n    this.shaderKey = `conv2DMM_${this.elementsPerThread}_${this.activation}}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.innerElementSize}_${this.isChannelsLast}_${this.sequentialAccessByThreads}`;\n  }\n  getUserCode() {\n    const matMulSource = this.isVec4 ? makeMatMulPackedVec4Source(this.elementsPerThread, this.workgroupSize, !this.isChannelsLast, this.tileInner) : makeMatMulPackedSource(this.elementsPerThread, this.workgroupSize, !this.isChannelsLast, this.tileInner, false, null, this.sequentialAccessByThreads);\n    const elementsSize = this.isVec4 ? [this.innerElementSize, 4, 4] : [1, 1, 1];\n    const userCode = `\n    ${conv2dCommonSnippet(this.isChannelsLast, this.fitAOuter, this.fitBOuter, this.fitInner, this.addBias, this.activation, this.hasPreluActivationWeights, elementsSize[0], elementsSize[1], elementsSize[2])}\n    ${matMulSource}\n  `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { activationFnSnippet, biasActivationSnippet } from './activation_util';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch } from './webgpu_util';\nexport class Conv2DNaiveProgram {\n  constructor(convInfo, addBias = false, activation = null, hasPreluActivationWeights = false) {\n    this.variableNames = ['x', 'W'];\n    this.uniforms = 'filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>,';\n    this.workgroupSize = [4, 4, 8];\n    this.outputShape = convInfo.outShape;\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.dispatchLayout = this.isChannelsLast ? {\n      x: [2],\n      y: [1],\n      z: [0, 3]\n    } : {\n      x: [3],\n      y: [2],\n      z: [0, 1]\n    };\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    this.shaderKey = `conv2dnaive_${this.activation}_${this.isChannelsLast}`;\n  }\n  getUserCode() {\n    const userCode = `\n       ${activationFnSnippet(this.activation, this.hasPreluActivationWeights, false, 4)}\n       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{\n         let coords = vec4<i32>(batch, row, col, chan);\n         if (coordsInBounds4D(coords, uniforms.xShape)) {\n           return  getX(batch, row, col, chan);\n         } else {\n          return 0.0;\n         }\n       }\n       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{\n         let coords = vec4<i32>(row, col, xChannel, outChannel);\n         if(coordsInBounds4D(coords, uniforms.wShape)) {\n           return getW(row, col, xChannel, outChannel);\n          } else {\n            return 0.0;\n          }\n       }\n       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {\n         let coords = ${this.isChannelsLast ? `vec4<i32>(batch, row, col, chan);` : `vec4<i32>(batch, chan, row, col);`}\n         if (coordsInBounds4D(coords, uniforms.outShape)) {\n           var value = valueIn;\n           ${biasActivationSnippet(this.addBias, this.activation)}\n           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);\n         }\n       }\n       ${main('index')} {\n         let coords = getOutputCoords();\n         let batch = coords[0];\n         let outChannel = ${this.isChannelsLast ? `coords[3];` : `coords[1];`}\n         let outRow = ${this.isChannelsLast ? `coords[1];` : `coords[2];`}\n         let outCol = ${this.isChannelsLast ? `coords[2];` : `coords[3];`}\n         var acc : f32 = 0.0;\n         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {\n           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {\n             let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * row - uniforms.pads[0];\n             let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * col - uniforms.pads[1];\n             for (var xChannel = 0; xChannel < ${this.isChannelsLast ? `uniforms.xShape[3];` : `uniforms.xShape[1];`} xChannel = xChannel + 1) {\n               ${this.isChannelsLast ? `let v = readInp(batch, xRow, xCol, xChannel);` : `let v = readInp(batch, xChannel, xRow, xCol);`}\n               let f = readFilt(row, col, xChannel, outChannel);\n               acc = acc + v * f;\n             }\n           }\n         }\n         writeResult(batch, outRow, outCol, outChannel, acc);\n       }\n     `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class Im2ColProgram {\n  constructor(outputShape, isChannelsLast) {\n    this.variableNames = ['x'];\n    this.uniforms = `pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,\n       inChannels : i32,`;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.isChannelsLast = isChannelsLast;\n    this.shaderKey = `im2col_${this.isChannelsLast}`;\n  }\n  getUserCode() {\n    const rowDim = this.isChannelsLast ? 1 : 2;\n    const colDim = this.isChannelsLast ? 2 : 3;\n    const row = this.isChannelsLast ? 'coords[1]' : 'coords[2]';\n    const col = this.isChannelsLast ? 'coords[2]' : 'coords[1]';\n    const getXSnippet = this.isChannelsLast ? 'getX(batch, xRow, xCol, ch)' : 'getX(batch, ch, xRow, xCol)';\n    const userCode = `\n    ${main('index')} {\n      let coords = getCoordsFromIndex(index);\n      if(index < uniforms.size) {\n        let batch = coords[0];\n        let row = ${row};\n        let col = ${col};\n        let offsetY = (row / uniforms.outWidth) * uniforms.strides[0] - uniforms.pads[0];\n        let xRow = offsetY + uniforms.dilations[0] * (col / uniforms.itemsPerBlockRow);\n        var value = 0.0;\n        if(xRow < uniforms.xShape[${rowDim}] && xRow >= 0) {\n          let offsetX = (row % uniforms.outWidth) * uniforms.strides[1] -\n              uniforms.pads[1];\n          let xCol = offsetX + uniforms.dilations[1] * ((col %\n              uniforms.itemsPerBlockRow) / uniforms.inChannels);\n          let ch = col % uniforms.inChannels;\n          if(xCol < uniforms.xShape[${colDim}] && xCol >= 0) {\n            value = ${getXSnippet};\n          }\n        }\n        setOutputAtIndex(index, value);\n      }\n    }\n   `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropFilter } from '@tensorflow/tfjs-core';\nimport { Conv2DDerFilterProgram } from '../conv_backprop_webgpu';\nexport function conv2DBackpropFilter(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    dy\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode,\n    filterShape\n  } = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n  const program = new Conv2DDerFilterProgram(convInfo);\n  const uniformData = [{\n    type: 'int32',\n    data: [convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.batchSize]\n  }, {\n    type: 'int32',\n    data: [convInfo.outHeight]\n  }, {\n    type: 'int32',\n    data: [convInfo.outWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.inHeight]\n  }, {\n    type: 'int32',\n    data: [convInfo.inWidth]\n  }];\n  return backend.runWebGPUProgram(program, [x, dy], x.dtype, uniformData);\n}\nexport const conv2DBackpropFilterConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'webgpu',\n  kernelFunc: conv2DBackpropFilter\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class Conv2DDerInputProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy', 'W'];\n    this.uniforms = 'filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = false;\n    this.isVec4 = false;\n    this.workPerThread = 1;\n    this.outputShape = convInfo.inShape;\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.isVec4 = this.isChannelsLast && convInfo.outChannels % 4 === 0 && convInfo.inChannels % 4 === 0;\n    if (this.isVec4) {\n      // TODO: Expand to any value.\n      this.workPerThread = 2;\n      this.outputComponent = 4;\n      this.workgroupSize = [4, 4, 4];\n      this.dispatchLayout = {\n        x: [3],\n        y: [2],\n        z: [0, 1]\n      };\n      this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, [4, this.workPerThread, 1]);\n    } else {\n      this.size = true;\n      this.workPerThread = 1;\n      this.workgroupSize = [64, 1, 1];\n      this.dispatchLayout = flatDispatchLayout(this.outputShape);\n      this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    }\n    this.shaderKey = `conv2DDerInput_${this.isChannelsLast}_${this.isVec4}_${this.workPerThread}`;\n  }\n  getUserCode() {\n    const rowDim = this.isChannelsLast ? 1 : 2;\n    const colDim = this.isChannelsLast ? 2 : 3;\n    const channelDim = this.isChannelsLast ? 3 : 1;\n    const vec4Snippet = `\n    ${main()} {\n      let batch = i32(globalId.z) / uniforms.outShape[1];\n      let r = i32(globalId.z) % uniforms.outShape[1];\n      let c = i32(globalId.y) * ${this.workPerThread};\n      let d1 = i32(globalId.x) * 4;\n\n      let dyCorner = vec2<i32>(r, c) - uniforms.pads;\n\n      // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n      // ? = to be determined. : = across all values in that axis.\n      var dotProd: array<vec4<f32>, ${this.workPerThread}>;\n      for (var i = 0; i < ${this.workPerThread}; i++) {\n        dotProd[i] = vec4<f32>(0.0);\n      }\n      for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n        let dyR = f32(dyCorner.x + wR) / f32(uniforms.strides.x);\n        let wRPerm = uniforms.filterDims.x - 1 - wR;\n        if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) ||\n            fract(dyR) > 0.0) {\n          continue;\n        }\n        let idyR = i32(dyR);\n\n        for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n          let dyC = f32(dyCorner.y + wC) / f32(uniforms.strides.y);\n          let dyC2 = f32(dyCorner.y + 1 + wC) / f32(uniforms.strides.y);\n          let wCPerm = uniforms.filterDims.y - 1 - wC;\n          var bDyCVal = true;\n          var bDyCVal2 = true;\n          if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n              fract(dyC) > 0.0) {\n            bDyCVal = false;\n          }\n          if (dyC2 < 0.0 || dyC2 >= f32(uniforms.outBackprop[2]) ||\n              fract(dyC2) > 0.0) {\n            bDyCVal2 = false;\n          }\n\n          let idyC = i32(dyC);\n          let idyC2 = i32(dyC2);\n          if (bDyCVal && bDyCVal2) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[0] = dotProd[0] + tmpval;\n              xValue = getDy(batch, idyR, idyC2, d2);\n              dotProd[1] = dotProd[1] + vec4<f32>(dot(xValue, wValue0),\n                                                  dot(xValue, wValue1),\n                                                  dot(xValue, wValue2),\n                                                  dot(xValue, wValue3));\n            }\n          } else if (bDyCVal) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[0] = dotProd[0] + tmpval;\n            }\n          } else if (bDyCVal2) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC2, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[1] = dotProd[1] + tmpval;\n            }\n          }\n        }\n      }\n\n      for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n        let coords = vec4<i32>(batch, r, c + i, d1);\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], dotProd[i]);\n        }\n      }\n    }\n    `;\n    return this.isVec4 ? `\n    ${vec4Snippet}\n    ` : `\n    ${main('index')} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[${channelDim}];\n\n        let dyCorner = vec2<i32>(coords[${rowDim}], coords[${colDim}]) - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.strides.x);\n          let wRPerm = uniforms.filterDims.x - 1 - wR;\n          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||\n              wRPerm < 0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.strides.y);\n            let wCPerm = uniforms.filterDims.y - 1 - wC;\n            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n                fract(dyC) > 0.0 || wCPerm < 0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {\n              let xValue = ${this.isChannelsLast ? 'getDy(batch, idyR, idyC, d2)' : 'getDy(batch, d2, idyR, idyC)'};\n              let wValue = getW(wRPerm, wCPerm, d1, d2);\n              dotProd = dotProd + xValue * wValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `;\n  }\n}\nexport class Conv2DDerFilterProgram {\n  constructor(convInfo) {\n    this.variableNames = ['x', 'dy'];\n    this.uniforms = 'pads : vec2<i32>, strides : vec2<i32>, batchSize : i32, outHeight : i32, outWidth : i32, inHeight : i32, inWidth : i32,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = convInfo.filterShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.shaderKey = `conv2DDerFilter_${this.isChannelsLast}`;\n  }\n  getUserCode() {\n    return `\n    ${main('index')} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wR = coords[0];\n        let wC = coords[1];\n        let d1 = coords[2];\n        let d2 = coords[3];\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b = b + 1) {\n          for (var yR = 0; yR < uniforms.outHeight; yR = yR + 1) {\n            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];\n            if (xR < 0 || xR >= uniforms.inHeight) {\n              continue;\n            }\n\n            for (var yC = 0; yC < uniforms.outWidth; yC = yC + 1) {\n              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];\n\n              if (xC < 0 || xC >= uniforms.inWidth) {\n                continue;\n              }\n\n              if (${this.isChannelsLast}) {\n                let dyValue = getDy(b, yR, yC, d2);\n                let xValue = getX(b, xR, xC, d1);\n                dotProd = dotProd + xValue * dyValue;\n              } else {\n                let dyValue = getDy(b, d2, yR, yC);\n                let xValue = getX(b, d1, xR, xC);\n                dotProd = dotProd + xValue * dyValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `;\n  }\n}\nexport class Conv3DDerFilterProgram {\n  constructor(convInfo) {\n    this.variableNames = ['x', 'dy'];\n    this.uniforms = `pads : vec3<i32>, strides : vec3<i32>, batchSize : i32, outDepth : i32,\n       outHeight : i32, outWidth : i32, inDepth : i32, inHeight : i32, inWidth : i32,`;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = convInfo.filterShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `conv3DDerFilter`;\n  }\n  getUserCode() {\n    return `\n    ${main('index')} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wF = coords.x;\n        let wR = coords.y;\n        let wC = coords.z;\n        let d1 = coords.w;\n        let d2 = coords.u;\n\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b++) {\n          for (var yF = 0; yF < uniforms.outDepth; yF++) {\n            let xF = wF + yF * uniforms.strides[0] - uniforms.pads[0];\n            if (xF < 0 || xF >= uniforms.inDepth) {\n              continue;\n            }\n\n            for (var yR = 0; yR < uniforms.outHeight; yR++) {\n              let xR = wR + yR * uniforms.strides[1] - uniforms.pads[1];\n              if (xR < 0 || xR >= uniforms.inHeight) {\n                continue;\n              }\n\n              for (var yC = 0; yC < uniforms.outWidth; yC++) {\n                let xC = wC + yC * uniforms.strides[2] - uniforms.pads[2];\n                if (xC < 0 || xC >= uniforms.inWidth) {\n                  continue;\n                }\n\n                let dyValue = getDy(b, yF, yR, yC, d2);\n                let xValue = getX(b, xF, xR, xC, d1);\n                dotProd += xValue * dyValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `;\n  }\n}\nexport class Conv3DDerInputProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy', 'W'];\n    this.uniforms = `filterDims : vec3<i32>, pads : vec3<i32>, strides : vec3<i32>,\n      outDepth : i32, outHeight : i32, outWidth : i32, outChannels : i32,`;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = convInfo.inShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `conv3DDerInput`;\n  }\n  getUserCode() {\n    return `\n    ${main('index')} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let d1 = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyFCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        var dotProd = 0.0;\n        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {\n          let dyF = f32(dyFCorner + wF) / f32(uniforms.strides[0]);\n          if (dyF < 0.0 || dyF >= f32(uniforms.outDepth) || fract(dyF) > 0.0) {\n            continue;\n          }\n          let idyF = i32(dyF);\n\n          let wFPerm = uniforms.filterDims[0] - 1 - wF;\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            let wRPerm = uniforms.filterDims[1] - 1 - wR;\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let wCPerm = uniforms.filterDims[2] - 1 - wC;\n\n              for (var d2 = 0; d2 < uniforms.outChannels; d2++) {\n                let xValue = getDy(batch, idyF, idyR, idyC, d2);\n                let wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropInput, env } from '@tensorflow/tfjs-core';\nimport { Conv2DDerInputMMProgram } from '../conv_backprop_mm_webgpu';\nimport { Conv2DDerInputProgram } from '../conv_backprop_webgpu';\nexport function conv2DBackpropInput(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    filter\n  } = inputs;\n  const {\n    inputShape,\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode\n  } = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n  const dimensions = [{\n    type: 'int32',\n    data: [convInfo.filterHeight, convInfo.filterWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.filterHeight - 1 - convInfo.padInfo.top, convInfo.filterWidth - 1 - convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.batchSize, convInfo.outHeight, convInfo.outWidth, convInfo.outChannels]\n  }];\n  let program;\n  // TODO: Experiment when to use Conv2DDerInputMMProgram algorithm.\n  if (env().getBool('WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE') || convInfo.dataFormat !== 'channelsLast') {\n    program = new Conv2DDerInputProgram(convInfo);\n  } else {\n    program = new Conv2DDerInputMMProgram(convInfo);\n    const dimAOuter = convInfo.inHeight * convInfo.inWidth;\n    const dimBOuter = convInfo.inChannels;\n    const dimInner = convInfo.filterHeight * convInfo.filterWidth * convInfo.outChannels;\n    dimensions.push({\n      type: 'uint32',\n      data: [dimAOuter]\n    }, {\n      type: 'uint32',\n      data: [dimBOuter]\n    }, {\n      type: 'uint32',\n      data: [dimInner]\n    });\n  }\n  return backend.runWebGPUProgram(program, [dy, filter], 'float32', dimensions);\n}\nexport const conv2DBackpropInputConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgpu',\n  kernelFunc: conv2DBackpropInput\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { makeMatMulPackedSource, makeMatMulPackedVec4Source } from './matmul_packed_webgpu';\nimport { typeSnippet } from './webgpu_program';\nimport { computeDispatch, computeWorkgroupSizeForConv2d, computeWorkPerThreadForConv2d } from './webgpu_util';\nfunction conv2dTransposeCommonSnippet(innerElementSize = 4) {\n  const getWSnippet = innerElementSize => {\n    switch (innerElementSize) {\n      case 1:\n        return 'return W[getIndexFromCoords4D(coord, uniforms.wShape)];';\n      case 4:\n        return `\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];\n            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];\n            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];\n            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];\n            return vec4<f32>(v0, v1, v2, v3);\n            `;\n      default:\n        throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n  const readASnippet = `\n      let outRow = row / uniforms.outShape[2];\n      let outCol = row % uniforms.outShape[2];\n\n      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];\n      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.strides[0]);\n      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.strides[1]);\n      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {\n        return ${typeSnippet(innerElementSize)}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {\n        return ${typeSnippet(innerElementSize)}(0.0);\n      }\n      let coord = vec4<i32>(\n          batch,\n          i32(xR),\n          i32(xC),\n          col % uniforms.outBackprop[3]);\n      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${innerElementSize}];`;\n  const sampleA = `if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${readASnippet}\n      }\n      return ${typeSnippet(innerElementSize)}(0.0);`;\n  const userCode = `\n  fn mm_readA(batch: i32, row : i32, col : i32) -> ${typeSnippet(innerElementSize)} {\n    ${sampleA}\n  }\n\n  fn mm_readB(batch: i32, row : i32, col : i32) -> ${typeSnippet(innerElementSize)} {\n    let coordX = uniforms.filterDims.x - 1 -\n        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n    let coordY = uniforms.filterDims.y - 1 -\n        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&\n        coordX >= 0 && coordY >= 0) {\n      let rowInner = row % uniforms.outBackprop[3];\n      let coord = vec4<i32>(coordX, coordY, col, rowInner);\n      ${getWSnippet(innerElementSize)}\n    }\n    return ${typeSnippet(innerElementSize)}(0.0);\n  }\n\n  fn mm_write(batch: i32, row : i32, col : i32, valueInput : ${typeSnippet(innerElementSize)}) {\n    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outCoord = vec4<i32>(\n          batch,\n          row / uniforms.outShape[2],\n          row % uniforms.outShape[2],\n          col);\n      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${innerElementSize}] = value;\n    }\n  }`;\n  return userCode;\n}\nexport class Conv2DDerInputMMProgram {\n  constructor(convInfo) {\n    this.variableNames = ['x', 'W'];\n    this.uniforms = 'filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,';\n    this.outputShape = convInfo.inShape;\n    util.assert(convInfo.dataFormat === 'channelsLast', () => 'TODO: NCHW is unimplemented');\n    this.isVec4 = convInfo.inChannels % 4 === 0 && convInfo.outChannels % 4 === 0;\n    this.dispatchLayout = {\n      x: [3],\n      y: [1, 2],\n      z: [0]\n    };\n    this.workgroupSize = computeWorkgroupSizeForConv2d(this.dispatchLayout, this.outputShape, this.isVec4);\n    this.elementsPerThread = computeWorkPerThreadForConv2d(this.dispatchLayout, this.outputShape, this.isVec4);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, this.elementsPerThread);\n    if (this.isVec4) {\n      this.outputComponent = 4;\n      this.variableComponents = [4, 1];\n    }\n    this.shaderKey = `conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`;\n  }\n  getUserCode() {\n    const matMulSource = this.isVec4 ? makeMatMulPackedVec4Source(this.elementsPerThread, this.workgroupSize) : makeMatMulPackedSource(this.elementsPerThread, this.workgroupSize);\n    const userCode = `\n    ${conv2dTransposeCommonSnippet(this.isVec4 ? 4 : 1)}\n    ${matMulSource}\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3D, upcastType } from '@tensorflow/tfjs-core';\nimport { Conv3DNaiveProgram } from '../conv3d_naive_webgpu';\nexport function conv3D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations\n  } = attrs;\n  const convInfo = backend_util.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);\n  const padInfo = [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left];\n  const dimensions = [{\n    type: 'int32',\n    data: [convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth]\n  }, {\n    type: 'int32',\n    data: [...padInfo]\n  }, {\n    type: 'int32',\n    data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth]\n  }];\n  const program = new Conv3DNaiveProgram(convInfo);\n  const dtype = upcastType(x.dtype, filter.dtype);\n  return backend.runWebGPUProgram(program, [x, filter], dtype, dimensions);\n}\nexport const conv3DConfig = {\n  kernelName: Conv3D,\n  backendName: 'webgpu',\n  kernelFunc: conv3D\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class Conv3DNaiveProgram {\n  constructor(convInfo) {\n    this.variableNames = ['x', 'W'];\n    this.uniforms = 'filterDims: vec3<i32>, pads: vec3<i32>, strides: vec3<i32>, dilations: vec3<i32>,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `conv3dnaive`;\n  }\n  getUserCode() {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let batch = coords.x;\n        let d2 = coords.u;\n\n        let xFRCCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;\n        let xFCorner = xFRCCorner.x;\n        let xRCorner = xFRCCorner.y;\n        let xCCorner = xFRCCorner.z;\n\n        let inputDepthNearestVec4 = (uniforms.xShape.u / 4) * 4;\n        let inputDepthVec4Remainder = uniforms.xShape.u % 4;\n\n        var dotProd = 0.0;\n        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {\n          let xF = xFCorner + wF * uniforms.dilations[0];\n          if (xF < 0 || xF >= uniforms.xShape.y) {\n            continue;\n          }\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let xR = xRCorner + wR * uniforms.dilations[1];\n            if (xR < 0 || xR >= uniforms.xShape.z) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let xC = xCCorner + wC * uniforms.dilations[2];\n              if (xC < 0 || xC >= uniforms.xShape.w) {\n                continue;\n              }\n\n              for (var d1 = 0; d1 < inputDepthNearestVec4; d1 += 4) {\n                let xValues = vec4<f32>(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                let wValues = vec4<f32>(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (inputDepthVec4Remainder == 1) {\n                dotProd += getX(batch, xF, xR, xC, inputDepthNearestVec4) *\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2);\n              } else if (inputDepthVec4Remainder == 2) {\n                let xValues = vec2<f32>(\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1)\n                );\n                let wValues = vec2<f32>(\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (inputDepthVec4Remainder == 3) {\n                let xValues = vec3<f32>(\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2)\n                );\n                let wValues = vec3<f32>(\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }`;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropFilterV2 } from '@tensorflow/tfjs-core';\nimport { Conv3DDerFilterProgram } from '../conv_backprop_webgpu';\nexport function conv3DBackpropFilterV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    dy\n  } = inputs;\n  const {\n    strides,\n    pad,\n    filterShape\n  } = attrs;\n  const convInfo = backend_util.computeConv3DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad);\n  const program = new Conv3DDerFilterProgram(convInfo);\n  const uniformData = [{\n    type: 'int32',\n    data: [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.batchSize]\n  }, {\n    type: 'int32',\n    data: [convInfo.outDepth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outHeight]\n  }, {\n    type: 'int32',\n    data: [convInfo.outWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.inDepth]\n  }, {\n    type: 'int32',\n    data: [convInfo.inHeight]\n  }, {\n    type: 'int32',\n    data: [convInfo.inWidth]\n  }];\n  return backend.runWebGPUProgram(program, [x, dy], dy.dtype, uniformData);\n}\nexport const conv3DBackpropFilterV2Config = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'webgpu',\n  kernelFunc: conv3DBackpropFilterV2\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropInputV2 } from '@tensorflow/tfjs-core';\nimport { Conv3DDerInputProgram } from '../conv_backprop_webgpu';\nexport function conv3DBackpropInputV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    inputShape\n  } = attrs;\n  const convInfo = backend_util.computeConv3DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad);\n  const program = new Conv3DDerInputProgram(convInfo);\n  const uniformData = [{\n    type: 'int32',\n    data: [convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.filterDepth - 1 - convInfo.padInfo.front, convInfo.filterHeight - 1 - convInfo.padInfo.top, convInfo.filterWidth - 1 - convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outDepth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outHeight]\n  }, {\n    type: 'int32',\n    data: [convInfo.outWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outChannels]\n  }];\n  return backend.runWebGPUProgram(program, [dy, filter], dy.dtype, uniformData);\n}\nexport const conv3DBackpropInputV2Config = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'webgpu',\n  kernelFunc: conv3DBackpropInputV2\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cos } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const cos = unaryKernelFunc({\n  opType: UnaryOpType.COS\n});\nexport const cosConfig = {\n  kernelName: Cos,\n  backendName: 'webgpu',\n  kernelFunc: cos\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cosh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const cosh = unaryKernelFunc({\n  opType: UnaryOpType.COSH\n});\nexport const coshConfig = {\n  kernelName: Cosh,\n  backendName: 'webgpu',\n  kernelFunc: cosh\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { CropAndResize } from '@tensorflow/tfjs-core';\nimport { CropAndResizeProgram } from '../crop_and_resize_webgpu';\nexport const cropAndResize = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    image,\n    boxes,\n    boxInd\n  } = inputs;\n  const {\n    cropSize,\n    method,\n    extrapolationValue\n  } = attrs;\n  const program = new CropAndResizeProgram(image.shape[3], boxes.shape, cropSize, method);\n  const uniformData = [{\n    type: 'float32',\n    data: [extrapolationValue]\n  }];\n  return backend.runWebGPUProgram(program, [image, boxes, boxInd], 'float32', uniformData);\n};\nexport const cropAndResizeConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgpu',\n  kernelFunc: cropAndResize\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class CropAndResizeProgram {\n  constructor(channnel, boxShape, cropSize, method) {\n    this.variableNames = ['Image', 'Boxes', 'BoxInd'];\n    this.uniforms = 'extrapolationValue : f32,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    const [numBoxes] = boxShape;\n    this.outputShape = [numBoxes, cropSize[0], cropSize[1], channnel];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.methodId = method === 'bilinear' ? 1 : 0;\n    this.cropHeightBiggerThan1 = this.outputShape[1] > 1;\n    this.cropWidthBiggerThan1 = this.outputShape[2] > 1;\n    this.shaderKey = `cropAndResize_${this.methodId}_${this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`;\n  }\n  getUserCode() {\n    const [inputHeightFloat, inputWidthFloat] = [`f32(uniforms.imageShape[1] - 1)`, `f32(uniforms.imageShape[2] - 1)`];\n    const [heightRatio, heightScale, inY] = this.cropHeightBiggerThan1 ? [`(${inputHeightFloat} / f32(uniforms.outShape[1] - 1))`, '(y2-y1) * height_ratio', `y1*${inputHeightFloat} + f32(y)*(height_scale)`] : ['0.0', '0.0', `0.5 * (y1+y2) * ${inputHeightFloat}`];\n    const [widthRatio, widthScale, inX] = this.cropWidthBiggerThan1 ? [`(${inputWidthFloat} / f32(uniforms.outShape[2] - 1))`, '(x2-x1) * width_ratio', `x1*${inputWidthFloat} + f32(x)*(width_scale)`] : ['0.0', '0.0', `0.5 * (x1+x2) * ${inputWidthFloat}`];\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let height_ratio = f32(${heightRatio});\n        let width_ratio = f32(${widthRatio});\n        let b = coords[0];\n        let y = coords[1];\n        let x = coords[2];\n        let d = coords[3];\n        // get box vals\n        let y1 = getBoxes(b, 0);\n        let x1 = getBoxes(b, 1);\n        let y2 = getBoxes(b, 2);\n        let x2 = getBoxes(b, 3);\n        // get image in batch index\n        let bInd = i32(round(getBoxInd(b)));\n        if(bInd < 0 || bInd >= uniforms.outShape[0]) {\n          return;\n        }\n        let height_scale = ${heightScale};\n        let width_scale = ${widthScale};\n        let in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let sourceFracIndexCR = vec2<f32>(in_x,in_y);\n        if(${this.methodId} == 1) {\n          // Compute the four integer indices.\n          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);\n          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));\n          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);\n          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);\n          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);\n          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);\n          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);\n          let top = topLeft + (topRight - topLeft) * fracCR.x;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          let newValue = top + (bottom - top) * fracCR.y;\n          setOutputAtIndex(index, newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          let sourceNearestCR = vec2<i32>(floor(\n            sourceFracIndexCR + vec2<f32>(0.5,0.5)));\n          let newValue = getImage(\n            bInd, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cumprod } from '@tensorflow/tfjs-core';\nimport { CumOpType } from '../cum_webgpu';\nimport { cumImpl } from './Cum_impl';\nexport function cumprod(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    exclusive,\n    reverse\n  } = attrs;\n  return cumImpl(CumOpType.Prod, x, backend, axis, exclusive, reverse);\n}\nexport const cumprodConfig = {\n  kernelName: Cumprod,\n  backendName: 'webgpu',\n  kernelFunc: cumprod\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport var CumOpType;\n(function (CumOpType) {\n  CumOpType[\"Prod\"] = \"*\";\n  CumOpType[\"Sum\"] = \"+\";\n})(CumOpType || (CumOpType = {}));\nexport class CumProgram {\n  constructor(op, shape, exclusive, reverse) {\n    this.variableNames = ['x'];\n    // pow(i32, i32) is not supported, use pow(f32, f32) instead.\n    this.uniforms = 'index : f32,';\n    this.size = true;\n    this.workgroupSize = [128, 1, 1];\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.exclusive = exclusive;\n    this.reverse = reverse;\n    this.op = op;\n    this.shaderKey = `cum_${this.op}_${this.exclusive}_${this.reverse}`;\n  }\n  getUserCode() {\n    const rank = this.outputShape.length;\n    const initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';\n    const val = this.exclusive ? initVal : `getX(${getCoords(rank, 'coords', this.op)})`;\n    const length = this.outputShape[this.outputShape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (this.exclusive) {\n      condition = this.reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = this.reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = this.reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = this.reverse ? 'end + pow2' : 'end - pow2';\n    }\n    return `\n      ${main('index')} {\n       if (index < uniforms.size) {\n         var coords = getCoordsFromIndex(index);\n\n         let end = ${getFinalCoord(rank, 'coords', this.op)};\n         var val = ${val};\n         let pow2 = i32(pow(2.0, uniforms.index));\n         if (${condition}) {\n           let idx = ${idxString};\n           ${getFinalCoord(rank, 'coords', this.op)} = idx;\n           val ${this.op}= getX(${getCoords(rank, 'coords', this.op)});\n         }\n         setOutputAtIndex(index, val);\n       }\n      }\n    `;\n  }\n}\nfunction getCoords(rank, name, op) {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\nfunction getFinalCoord(rank, name, op) {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { CumProgram } from '../cum_webgpu';\nimport { identity } from './Identity';\nimport { transpose } from './Transpose';\nexport function cumImpl(op, x, backend, axis, exclusive, reverse) {\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(`WebGPU cumprod shader expects an inner-most axis=${x.shape.length - 1} ` + `but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({\n    inputs: {\n      x: permutedX\n    },\n    backend\n  });\n  // Use cum parallel algorithm, inspired by:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n  // Note: although the algorithm is called sum, it works for any associtative\n  // operator with an identity.\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumProgram(op, permutedX.shape, false, reverse);\n    const prevResult = result;\n    const uniformData = [{\n      type: 'float32',\n      data: [i]\n    }];\n    result = backend.runWebGPUProgram(program, [result], result.dtype, uniformData);\n    backend.disposeData(prevResult.dataId);\n  }\n  // For exclusive cum, shift the end result in the direction of product or sum\n  // and add 1 for product or 0 for sum to the front index.\n  if (exclusive) {\n    const program = new CumProgram(op, permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    const uniformData = [{\n      type: 'float32',\n      data: [0]\n    }];\n    result = backend.runWebGPUProgram(program, [result], result.dtype, uniformData);\n    backend.disposeData(prevResult.dataId);\n  }\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose({\n      inputs: {\n        x: result\n      },\n      backend,\n      attrs: {\n        perm: reversePermutation\n      }\n    });\n    backend.disposeData(result.dataId);\n    backend.disposeData(permutedX.dataId);\n    return reverseTransposedResult;\n  }\n  return result;\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cumsum } from '@tensorflow/tfjs-core';\nimport { CumOpType } from '../cum_webgpu';\nimport { cumImpl } from './Cum_impl';\nexport function cumsum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    exclusive,\n    reverse\n  } = attrs;\n  return cumImpl(CumOpType.Sum, x, backend, axis, exclusive, reverse);\n}\nexport const cumsumConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgpu',\n  kernelFunc: cumsum\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DenseBincount, util } from '@tensorflow/tfjs-core';\nimport { BincountProgram } from '../bincount_webgpu';\nimport { fill } from './Fill';\nexport function denseBincount(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    weights\n  } = inputs;\n  const {\n    size,\n    binaryOutput\n  } = attrs;\n  const xRankOne = x.shape.length === 1;\n  const weightsSize = util.sizeFromShape(weights.shape);\n  const hasWeights = weightsSize > 0;\n  const dtype = weights.dtype;\n  const xSize = xRankOne ? [x.shape[0]] : [x.shape[0], x.shape[1]];\n  const outputSize = xRankOne ? [size] : [x.shape[0], size];\n  const output = fill({\n    backend,\n    attrs: {\n      shape: outputSize,\n      value: 0,\n      dtype\n    }\n  });\n  const program = new BincountProgram(xSize, hasWeights, binaryOutput);\n  const uniformData = [{\n    type: 'int32',\n    data: [size]\n  }];\n  const bincountInputs = hasWeights ? [x, weights] : [x];\n  const res = backend.runWebGPUProgram(program, bincountInputs, dtype, uniformData, output);\n  return res;\n}\nexport const denseBincountConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgpu',\n  kernelFunc: denseBincount\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace } from '@tensorflow/tfjs-core';\nimport { DepthToSpaceProgram } from '../depth_to_space_webgpu';\nexport function depthToSpace(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockSize,\n    dataFormat\n  } = attrs;\n  const batchSize = x.shape[0];\n  const inputHeight = dataFormat === 'NHWC' ? x.shape[1] : x.shape[2];\n  const inputWidth = dataFormat === 'NHWC' ? x.shape[2] : x.shape[3];\n  const inputDepth = dataFormat === 'NHWC' ? x.shape[3] : x.shape[1];\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n  const outputShape = dataFormat === 'NHWC' ? [batchSize, outputHeight, outputWidth, outputDepth] : [batchSize, outputDepth, outputHeight, outputWidth];\n  const uniformData = [{\n    type: 'int32',\n    data: [blockSize]\n  }];\n  const program = new DepthToSpaceProgram(outputShape, dataFormat);\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\nexport const depthToSpaceConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgpu',\n  kernelFunc: depthToSpace\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class DepthToSpaceProgram {\n  constructor(outputShape, dataFormat) {\n    this.variableNames = ['x'];\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.uniforms = 'blockSize : i32,';\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `depthToSpace_${dataFormat}`;\n    this.dataFormat = dataFormat;\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let h = ${this.getHeightCoordString()};\n          let w = ${this.getWidthCoordString()};\n          let d = ${this.getDepthCoordString()};\n\n          let in_h = h / uniforms.blockSize;\n          let offset_h = h % uniforms.blockSize;\n          let in_w = w / uniforms.blockSize;\n          let offset_w = w % uniforms.blockSize;\n          let offset_d = (offset_h * uniforms.blockSize + offset_w) *\n            ${this.getOutputDepthSize()};\n          let in_d = d + offset_d;\n\n          let rlt = ${this.getInputSamplingString()};\n          setOutputAtIndex(index, rlt);\n        }\n      }`;\n    return userCode;\n  }\n  getHeightCoordString() {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n  getWidthCoordString() {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n  getDepthCoordString() {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n  getOutputDepthSize() {\n    if (this.dataFormat === 'NHWC') {\n      return `uniforms.outShape[3]`;\n    } else {\n      return `uniforms.outShape[1]`;\n    }\n  }\n  getInputSamplingString() {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DNCHWSharedProgram } from '../depthwise_conv2d_nchw_shared_webgpu';\nimport { DepthwiseConv2DVec4Program } from '../depthwise_conv2d_vec4_webgpu';\nimport { DepthwiseConv2DProgram } from '../depthwise_conv2d_webgpu';\nexport function depthwiseConv2dNative(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode\n  } = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */, $dataFormat);\n  const dimensions = [{\n    type: 'int32',\n    data: [convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.inHeight, convInfo.inWidth]\n  }];\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  let program;\n  if (!isChannelsLast && convInfo.inHeight > 16 && convInfo.inWidth > 16 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && convInfo.dilationWidth === 1 && convInfo.dilationHeight === 1 && convInfo.inChannels === convInfo.outChannels) {\n    program = new DepthwiseConv2DNCHWSharedProgram(convInfo.outShape, convInfo.filterHeight, convInfo.filterWidth);\n  } else if (isChannelsLast && convInfo.outHeight > 4 && convInfo.outWidth > 4 && convInfo.strideWidth <= 2 && convInfo.inChannels === convInfo.outChannels && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.inChannels % 4 === 0) {\n    program = new DepthwiseConv2DVec4Program(convInfo);\n    dimensions.push({\n      type: 'int32',\n      data: [program.virtualWidth]\n    });\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n    dimensions.push({\n      type: 'int32',\n      data: [convInfo.filterHeight]\n    }, {\n      type: 'int32',\n      data: [convInfo.filterWidth]\n    }, {\n      type: 'int32',\n      data: [convInfo.strideHeight, convInfo.strideWidth]\n    }, {\n      type: 'int32',\n      data: [convInfo.dilationHeight, convInfo.dilationWidth]\n    });\n  }\n  return backend.runWebGPUProgram(program, [x, filter], x.dtype, dimensions);\n}\nexport const depthwiseConv2dNativeConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgpu',\n  kernelFunc: depthwiseConv2dNative\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { activationFnSnippet, biasActivationSnippet } from './activation_util';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch } from './webgpu_util';\nexport class DepthwiseConv2DNCHWSharedProgram {\n  constructor(outputShape, filterHeight, filterWidth, addBias = false, activation = null, hasPreluActivation = false) {\n    this.variableNames = ['x', 'W'];\n    this.uniforms = `pads : vec2<i32>, inDims : vec2<i32>,`;\n    this.workgroupSize = [16, 16, 1];\n    this.outputShape = outputShape;\n    this.dispatchLayout = {\n      x: [3],\n      y: [2],\n      z: [0, 1]\n    };\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivation = hasPreluActivation;\n    this.filterHeight = filterHeight;\n    this.filterWidth = filterWidth;\n    this.shaderKey = `depthwiseNCHW_${this.activation}_${this.filterHeight}_${this.filterWidth}`;\n  }\n  getUserCode() {\n    const filterSize = this.filterWidth * this.filterHeight;\n    const flatWorkgroupSize = this.workgroupSize[0] * this.workgroupSize[1] * this.workgroupSize[2];\n    const tileAHeight = this.workgroupSize[1] + this.filterHeight - 1;\n    const tileAWidth = this.workgroupSize[0] + this.filterWidth - 1;\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivation, false, 4)}\n\n      var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHeight}>;\n      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${this.filterHeight}>;\n      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {\n        var value = 0.0;\n        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])\n        {\n          value = getX(batch, channel, row, col);\n        }\n        return value;\n      }\n\n      ${main()} {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pads;\n        let channelMul = uniforms.wShape[3];\n        let d1 = coords[1] / channelMul;\n        let q = coords[1] % channelMul;\n\n        let inputRowStart = xRCCorner.x;\n        let inputColStart = xRCCorner.y;\n\n        let localRow = i32(localId.y);\n        let localCol = i32(localId.x);\n\n        // Load one tile of X into local memory.\n        for (var inputRow = localRow; inputRow < ${tileAHeight}; inputRow = inputRow + ${this.workgroupSize[1]}) {\n          for (var inputCol = localCol; inputCol < ${tileAWidth}; inputCol = inputCol + ${this.workgroupSize[0]}) {\n            let rowOffset = inputRow - localRow;\n            let colOffset = inputCol - localCol;\n            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);\n          }\n        }\n\n        // Load one tile of W into local memory.\n        var wIndex = i32(localIndex);\n        ${filterSize < flatWorkgroupSize ? `if (wIndex < ${filterSize})` : `for(; wIndex < ${filterSize}; wIndex = wIndex + ${flatWorkgroupSize})`}\n\n        {\n          let wRow = wIndex / ${this.filterWidth};\n          let wCol = wIndex % ${this.filterWidth};\n          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);\n        }\n\n        workgroupBarrier();\n\n        var value = 0.0;\n        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {\n          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {\n            let xVal = mm_Asub[localRow + wR][localCol + wC];\n            let wVal = mm_Bsub[wR][wC];\n            value = fma(xVal, wVal, value);\n          }\n        }\n        ${biasActivationSnippet(this.addBias, this.activation)}\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { activationFnSnippet, biasActivationSnippet } from './activation_util';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class DepthwiseConv2DVec4Program {\n  constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false) {\n    this.variableNames = ['x', 'W'];\n    this.uniforms = 'pads : vec2<i32>, inDims : vec2<i32>, virtualWidth : i32,';\n    this.workgroupSize = [64, 1, 1];\n    this.workPerThread = 4;\n    this.outputComponent = 4;\n    this.outputShape = convInfo.outShape;\n    this.virtualWidth = Math.ceil(this.outputShape[2] / this.workPerThread) * this.workPerThread;\n    const virtualOutputShape = [this.outputShape[0], this.outputShape[1], this.virtualWidth, this.outputShape[3]];\n    this.dispatchLayout = flatDispatchLayout(virtualOutputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, virtualOutputShape, this.workgroupSize, [this.outputComponent * this.workPerThread, 1, 1]);\n    util.assert(convInfo.dataFormat === 'channelsLast', () => 'TODO: NCHW is unimplemented');\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    this.convInfo = convInfo;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivation = hasPreluActivation;\n    this.shaderKey = `depthwiseVec4_${activation}_${this.convInfo.filterHeight}_${this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${this.convInfo.strideWidth}_${this.workPerThread}`;\n  }\n  getUserCode() {\n    const xNumber = (this.workPerThread - 1) * this.convInfo.strideWidth + this.convInfo.filterWidth;\n    const strideHeight = this.convInfo.strideHeight;\n    const strideWidth = this.convInfo.strideWidth;\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivation, true, 4)}\n      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {\n        var value = vec4<f32>(0.0);\n        if (col >=0 && col < uniforms.inDims[1]) {\n          value = getX(batch, row, col, channel);\n        }\n        return value;\n      }\n\n      ${main('index')} {\n        let width0 = uniforms.outShape[3] / ${this.outputComponent};\n        let d1 = (index % width0) * ${this.outputComponent};\n        var index1 = index / width0;\n        let width1 = uniforms.virtualWidth / ${this.workPerThread};\n        let c = (index1 % width1) * ${this.workPerThread};\n        index1 = index1 / width1;\n        let r = index1 % uniforms.outShape[1];\n        let batch = index1 / uniforms.outShape[1];\n\n        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(${strideHeight}, ${strideWidth}) - uniforms.pads;\n\n        let xRCorner = xRCCorner.x;\n        let xCCorner = xRCCorner.y;\n        var xVals : array<vec4<f32>, ${xNumber}>;\n        var dotProd : array<vec4<f32>, ${this.workPerThread}>;\n        for (var i = 0; i < ${this.workPerThread}; i++) {\n          dotProd[i] = vec4<f32>(0.0);\n        }\n\n        // Use constant instead of uniform can give better performance.\n        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {\n          let xR = xRCorner + wR;\n          if (xR >=0 && xR < uniforms.inDims[0]) {\n            for (var i = 0; i < ${xNumber}; i++) {\n              xVals[i] = readX(batch, xR, xCCorner + i, d1);\n            }\n            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {\n              let wValue = getW(wR, wC, d1, 0);\n              for (var i = 0; i < ${this.workPerThread}; i++) {\n                dotProd[i] = fma(xVals[i * ${strideWidth} + wC], wValue, dotProd[i]);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let coords = vec4<i32>(batch, r, c + i, d1);\n          if (coordsInBounds4D(coords, uniforms.outShape)) {\n            var value = dotProd[i];\n            ${biasActivationSnippet(this.addBias, this.activation)}\n            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { activationFnSnippet, biasActivationSnippet } from './activation_util';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class DepthwiseConv2DProgram {\n  constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false) {\n    this.variableNames = ['x', 'W'];\n    this.uniforms = `pads : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,\n      filterWidth : i32, strides : vec2<i32>, dilations : vec2<i32>,`;\n    // This is an experimental value.\n    this.workgroupSize = [256, 1, 1];\n    this.size = true;\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    this.convInfo = convInfo;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivation = hasPreluActivation;\n    this.shaderKey = `depthwise_${this.activation}_${this.isChannelsLast}`;\n  }\n  getUserCode() {\n    const getXSnippet = this.isChannelsLast ? 'getX(batch, xR, xC, d1);' : 'getX(batch, d1, xR, xC);';\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivation, false, 4)}\n\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let batch = coords[0];\n          let xRCCorner = vec2<i32>(coords.${this.isChannelsLast ? 'yz' : 'zw'}) * uniforms.strides - uniforms.pads;\n          let d2 = coords[${this.isChannelsLast ? 3 : 1}];\n          let channelMul = uniforms.wShape[3];\n          let d1 = d2 / channelMul;\n          let q = d2 % channelMul;\n\n          let inputRowStart = xRCCorner.x;\n          let inputColStart = xRCCorner.y;\n          let inputRowEnd = inputRowStart + uniforms.filterHeight *\n              uniforms.dilations[0];\n          let inputColEnd = inputColStart + uniforms.filterWidth *\n              uniforms.dilations[1];\n\n          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get\n          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all\n          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.\n          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.\n          var value = 0.0;\n\n          // Extract if checking out of for loop for performance.\n          if (inputRowStart >= 0 && inputColStart >= 0 &&\n            inputRowEnd < uniforms.inDims[0] &&\n                inputColEnd < uniforms.inDims[1]) {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilations[0];\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilations[1];\n\n                  let xVal = ${getXSnippet};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            } else {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilations[0];\n\n                if (xR < 0 || xR >= uniforms.inDims[0]) {\n                  continue;\n                }\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilations[1];\n\n                  if (xC < 0 || xC >= uniforms.inDims[1]) {\n                    continue;\n                  }\n\n                  let xVal = ${getXSnippet};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            }\n            ${biasActivationSnippet(this.addBias, this.activation)}\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropFilter } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DDerFilterProgram } from '../conv_backprop_depthwise_webgpu';\nexport function depthwiseConv2dNativeBackpropFilter(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    dy\n  } = inputs;\n  const {\n    strides,\n    dilations,\n    pad,\n    dimRoundingMode,\n    filterShape\n  } = attrs;\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n  const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n  const uniformData = [{\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.filterHeight, convInfo.filterWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outHeight]\n  }, {\n    type: 'int32',\n    data: [convInfo.outWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.inHeight]\n  }, {\n    type: 'int32',\n    data: [convInfo.inWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.batchSize]\n  }, {\n    type: 'int32',\n    data: [convInfo.outChannels / convInfo.inChannels]\n  }];\n  return backend.runWebGPUProgram(program, [x, dy], 'float32', uniformData);\n}\nexport const depthwiseConv2dNativeBackpropFilterConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'webgpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class DepthwiseConv2DDerFilterProgram {\n  constructor(convInfo) {\n    this.variableNames = ['x', 'dy'];\n    this.uniforms = `strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>, outHeight : i32,\n      outWidth : i32, inHeight : i32, inWidth : i32, batchSize : i32, channelMul : i32,`;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = convInfo.filterShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `depthwise_conv2d_backprop_filter`;\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wR = coords[0];\n        let wC = coords[1];\n        let d1 = coords[2];\n        let dm = coords[3];\n        let d2 = d1 * uniforms.channelMul + dm;\n\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b++) {\n          for (var yR = 0; yR < uniforms.outHeight; yR++) {\n            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];\n\n            if (xR < 0 || xR >= uniforms.inHeight) {\n              continue;\n            }\n\n            for (var yC = 0; yC < uniforms.outWidth; yC++) {\n              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];\n\n              if (xC < 0 || xC >= uniforms.inWidth) {\n                continue;\n              }\n\n              let dyValue = getDy(b, yR, yC, d2);\n              let xValue = getX(b, xR, xC, d1);\n              dotProd += xValue * dyValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `;\n    return userCode;\n  }\n}\nexport class DepthwiseConv2DDerInputProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy', 'W'];\n    this.uniforms = `strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32, channelMul : i32,`;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = convInfo.inShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `depthwise_conv2d_backprop_input`;\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[3];\n        let dyCorner = coords.yz - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n\n          let idyR = i32(dyR);\n          let wRPerm = uniforms.filterDims[0] - 1 - wR;\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n\n            let idyC = i32(dyC);\n            let wCPerm = uniforms.filterDims[1] - 1 - wC;\n\n            for (var dm = 0; dm < uniforms.channelMul; dm++) {\n              let d2 = d1 * uniforms.channelMul + dm;\n              let xValue = getDy(batch, idyR, idyC, d2);\n              let wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropInput } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DDerInputProgram } from '../conv_backprop_depthwise_webgpu';\nexport function depthwiseConv2dNativeBackpropInput(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    filter\n  } = inputs;\n  const {\n    strides,\n    dilations,\n    pad,\n    dimRoundingMode,\n    inputShape\n  } = attrs;\n  const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n  const program = new DepthwiseConv2DDerInputProgram(convInfo);\n  const uniformData = [{\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.filterHeight - 1 - convInfo.padInfo.top, convInfo.filterWidth - 1 - convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.filterHeight, convInfo.filterWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outHeight]\n  }, {\n    type: 'int32',\n    data: [convInfo.outWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outChannels / convInfo.inChannels]\n  }];\n  return backend.runWebGPUProgram(program, [dy, filter], dy.dtype, uniformData);\n}\nexport const depthwiseConv2dNativeBackpropInputConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'webgpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Diag, util } from '@tensorflow/tfjs-core';\nimport { DiagProgram } from '../diag_webgpu';\nimport { reshape } from './Reshape';\nexport function diag(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n  const flat = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: [xSize]\n    }\n  });\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGPUProgram(program, [flat], flat.dtype);\n  const out = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  backend.disposeData(flat.dataId);\n  backend.disposeData(res.dataId);\n  return out;\n}\nexport const diagConfig = {\n  kernelName: Diag,\n  backendName: 'webgpu',\n  kernelFunc: diag\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class DiagProgram {\n  constructor(size) {\n    this.variableNames = ['x'];\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = [size, size];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'diag';\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let value = select(0.0, getX(coords[0]), coords[0] == coords[1]);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D } from '@tensorflow/tfjs-core';\nimport { Dilation2DProgram } from '../dilation_webgpu';\nexport function dilation2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations\n  } = attrs;\n  const convInfo = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n  const padInfo = [convInfo.padInfo.top, convInfo.padInfo.left];\n  const uniformData = [{\n    type: 'int32',\n    data: [convInfo.filterHeight, convInfo.filterWidth]\n  }, {\n    type: 'int32',\n    data: [...padInfo]\n  }, {\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.dilationHeight, convInfo.dilationWidth]\n  }];\n  const program = new Dilation2DProgram(convInfo);\n  const out = backend.runWebGPUProgram(program, [x, filter], x.dtype, uniformData);\n  return out;\n}\nexport const dilation2DConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgpu',\n  kernelFunc: dilation2D\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class Dilation2DProgram {\n  constructor(convInfo) {\n    this.variableNames = ['x', 'w'];\n    this.uniforms = 'filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'dilation2d';\n  }\n  getUserCode() {\n    const userCode = `\n       ${main('index')} {\n         if (index < uniforms.size) {\n           let neg_infinity = -3.4e38;\n           let coords = getOutputCoords();\n           let batch = coords.x;\n           let d1 = coords.w;\n           let outTopLeftCorner = coords.yz * uniforms.strides - uniforms.pads;\n           let hBeg = outTopLeftCorner.x;\n           let wBeg = outTopLeftCorner.y;\n\n           var curVal = neg_infinity;\n           for (var h = 0; h < uniforms.filterDims[0]; h = h + 1) {\n             let hIn = hBeg + h * uniforms.dilations[0];\n\n             if (hIn >= 0 && hIn < uniforms.xShape[1]) {\n               for (var w = 0; w < uniforms.filterDims[1]; w = w + 1) {\n                 let wIn = wBeg + w * uniforms.dilations[1];\n\n                 if (wIn >= 0 && wIn < uniforms.xShape[2]) {\n                   let val = getX(batch, hIn, wIn, d1) + getW(h, w, d1);\n                   if (val > curVal) {\n                     curVal = val;\n                   }\n                 }\n               }\n             }\n           }\n\n           setOutputAtIndex(index, curVal);\n         }\n       }\n     `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2DBackpropFilter, util } from '@tensorflow/tfjs-core';\nimport { Dilation2DBackpropFilterProgram } from '../dilation_backprop_webgpu';\nimport { fill } from './Fill';\nexport function dilation2DBackpropFilter(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    dy\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations\n  } = attrs;\n  const convInfo = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n  const dtype = filter.dtype;\n  const program = new Dilation2DBackpropFilterProgram(convInfo, filter.shape, dtype);\n  const uniformData = [{\n    type: 'int32',\n    data: [convInfo.filterHeight, convInfo.filterWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.dilationHeight, convInfo.dilationWidth]\n  }, {\n    type: 'int32',\n    data: [util.sizeFromShape(convInfo.outShape)]\n  }];\n  const output = fill({\n    backend,\n    attrs: {\n      shape: filter.shape,\n      value: 0,\n      dtype\n    }\n  });\n  return backend.runWebGPUProgram(program, [x, filter, dy], dtype, uniformData, output);\n}\nexport const dilation2DBackpropFilterConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'webgpu',\n  kernelFunc: dilation2DBackpropFilter\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { atomicAddSnippet } from './shader_util';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class Dilation2DBackpropInputProgram {\n  constructor(convInfo, outputDtype) {\n    this.variableNames = ['x', 'w', 'dy'];\n    this.uniforms = 'filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,';\n    this.workgroupSize = [64, 1, 1];\n    this.atomic = true;\n    this.outputShape = convInfo.inShape;\n    this.dispatchLayout = flatDispatchLayout(convInfo.outShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, convInfo.outShape, this.workgroupSize);\n    if (outputDtype !== 'float32' && outputDtype !== 'int32') {\n      throw new Error(`Dilation2DBackpropInput only supports float32 and int32\n          types, does not support ${outputDtype} type.`);\n    }\n    this.type = outputDtype;\n    this.shaderKey = 'dilation2DBackpropInput';\n  }\n  getUserCode() {\n    // This implementation follows the TF c++ cuda implementation:\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/dilation_ops_gpu.cu.cc\n    const userCode = `\n       ${main('index')} {\n         if (index < uniforms.dySize) {\n           let coords = getDyCoordsFromIndex(index);\n           let b = coords[0];\n           let r = coords[1];\n           let c = coords[2];\n           let d = coords[3];\n\n           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;\n           var curVal = -3.4e38;  // neg_infinity\n           var xRMax = 0;\n           var xCMax = 0;\n\n           // In the case of multiple argmax branches, we only back-propagate\n           // along the last branch, i.e., the one with largest value of\n           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling\n           // backward routines.\n           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n             let xR = dyCorner.x + wR * uniforms.dilations[0];\n\n             if (xR >= 0 && xR < uniforms.xShape[1]) {\n               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n                 let xC = dyCorner.y + wC * uniforms.dilations[1];\n\n                 if (xC >= 0 && xC < uniforms.xShape[2]) {\n                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);\n                   if (val > curVal) {\n                     curVal = val;\n                     xRMax = xR;\n                     xCMax = xC;\n                   }\n                 }\n               }\n             }\n           }\n\n           let flatIndexIn = d + uniforms.xShape[3] *\n               (xCMax + uniforms.xShape[2] * (xRMax + uniforms.xShape[1] * b));\n           let value = getDy(b, r, c, d);\n           ${atomicAddSnippet('&result[flatIndexIn]', 'value', this.type)}\n         }\n       }\n     `;\n    return userCode;\n  }\n}\nexport class Dilation2DBackpropFilterProgram {\n  constructor(convInfo, shape, outputDtype) {\n    this.variableNames = ['x', 'w', 'dy'];\n    this.uniforms = 'filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,';\n    this.workgroupSize = [64, 1, 1];\n    this.atomic = true;\n    this.outputShape = convInfo.filterShape;\n    this.dispatchLayout = flatDispatchLayout(convInfo.outShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, convInfo.outShape, this.workgroupSize);\n    if (outputDtype !== 'float32' && outputDtype !== 'int32') {\n      throw new Error(`Dilation2DBackpropFilter only supports float32 and int32\n          types, does not support ${outputDtype} type.`);\n    }\n    this.type = outputDtype;\n    this.shaderKey = 'dilation2DBackpropFilter';\n  }\n  getUserCode() {\n    // This implementation follows the TF c++ cuda implementation:\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/dilation_ops_gpu.cu.cc\n    const userCode = `\n       ${main('index')} {\n         if (index < uniforms.dySize) {\n           let coords = getDyCoordsFromIndex(index);\n           let b = coords[0];\n           let r = coords[1];\n           let c = coords[2];\n           let d = coords[3];\n\n           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;\n           var curVal = -3.4e38;  // neg_infinity\n           var wRMax = 0;\n           var wCMax = 0;\n\n           // In the case of multiple argmax branches, we only back-propagate\n           // along the last branch, i.e., the one with largest value of\n           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling\n           // backward routines.\n           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n             let xR = dyCorner.x + wR * uniforms.dilations[0];\n\n             if (xR >= 0 && xR < uniforms.xShape[1]) {\n               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n                 let xC = dyCorner.y + wC * uniforms.dilations[1];\n\n                 if (xC >= 0 && xC < uniforms.xShape[2]) {\n                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);\n                   if (val > curVal) {\n                     curVal = val;\n                     wRMax = wR;\n                     wCMax = wC;\n                   }\n                 }\n               }\n             }\n           }\n\n           let flatIndexIn = d + uniforms.wShape[2] * (wCMax + wRMax * uniforms.wShape[1]);\n           let value = getDy(b, r, c, d);\n           ${atomicAddSnippet('&result[flatIndexIn]', 'value', this.type)}\n         }\n       }\n     `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2DBackpropInput, util } from '@tensorflow/tfjs-core';\nimport { Dilation2DBackpropInputProgram } from '../dilation_backprop_webgpu';\nimport { fill } from './Fill';\nexport function dilation2DBackpropInput(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    dy\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations\n  } = attrs;\n  const convInfo = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n  const dtype = x.dtype;\n  const program = new Dilation2DBackpropInputProgram(convInfo, dtype);\n  const uniformData = [{\n    type: 'int32',\n    data: [convInfo.filterHeight, convInfo.filterWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.dilationHeight, convInfo.dilationWidth]\n  }, {\n    type: 'int32',\n    data: [util.sizeFromShape(convInfo.outShape)]\n  }];\n  const output = fill({\n    backend,\n    attrs: {\n      shape: convInfo.inShape,\n      value: 0,\n      dtype\n    }\n  });\n  return backend.runWebGPUProgram(program, [x, filter, dy], dtype, uniformData, output);\n}\nexport const dilation2DBackpropInputConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'webgpu',\n  kernelFunc: dilation2DBackpropInput\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use backend file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Draw } from '@tensorflow/tfjs-core';\nimport { DrawProgram } from '../draw_webgpu';\nexport function draw(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    image\n  } = inputs;\n  const {\n    canvas,\n    options\n  } = attrs;\n  const [height, width] = image.shape.slice(0, 2);\n  const {\n    imageOptions\n  } = options || {};\n  const alpha = (imageOptions === null || imageOptions === void 0 ? void 0 : imageOptions.alpha) || 1;\n  //  'rgba8unorm' should work on macOS according to\n  //  https://bugs.chromium.org/p/chromium/issues/detail?id=1298618. But\n  //  failed on macOS/M2. So use 'bgra8unorm' first when available.\n  const format = backend.device.features.has('bgra8unorm-storage') ? 'bgra8unorm' : 'rgba8unorm';\n  const outShape = [height, width];\n  const program = new DrawProgram(outShape, image.dtype, format);\n  canvas.width = width;\n  canvas.height = height;\n  const backendName = 'webgpu';\n  let gpuContext = canvas.getContext(backendName);\n  let canvasWebGPU;\n  if (!gpuContext) {\n    canvasWebGPU = new OffscreenCanvas(width, height);\n    gpuContext = canvasWebGPU.getContext(backendName);\n  }\n  const numChannels = image.shape.length === 3 ? image.shape[2] : 1;\n  gpuContext.configure({\n    device: backend.device,\n    format,\n    usage: GPUTextureUsage.STORAGE_BINDING,\n    alphaMode: 'premultiplied'\n  });\n  const outputDtype = 'int32';\n  const output = backend.makeTensorInfo(outShape, outputDtype);\n  const info = backend.tensorMap.get(output.dataId);\n  info.resource = gpuContext.getCurrentTexture();\n  info.external = true;\n  const uniformData = [{\n    type: 'uint32',\n    data: [numChannels]\n  }, {\n    type: 'float32',\n    data: [alpha]\n  }];\n  backend.runWebGPUProgram(program, [image], outputDtype, uniformData, output);\n  if (canvasWebGPU) {\n    const canvas2dContext = canvas.getContext('2d');\n    if (!canvas2dContext) {\n      throw new Error(`Please make sure this canvas has only been used for 2d or webgpu context!`);\n    }\n    canvas2dContext.drawImage(canvasWebGPU, 0, 0);\n  }\n  backend.disposeData(output.dataId);\n  return image;\n}\nexport const drawConfig = {\n  kernelName: Draw,\n  backendName: 'webgpu',\n  kernelFunc: draw\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main, PixelsOpType } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class DrawProgram {\n  constructor(outShape, type, textureFormat) {\n    this.variableNames = ['Image'];\n    this.uniforms = 'alpha: f32,';\n    this.workgroupSize = [64, 1, 1];\n    this.pixelsOpType = PixelsOpType.DRAW;\n    this.size = true;\n    this.outputShape = outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.type = type;\n    this.textureFormat = textureFormat;\n    this.shaderKey = `draw_${type}_${textureFormat}`;\n  }\n  getUserCode() {\n    let calculateResult;\n    const value = this.type === 'float32' ? 'value' : 'value / 255.0';\n    calculateResult = `\n      if (uniforms.numChannels == 1) {\n        rgba[0] = ${value};\n        rgba[1] = ${value};\n        rgba[2] = ${value};\n      } else {\n        rgba[d] = ${value};\n      }`;\n    const userCode = `\n       @group(0) @binding(0) var outImage : texture_storage_2d<${this.textureFormat}, write>;\n       ${main('index')} {\n         if (index < uniforms.size) {\n           var rgba = vec4<f32>(0.0, 0.0, 0.0, uniforms.alpha);\n           for (var d = 0; d < uniforms.numChannels; d = d + 1) {\n             let value = f32(inBuf[index * uniforms.numChannels + d]);\n             ${calculateResult}\n           }\n           rgba.x = rgba.x * rgba.w;\n           rgba.y = rgba.y * rgba.w;\n           rgba.z = rgba.z * rgba.w;\n           let coords = getCoordsFromIndex(index);\n           textureStore(outImage, vec2<i32>(coords.yx), rgba);\n         }\n       }\n      `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Einsum, util } from '@tensorflow/tfjs-core';\nimport { multiplyKernelFunc } from './Multiply';\nimport { reshape } from './Reshape';\nimport { sum } from './Sum';\nimport { transpose } from './Transpose';\nexport function einsum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    equation\n  } = attrs;\n  const tensors = inputs;\n  const {\n    allDims,\n    summedDims,\n    idDims\n  } = backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {\n    path,\n    steps\n  } = backend_util.getEinsumComputePath(summedDims, idDims);\n  const nSteps = steps.length;\n  let out = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {\n        permutationIndices: perm,\n        expandDims: dimsToExpand\n      } = backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({\n          inputs: {\n            x: tensors[idTerm]\n          },\n          backend,\n          attrs: {\n            perm\n          }\n        });\n        tensorsToDispose.push(x);\n      }\n      const targetShape = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({\n          inputs: {\n            x\n          },\n          backend,\n          attrs: {\n            shape: targetShape\n          }\n        });\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiplyKernelFunc({\n          inputs: {\n            a: x,\n            b: out\n          },\n          backend\n        });\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {\n            x: out\n          },\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeData(tensorInfo.dataId);\n  }\n  return out;\n}\nexport const einsumConfig = {\n  kernelName: Einsum,\n  backendName: 'webgpu',\n  kernelFunc: einsum\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multiply } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { multiplyImplCPU as cpuMultiply } from '../kernel_utils/shared';\nexport const multiplyKernelFunc = binaryKernelFunc({\n  opType: BinaryOpType.MUL,\n  cpuKernelImpl: cpuMultiply,\n  supportsComplex: true\n});\nexport const multiplyConfig = {\n  kernelName: Multiply,\n  backendName: 'webgpu',\n  kernelFunc: multiplyKernelFunc\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sum } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nexport function sum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  return reduce(x, axis, keepDims, 'sum', backend);\n}\nexport const sumConfig = {\n  kernelName: Sum,\n  backendName: 'webgpu',\n  kernelFunc: sum\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Elu } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const elu = unaryKernelFunc({\n  opType: UnaryOpType.ELU\n});\nexport const eluConfig = {\n  kernelName: Elu,\n  backendName: 'webgpu',\n  kernelFunc: elu\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { EluGrad } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { BinaryOpProgram } from '../binary_op_webgpu';\nexport const eluGrad = args => {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    dy,\n    y\n  } = inputs;\n  const program = new BinaryOpProgram(BinaryOpType.ELU_DER, dy.shape, y.shape);\n  return backend.runWebGPUProgram(program, [dy, y], dy.dtype);\n};\nexport const eluGradConfig = {\n  kernelName: EluGrad,\n  backendName: 'webgpu',\n  kernelFunc: eluGrad\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Equal } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { equalImplCPU as cpuEqual } from '../kernel_utils/shared';\nexport const equal = binaryKernelFunc({\n  opType: BinaryOpType.EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: cpuEqual\n});\nexport const equalConfig = {\n  kernelName: Equal,\n  backendName: 'webgpu',\n  kernelFunc: equal\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Erf } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const erf = unaryKernelFunc({\n  opType: UnaryOpType.ERF\n});\nexport const erfConfig = {\n  kernelName: Erf,\n  backendName: 'webgpu',\n  kernelFunc: erf\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Exp } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { expImplCPU } from '../kernel_utils/shared';\nimport { UnaryOpType } from '../unary_op_util';\nexport const exp = unaryKernelFunc({\n  opType: UnaryOpType.EXP,\n  cpuKernelImpl: expImplCPU,\n  dtype: 'float32'\n});\nexport const expConfig = {\n  kernelName: Exp,\n  backendName: 'webgpu',\n  kernelFunc: exp\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ExpandDims, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nexport function expandDims(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const {\n    dim\n  } = attrs;\n  const {\n    input\n  } = inputs;\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n  return reshape({\n    inputs: {\n      x: input\n    },\n    backend,\n    attrs: {\n      shape: newShape\n    }\n  });\n}\nexport const expandDimsConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgpu',\n  kernelFunc: expandDims\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Expm1 } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { expm1ImplCPU } from '../kernel_utils/shared';\nimport { UnaryOpType } from '../unary_op_util';\nexport const expm1 = unaryKernelFunc({\n  opType: UnaryOpType.EXPM1,\n  cpuKernelImpl: expm1ImplCPU\n});\nexport const expm1Config = {\n  kernelName: Expm1,\n  backendName: 'webgpu',\n  kernelFunc: expm1\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FFT } from '@tensorflow/tfjs-core';\nimport { fftImpl } from './FFT_impl';\nexport function fft(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    input\n  } = inputs;\n  return fftImpl(input, false /* inverse */, backend);\n}\nexport const fftConfig = {\n  kernelName: FFT,\n  backendName: 'webgpu',\n  kernelFunc: fft\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FFTProgram } from '../fft_webgpu';\nimport { complex } from './Complex';\nimport { reshape } from './Reshape';\nexport function fftImpl(x, inverse, backend) {\n  const xData = backend.tensorMap.get(x.dataId);\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n  const toDispose = [];\n  const input2D = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: [batch, innerDimensionSize]\n    }\n  });\n  toDispose.push(input2D);\n  const xShape = input2D.shape;\n  const realProgram = new FFTProgram('real', xShape);\n  const imagProgram = new FFTProgram('imag', xShape);\n  const inputs = [{\n    dataId: xData.complexTensorInfos.real.dataId,\n    dtype: xData.complexTensorInfos.real.dtype,\n    shape: xShape\n  }, {\n    dataId: xData.complexTensorInfos.imag.dataId,\n    dtype: xData.complexTensorInfos.imag.dtype,\n    shape: xShape\n  }];\n  const exponentMultiplier = inverse ? 2.0 * Math.PI : -2.0 * Math.PI;\n  const denominator = inverse ? xShape[1] : 1.0;\n  const uniformData = [{\n    type: 'float32',\n    data: [exponentMultiplier]\n  }, {\n    type: 'float32',\n    data: [denominator]\n  }];\n  const realPart = backend.runWebGPUProgram(realProgram, inputs, 'float32', uniformData);\n  toDispose.push(realPart);\n  const imagPart = backend.runWebGPUProgram(imagProgram, inputs, 'float32', uniformData);\n  toDispose.push(imagPart);\n  const complexOutput = complex({\n    inputs: {\n      real: realPart,\n      imag: imagPart\n    },\n    backend\n  });\n  toDispose.push(complexOutput);\n  const complexOutputReshaped = reshape({\n    inputs: {\n      x: complexOutput\n    },\n    backend,\n    attrs: {\n      shape: x.shape\n    }\n  });\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return complexOutputReshaped;\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class FFTProgram {\n  constructor(component, shape) {\n    this.variableNames = ['real', 'imag'];\n    this.outputShape = [];\n    this.uniforms = 'exponentMultiplier : f32, denominator: f32,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.component = component;\n    this.shaderKey = `fft_${component}`;\n  }\n  getUserCode() {\n    const opString = this.component === 'real' ? 'return real * expR - imag * expI;' : 'return real * expI + imag * expR;';\n    const userCode = `\n    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {\n      ${opString}\n    }\n\n    fn mulMatDFT(batch: i32, index: i32) -> f32 {\n      let indexRatio = f32(index) / f32(uniforms.realShape[1]);\n      let exponentMultiplierTimesIndexRatio =\n          uniforms.exponentMultiplier * indexRatio;\n\n      var result = 0.0;\n\n      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {\n        // x = (-2|2 * PI / N) * index * i;\n        let x = exponentMultiplierTimesIndexRatio * f32(i);\n        let expR = cos(x);\n        let expI = sin(x);\n        let real = getReal(batch, i);\n        let imag = getImag(batch, i);\n\n        result = result +\n            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;\n      }\n\n      return result;\n    }\n\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FlipLeftRight } from '@tensorflow/tfjs-core';\nimport { FlipLeftRightProgram } from '../flip_left_right_webgpu';\nexport const flipLeftRightConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'webgpu',\n  kernelFunc: ({\n    inputs,\n    backend\n  }) => {\n    const {\n      image\n    } = inputs;\n    const webgpuBackend = backend;\n    const program = new FlipLeftRightProgram(image.shape);\n    const output = webgpuBackend.runWebGPUProgram(program, [image], image.dtype);\n    return output;\n  }\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class FlipLeftRightProgram {\n  constructor(imageShape) {\n    this.outputShape = [];\n    this.variableNames = ['x'];\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = imageShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'flipLeftRight';\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let coordX = uniforms.xShape[2] - coords[2] - 1;\n          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);\n          setOutputAtIndex(index, outputValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Floor } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { floorImplCPU } from '../kernel_utils/shared';\nimport { UnaryOpType } from '../unary_op_util';\nexport const floor = unaryKernelFunc({\n  opType: UnaryOpType.FLOOR,\n  cpuKernelImpl: floorImplCPU\n});\nexport const floorConfig = {\n  kernelName: Floor,\n  backendName: 'webgpu',\n  kernelFunc: floor\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FloorDiv } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { floorDivImplCPU } from '../kernel_utils/shared';\nexport const floorDiv = binaryKernelFunc({\n  opType: BinaryOpType.FLOOR_DIV,\n  cpuKernelImpl: floorDivImplCPU,\n  dtype: 'int32'\n});\nexport const floorDivConfig = {\n  kernelName: FloorDiv,\n  backendName: 'webgpu',\n  kernelFunc: floorDiv\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use backend file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { FromPixels, util } from '@tensorflow/tfjs-core';\nimport { FromPixelsProgram } from '../from_pixels_webgpu';\nexport const fromPixelsConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgpu',\n  kernelFunc: fromPixels\n};\nlet fromPixels2DContext;\nlet willReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\nexport function fromPixels(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  let {\n    pixels\n  } = inputs;\n  const {\n    numChannels\n  } = attrs;\n  if (pixels == null) {\n    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n  }\n  const isVideo = typeof HTMLVideoElement !== 'undefined' && pixels instanceof HTMLVideoElement;\n  const isImage = typeof HTMLImageElement !== 'undefined' && pixels instanceof HTMLImageElement;\n  const isCanvas = typeof HTMLCanvasElement !== 'undefined' && pixels instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && pixels instanceof OffscreenCanvas;\n  const isImageBitmap = typeof ImageBitmap !== 'undefined' && pixels instanceof ImageBitmap;\n  const [width, height] = isVideo ? [pixels.videoWidth, pixels.videoHeight] : [pixels.width, pixels.height];\n  const outputShape = [height, width, numChannels];\n  const importVideo = env().getBool('WEBGPU_IMPORT_EXTERNAL_TEXTURE') && isVideo;\n  const isVideoOrImage = isVideo || isImage;\n  if (isImageBitmap || isCanvas || isVideoOrImage) {\n    let resource;\n    if (importVideo) {\n      resource = backend.device.importExternalTexture({\n        source: pixels\n      });\n    } else {\n      if (isVideoOrImage) {\n        const newWillReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n        if (fromPixels2DContext == null || newWillReadFrequently !== willReadFrequently) {\n          willReadFrequently = newWillReadFrequently;\n          fromPixels2DContext = document.createElement('canvas').getContext('2d', {\n            willReadFrequently\n          });\n        }\n        fromPixels2DContext.canvas.width = width;\n        fromPixels2DContext.canvas.height = height;\n        fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n        pixels = fromPixels2DContext.canvas;\n      }\n      const usage = GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING;\n      const format = 'rgba8unorm';\n      const texture = backend.textureManager.acquireTexture(outputShape[1], outputShape[0], format, usage);\n      backend.queue.copyExternalImageToTexture({\n        source: pixels\n      }, {\n        texture\n      }, [outputShape[1], outputShape[0]]);\n      resource = texture;\n    }\n    const size = util.sizeFromShape(outputShape);\n    const strides = util.computeStrides(outputShape);\n    const program = new FromPixelsProgram(outputShape, numChannels, importVideo);\n    const uniformData = [{\n      type: 'uint32',\n      data: [size]\n    }, {\n      type: 'uint32',\n      data: [numChannels]\n    }, {\n      type: 'uint32',\n      data: [...strides]\n    }];\n    const input = backend.makeTensorInfo([height, width], 'int32');\n    const info = backend.tensorMap.get(input.dataId);\n    info.resource = resource;\n    const result = backend.runWebGPUProgram(program, [input], 'int32', uniformData);\n    backend.disposeData(input.dataId);\n    return result;\n  }\n  // TODO: Encoding should happen on GPU once we no longer have to download\n  // image data to the CPU.\n  const imageData = pixels.data;\n  let pixelArray = imageData;\n  if (numChannels != null && numChannels !== 4) {\n    pixelArray = new Uint8Array(pixels.width * pixels.height * numChannels);\n    const dataLength = imageData.length;\n    let j = 0;\n    for (let i = 0; i < dataLength; i++) {\n      if (i % 4 < numChannels) {\n        pixelArray[j++] = imageData[i];\n      }\n    }\n  }\n  const output = backend.makeTensorInfo(outputShape, 'int32', new Int32Array(pixelArray));\n  backend.uploadToGPU(output.dataId);\n  return output;\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main, PixelsOpType } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class FromPixelsProgram {\n  constructor(outputShape, numChannels, importVideo = false) {\n    this.pixelsOpType = PixelsOpType.FROM_PIXELS;\n    this.outputShape = [0];\n    this.variableNames = [];\n    this.workgroupSize = [256, 1, 1]; // The empirical value.\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, [numChannels, 1, 1]);\n    this.importVideo = importVideo;\n    this.shaderKey = `fromPixels_${this.importVideo}`;\n  }\n  getUserCode() {\n    const textureLoad = this.importVideo ? 'textureLoad(src, vec2<i32>(coords.yx));' : 'textureLoad(src, vec2<i32>(coords.yx), 0)';\n    const textureType = this.importVideo ? 'texture_external' : 'texture_2d<f32>';\n    return `\n      @binding(1) @group(0) var src: ${textureType};\n      ${main('index')} {\n        let flatIndex = index * uniforms.numChannels;\n        if (flatIndex < uniforms.size) {\n          let coords = getCoordsFromIndex(flatIndex);\n          let values = ${textureLoad};\n          for (var i = 0; i < uniforms.numChannels; i = i + 1) {\n            result[flatIndex + i] = i32(floor(255.0 * values[i]));\n          }\n        }\n      }\n  `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm } from '@tensorflow/tfjs-core';\nimport { BatchNormProgram } from '../batchnorm_webgpu';\nexport const fusedBatchNormConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgpu',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      x,\n      scale,\n      offset,\n      mean,\n      variance\n    } = inputs;\n    const {\n      varianceEpsilon\n    } = attrs;\n    const webGPUBackend = backend;\n    const batchNormInputs = [x, mean, variance];\n    let offsetShape = null;\n    if (offset != null) {\n      offsetShape = offset.shape;\n      batchNormInputs.push(offset);\n    }\n    let scaleShape = null;\n    if (scale != null) {\n      scaleShape = scale.shape;\n      batchNormInputs.push(scale);\n    }\n    const program = new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape);\n    const uniformData = [{\n      type: 'float32',\n      data: [varianceEpsilon]\n    }];\n    return webGPUBackend.runWebGPUProgram(program, batchNormInputs, x.dtype, uniformData);\n  }\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class BatchNormProgram {\n  constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape) {\n    this.uniforms = 'varianceEpsilon : f32,';\n    // This is an experimental value.\n    this.workgroupSize = [128, 1, 1];\n    this.size = true;\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n    this.outputShape = xShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n    }\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n    }\n    this.offsetShape = offsetShape;\n    this.scaleShape = scaleShape;\n    this.shaderKey = 'batchNorm';\n  }\n  getUserCode() {\n    let offsetSnippet = '0.0';\n    if (this.offsetShape != null) {\n      offsetSnippet = 'getOffsetByOutputIndex(index)';\n    }\n    let scaleSnippet = '1.0';\n    if (this.scaleShape != null) {\n      scaleSnippet = 'getScaleByOutputIndex(index)';\n    }\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size)\n        {\n          let xValue = getXByOutputIndex(index);\n          let meanValue = getMeanByOutputIndex(index);\n          let varianValue = getVarianceByOutputIndex(index);\n          let offsetValue = ${offsetSnippet};\n          let scaleValue = ${scaleSnippet};\n          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));\n          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));\n        }\n      }\n  `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, FusedConv2D } from '@tensorflow/tfjs-core';\nimport { conv2DImpl } from './Conv2D_impl';\nexport function fusedConv2d(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n  return conv2DImpl({\n    x,\n    filter,\n    convInfo,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\nexport const fusedConv2DConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgpu',\n  kernelFunc: fusedConv2d\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, FusedDepthwiseConv2D, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DVec4Program } from '../depthwise_conv2d_vec4_webgpu';\nimport { DepthwiseConv2DProgram } from '../depthwise_conv2d_webgpu';\nexport function fusedDepthwiseConv2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' + `1. Got strides ${strides} and dilations '${$dilations}'`);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n  const programInputs = [x, filter];\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  const dimensions = [{\n    type: 'int32',\n    data: [convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.inHeight, convInfo.inWidth]\n  }];\n  let program;\n  if (convInfo.outHeight > 4 && convInfo.outWidth > 4 && convInfo.strideWidth <= 2 && convInfo.inChannels === convInfo.outChannels && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.inChannels % 4 === 0) {\n    program = new DepthwiseConv2DVec4Program(convInfo, hasBias, activation, hasPreluActivationWeights);\n    dimensions.push({\n      type: 'int32',\n      data: [program.virtualWidth]\n    });\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo, hasBias, activation, hasPreluActivationWeights);\n    dimensions.push({\n      type: 'int32',\n      data: [convInfo.filterHeight]\n    }, {\n      type: 'int32',\n      data: [convInfo.filterWidth]\n    }, {\n      type: 'int32',\n      data: [convInfo.strideHeight, convInfo.strideWidth]\n    }, {\n      type: 'int32',\n      data: [convInfo.dilationHeight, convInfo.dilationWidth]\n    });\n  }\n  if (activation === 'leakyrelu') {\n    dimensions.push({\n      type: 'float32',\n      data: [leakyreluAlpha]\n    });\n    program.uniforms += ' alpha : f32,';\n  }\n  const result = backend.runWebGPUProgram(program, programInputs, 'float32', dimensions);\n  return result;\n}\nexport const fusedDepthwiseConv2DConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgpu',\n  kernelFunc: fusedDepthwiseConv2D\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherNd, util } from '@tensorflow/tfjs-core';\nimport { GatherNDProgram } from '../gather_nd_webgpu';\nimport { gatherNdImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherNd(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    params,\n    indices\n  } = inputs;\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n  const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(params, indices);\n  const flattenIndices = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [numSlices, sliceRank]\n    }\n  });\n  const flattenX = reshape({\n    inputs: {\n      x: params\n    },\n    backend,\n    attrs: {\n      shape: [util.sizeFromShape(params.shape) / sliceSize, sliceSize]\n    }\n  });\n  if (backend.shouldExecuteOnCPU([params, indices]) || params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId);\n    const paramsBuf = backend.bufferSync(params);\n    const outValue = gatherNdImplCPU(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program = new GatherNDProgram(sliceRank, [numSlices, sliceSize]);\n  const uniformData = [{\n    type: 'int32',\n    data: [sliceRank]\n  }, {\n    type: 'int32',\n    data: strides\n  }];\n  const res = backend.runWebGPUProgram(program, [flattenX, flattenIndices], flattenX.dtype, uniformData);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: resultShape\n    }\n  });\n  backend.disposeData(flattenIndices.dataId);\n  backend.disposeData(flattenX.dataId);\n  backend.disposeData(res.dataId);\n  return reshaped;\n}\nexport const gatherNdConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgpu',\n  kernelFunc: gatherNd\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType, getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class GatherNDProgram {\n  constructor(sliceDim, shape) {\n    this.variableNames = ['A', 'indices'];\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `gathernd_${sliceDim}`;\n    this.sliceDim = sliceDim;\n    this.uniforms = `sliceDim : i32, strides : ${getCoordsDataType(sliceDim)},`;\n  }\n  getUserCode() {\n    let strideString;\n    if (this.sliceDim > 1) {\n      strideString = 'uniforms.strides[j]';\n    } else {\n      strideString = 'uniforms.strides';\n    }\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          var flattenIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexTemp = i32(round(getIndices(coords[0], j)));\n            let strideNum = ${strideString};\n            flattenIndex = flattenIndex + indexTemp * strideNum;\n          }\n\n          setOutputAtIndex(index, getA(flattenIndex, coords[1]));\n        }\n      }\n      `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, GatherV2, util } from '@tensorflow/tfjs-core';\nimport { GatherProgram } from '../gather_webgpu';\nimport { gatherV2ImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    indices\n  } = inputs;\n  const {\n    axis,\n    batchDims\n  } = attrs;\n  // Unlike WebGL, WebGPU won't check if index is out of bound by calling\n  // backend.readSync() function in debug mode.\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const toDispose = [];\n  const flattenX = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize, shapeInfo.sliceSize]\n    }\n  });\n  const flattenIndex = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]\n    }\n  });\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n  const flattenOutputShape = [shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize, shapeInfo.sliceSize];\n  if (backend.shouldExecuteOnCPU([x, indices])) {\n    const indicesTensorData = backend.tensorMap.get(flattenIndex.dataId);\n    const indicesValues = indicesTensorData.values;\n    const indicesBuffer = buffer(flattenIndex.shape, flattenIndex.dtype, indicesValues);\n    const flattenXTensorData = backend.tensorMap.get(flattenX.dataId);\n    const xValues = flattenXTensorData.values;\n    const xBuffer = buffer(flattenX.shape, flattenX.dtype, xValues);\n    const outBuf = gatherV2ImplCPU(xBuffer, indicesBuffer, flattenOutputShape);\n    toDispose.forEach(t => backend.disposeData(t.dataId));\n    return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n  }\n  const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  const res = backend.runWebGPUProgram(program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: shapeInfo.outputShape\n    }\n  });\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return reshaped;\n}\nexport const gatherV2Config = {\n  kernelName: GatherV2,\n  backendName: 'webgpu',\n  kernelFunc: gatherV2\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class GatherProgram {\n  constructor(aShape, outputShape) {\n    this.variableNames = ['A', 'indices'];\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = aShape.slice();\n    this.aShape = aShape;\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `gather`;\n  }\n  getUserCode() {\n    const sourceCoords = getSourceCoords(this.aShape);\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let indexZ = i32(getIndices(resRC.x, resRC.z));\n          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);\n          setOutputAtIndex(index, inBounds * getA(${sourceCoords}));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape) {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('indexZ');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Greater } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { greaterImplCPU as cpuGreater } from '../kernel_utils/shared';\nexport const greater = binaryKernelFunc({\n  opType: BinaryOpType.GREATER,\n  cpuKernelImpl: cpuGreater,\n  dtype: 'bool'\n});\nexport const greaterConfig = {\n  kernelName: Greater,\n  backendName: 'webgpu',\n  kernelFunc: greater\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { GreaterEqual } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { greaterEqualImplCPU as cpuGreaterEqual } from '../kernel_utils/shared';\nexport const greaterEqual = binaryKernelFunc({\n  opType: BinaryOpType.GREATER_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: cpuGreaterEqual\n});\nexport const greaterEqualConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'webgpu',\n  kernelFunc: greaterEqual\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IFFT } from '@tensorflow/tfjs-core';\nimport { fftImpl } from './FFT_impl';\nexport function ifft(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    input\n  } = inputs;\n  return fftImpl(input, true /* inverse */, backend);\n}\nexport const ifftConfig = {\n  kernelName: IFFT,\n  backendName: 'webgpu',\n  kernelFunc: ifft\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsFinite } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const isFinite = unaryKernelFunc({\n  opType: UnaryOpType.IS_FINITE,\n  dtype: 'bool'\n});\nexport const isFiniteConfig = {\n  kernelName: IsFinite,\n  backendName: 'webgpu',\n  kernelFunc: isFinite\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsInf } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const isInf = unaryKernelFunc({\n  opType: UnaryOpType.IS_INF,\n  dtype: 'bool'\n});\nexport const isInfConfig = {\n  kernelName: IsInf,\n  backendName: 'webgpu',\n  kernelFunc: isInf\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsNan } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const isNaN = unaryKernelFunc({\n  opType: UnaryOpType.IS_NAN,\n  dtype: 'bool'\n});\nexport const isNaNConfig = {\n  kernelName: IsNan,\n  backendName: 'webgpu',\n  kernelFunc: isNaN\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LeakyRelu } from '@tensorflow/tfjs-core';\nimport { UnaryOpType } from '../unary_op_util';\nimport { UnaryOpProgram } from '../unary_op_webgpu';\nexport function leakyRelu(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    alpha\n  } = attrs;\n  const uniformData = [{\n    type: 'float32',\n    data: [alpha]\n  }];\n  const program = new UnaryOpProgram(x.shape, UnaryOpType.LEAKYRELU, 'alpha : f32,');\n  return backend.runWebGPUProgram(program, [x], 'float32', uniformData);\n}\nexport const leakyReluConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgpu',\n  kernelFunc: leakyRelu\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Less } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { lessImplCPU as cpuLess } from '../kernel_utils/shared';\nexport const less = binaryKernelFunc({\n  opType: BinaryOpType.LESS,\n  dtype: 'bool',\n  cpuKernelImpl: cpuLess\n});\nexport const lessConfig = {\n  kernelName: Less,\n  backendName: 'webgpu',\n  kernelFunc: less\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LessEqual } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { lessEqualImplCPU as cpuLessEqual } from '../kernel_utils/shared';\nexport const lessEqual = binaryKernelFunc({\n  opType: BinaryOpType.LESS_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: cpuLessEqual\n});\nexport const lessEqualConfig = {\n  kernelName: LessEqual,\n  backendName: 'webgpu',\n  kernelFunc: lessEqual\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LinSpace } from '@tensorflow/tfjs-core';\nimport { LinSpaceProgram } from '../lin_space_webgpu';\nexport function linSpace(args) {\n  const {\n    backend,\n    attrs\n  } = args;\n  const {\n    start,\n    stop,\n    num\n  } = attrs;\n  const step = (stop - start) / (num - 1);\n  const program = new LinSpaceProgram(num);\n  const uniformData = [{\n    type: 'float32',\n    data: [start]\n  }, {\n    type: 'float32',\n    data: [step]\n  }];\n  return backend.runWebGPUProgram(program, [], 'float32', uniformData);\n}\nexport const linSpaceConfig = {\n  kernelName: LinSpace,\n  backendName: 'webgpu',\n  kernelFunc: linSpace\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class LinSpaceProgram {\n  constructor(shape) {\n    this.variableNames = [];\n    this.outputShape = [];\n    this.uniforms = 'start : f32, step : f32,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = [shape];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'linSpace';\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          setOutputAtIndex(index, uniforms.start + f32(index) * uniforms.step);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { logImplCPU } from '../kernel_utils/shared';\nimport { UnaryOpType } from '../unary_op_util';\nexport const log = unaryKernelFunc({\n  opType: UnaryOpType.LOG,\n  cpuKernelImpl: logImplCPU\n});\nexport const logConfig = {\n  kernelName: Log,\n  backendName: 'webgpu',\n  kernelFunc: log\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log1p } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const log1p = unaryKernelFunc({\n  opType: UnaryOpType.LOG1P\n});\nexport const log1pConfig = {\n  kernelName: Log1p,\n  backendName: 'webgpu',\n  kernelFunc: log1p\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogicalAnd } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nexport const logicalAnd = binaryKernelFunc({\n  opType: BinaryOpType.LOGICAL_AND,\n  dtype: 'bool'\n});\nexport const logicalAndConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'webgpu',\n  kernelFunc: logicalAnd\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogicalNot } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const logicalNot = unaryKernelFunc({\n  opType: UnaryOpType.LOGICAL_NOT\n});\nexport const logicalNotConfig = {\n  kernelName: LogicalNot,\n  backendName: 'webgpu',\n  kernelFunc: logicalNot\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogicalOr } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nexport const logicalOr = binaryKernelFunc({\n  opType: BinaryOpType.LOGICAL_OR\n});\nexport const logicalOrConfig = {\n  kernelName: LogicalOr,\n  backendName: 'webgpu',\n  kernelFunc: logicalOr\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRN } from '@tensorflow/tfjs-core';\nimport { LRNProgram, LRNSharedProgram } from '../lrn_webgpu';\nexport function lrn(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    depthRadius,\n    bias,\n    alpha,\n    beta\n  } = attrs;\n  // When the adjacent channels is less than or equal to 16, which could cover\n  // most cases, we use shared memory version to get better performance.\n  // The theoretical adjacent channels may be very large, but the shared memory\n  // size of hardware is limited, so we use the naive version when the adjacent\n  // channels is large.\n  let program;\n  if (depthRadius > 16) {\n    program = new LRNProgram(x.shape);\n  } else {\n    program = new LRNSharedProgram(x.shape, depthRadius);\n  }\n  const uniformData = [{\n    type: 'int32',\n    data: [depthRadius]\n  }, {\n    type: 'float32',\n    data: [bias]\n  }, {\n    type: 'float32',\n    data: [alpha]\n  }, {\n    type: 'float32',\n    data: [beta]\n  }];\n  const res = backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n  return res;\n}\nexport const lrnConfig = {\n  kernelName: LRN,\n  backendName: 'webgpu',\n  kernelFunc: lrn\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nconst powOperatorSnippet = `\n  var powValue = 0.0;\n  let basis = uniforms.bias + uniforms.alpha * sum;\n  if (uniforms.beta == 0.5) {\n    powValue = inverseSqrt(basis);\n  } else if (uniforms.beta == 1.0) {\n    powValue = 1.0 / basis;\n  } else {\n    powValue = exp(log(basis) * (-uniforms.beta));\n  }\n`;\nexport class LRNProgram {\n  constructor(xShape) {\n    this.outputShape = [];\n    this.variableNames = ['x'];\n    this.uniforms = 'radius : i32, bias : f32, alpha : f32, beta : f32,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = xShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'lrn';\n  }\n  getUserCode() {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let b = coords[0];\n        let r = coords[1];\n        let c = coords[2];\n        let d = coords[3];\n\n        let x = getX(b, r, c, d);\n        var sum = 0.0;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let idx = d + i;\n          if (idx >= 0 && idx < uniforms.xShape[3]) {\n            let z = getX(b, r, c, idx);\n            sum = sum + z * z;\n          }\n        }\n        ${powOperatorSnippet}\n\n        setOutputAtIndex(index, x * powValue);\n      }\n    }\n  `;\n    return userCode;\n  }\n}\nexport class LRNSharedProgram {\n  constructor(xShape, radius) {\n    this.outputShape = [];\n    this.variableNames = ['x'];\n    this.uniforms = 'radius : i32, bias : f32, alpha : f32, beta : f32,';\n    this.workgroupSize = [256, 1, 1];\n    this.maxAllowRadius = 16;\n    util.assert(radius <= this.maxAllowRadius, () => `Radius must be less than or equal to ${this.maxAllowRadius}, current radius is ${radius}`);\n    this.outputShape = xShape;\n    // The reason why not using this.workgroupSize[0] + 2 * maxAllowRadius here\n    // is to make sure that there is only one time global memory load access for\n    // each thread.\n    this.elementsPerWorkgroup = this.workgroupSize[0] - 2 * this.maxAllowRadius;\n    this.dispatchLayout = {\n      x: [3],\n      y: [2],\n      z: [0, 1]\n    };\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, [this.elementsPerWorkgroup, this.workgroupSize[1], this.workgroupSize[2]]);\n    this.shaderKey = 'lrn_shared';\n  }\n  getUserCode() {\n    const userCode = `\n    var <workgroup>lrnSub: array<f32, ${this.workgroupSize[0]}>;\n    const elementsPerWorkgroup = ${this.elementsPerWorkgroup};\n    const maxAllowRadius = ${this.maxAllowRadius};\n\n    ${main()} {\n      let localDepth = i32(localId.x);\n      let workgroupDepth = i32(workgroupId.x) * elementsPerWorkgroup;\n      let xDepth = workgroupDepth + localDepth - maxAllowRadius;\n      let b = i32(globalId.z) / uniforms.xShape[1];\n      let r = i32(globalId.z) - b * uniforms.xShape[1];\n      let c = i32(globalId.y);\n      let d = workgroupDepth + localDepth;\n\n      var x = 0.0;\n      if (xDepth >= 0 && xDepth < uniforms.xShape[3]) {\n        x = getX(b, r, c, xDepth);\n      }\n      lrnSub[localDepth] = x;\n      workgroupBarrier();\n\n      if (localDepth < elementsPerWorkgroup && d < uniforms.outShape[3]) {\n        var sum = 0.0;\n        let index = localDepth + maxAllowRadius;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let z = lrnSub[index + i];\n          sum = sum + z * z;\n        }\n        ${powOperatorSnippet}\n\n        setOutputAtCoords(b, r, c, d, lrnSub[index] * powValue);\n      }\n    } `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRNGrad } from '@tensorflow/tfjs-core';\nimport { LRNGradProgram } from '../lrn_grad_webgpu';\nexport function lrnGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    y,\n    dy\n  } = inputs;\n  const {\n    depthRadius,\n    bias,\n    alpha,\n    beta\n  } = attrs;\n  const program = new LRNGradProgram(x.shape);\n  const uniformData = [{\n    type: 'int32',\n    data: [depthRadius]\n  }, {\n    type: 'float32',\n    data: [bias]\n  }, {\n    type: 'float32',\n    data: [alpha]\n  }, {\n    type: 'float32',\n    data: [beta]\n  }];\n  const res = backend.runWebGPUProgram(program, [x, y, dy], x.dtype, uniformData);\n  return res;\n}\nexport const lrnGradConfig = {\n  kernelName: LRNGrad,\n  backendName: 'webgpu',\n  kernelFunc: lrnGrad\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class LRNGradProgram {\n  constructor(inputShape) {\n    this.outputShape = [];\n    this.variableNames = ['inputImage', 'outputImage', 'dy'];\n    this.uniforms = 'depthRadius : i32, bias : f32, alpha : f32, beta : f32,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = inputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'lrn_grad';\n  }\n  getUserCode() {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let b = coords[0];\n        let r = coords[1];\n        let c = coords[2];\n\n        let MIN_DEPTH_BEGIN = 0;\n        let MAX_DEPTH_END = uniforms.outShape[3];\n        var result = 0.0;\n        for (var d = MIN_DEPTH_BEGIN; d < MAX_DEPTH_END; d++) {\n          let depthBegin = max(MIN_DEPTH_BEGIN, d - uniforms.depthRadius);\n          let depthEnd = min(MAX_DEPTH_END, d + uniforms.depthRadius + 1);\n\n          var norm = 0.0;\n          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {\n            if (k < depthBegin) {\n              continue;\n            } else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            } else {\n              break;\n            }\n          }\n\n          norm = uniforms.alpha * norm + uniforms.bias;\n\n          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {\n            if (k < depthBegin) {\n              continue;\n            } else if (k >= depthBegin && k < depthEnd) {\n              var dyi = -2.0 * uniforms.alpha * uniforms.beta\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d) / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * uniforms.beta);\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            } else {\n              break;\n            }\n          }\n        }\n\n        setOutputAtIndex(index, result);\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Maximum } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { maximumImplCPU as cpuMaximum } from '../kernel_utils/shared';\nexport const maximum = binaryKernelFunc({\n  opType: BinaryOpType.MAX,\n  cpuKernelImpl: cpuMaximum\n});\nexport const maximumConfig = {\n  kernelName: Maximum,\n  backendName: 'webgpu',\n  kernelFunc: maximum\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool } from '@tensorflow/tfjs-core';\nimport { poolImpl } from './Pool_impl';\nexport function maxPool(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const dilations = 1;\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  return poolImpl(x, convInfo, 'max', backend);\n}\nexport const maxPoolConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgpu',\n  kernelFunc: maxPool\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool3D } from '@tensorflow/tfjs-core';\nimport { Pool3DProgram } from '../pool_webgpu';\nexport function maxPool3d(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode\n  } = attrs;\n  const dilations = [1, 1, 1];\n  const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);\n  const maxPoolProgram = new Pool3DProgram(convInfo, 'max');\n  const dimensions = [{\n    type: 'int32',\n    data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.inDepth, convInfo.inHeight, convInfo.inWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n  }];\n  return backend.runWebGPUProgram(maxPoolProgram, [x], x.dtype, dimensions);\n}\nexport const maxPool3DConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'webgpu',\n  kernelFunc: maxPool3d\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool3DGrad } from '@tensorflow/tfjs-core';\nimport { MaxPool3DBackpropProgram } from '../max_pool_backprop_webgpu';\nimport { Pool3DProgram } from '../pool_webgpu';\nexport function maxPool3DGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input\n  } = inputs;\n  const x = input;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const dilations = [1, 1, 1];\n  const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  const maxPool3dPositionsProgram = new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  let uniformData = [{\n    type: 'int32',\n    data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.inDepth, convInfo.inHeight, convInfo.inWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n  }];\n  const maxPool3dPositions = backend.runWebGPUProgram(maxPool3dPositionsProgram, [x], 'int32', uniformData);\n  const maxPool3dBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  uniformData = [{\n    type: 'int32',\n    data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterDepth - 1 - convInfo.padInfo.front, convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top, convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outDepth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outHeight]\n  }, {\n    type: 'int32',\n    data: [convInfo.outWidth]\n  }];\n  const result = backend.runWebGPUProgram(maxPool3dBackpropProgram, [dy, maxPool3dPositions], x.dtype, uniformData);\n  backend.disposeData(maxPool3dPositions.dataId);\n  return result;\n}\nexport const maxPool3DGradConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgpu',\n  kernelFunc: maxPool3DGrad\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class MaxPool2DBackpropProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy', 'maxPos'];\n    this.uniforms = `strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32`;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = convInfo.inShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'maxPool2DBackprop';\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d = coords[3];\n\n        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;\n        let dyRCorner = dyRCCorner.x;\n        let dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] - 1;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR += uniforms.dilations[0]) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC += uniforms.dilations[1]) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            let dyValue = getDy(batch, idyR, idyC, d);\n            let maxPosValue = lastIndex - i32(getMaxPos(batch, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            let curPosValue = wR * uniforms.filterDims[1] + wC;\n            let mask = select(0.0, 1.0, maxPosValue == curPosValue);\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `;\n    return userCode;\n  }\n}\nexport class MaxPool3DBackpropProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy', 'maxPos'];\n    this.uniforms = `strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,\n      outDepth : i32, outHeight : i32, outWidth : i32`;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = convInfo.inShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'maxPool3DBackprop';\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let ch = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyDCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] * uniforms.filterDims[2] - 1;\n\n        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {\n          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);\n\n          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {\n            continue;\n          }\n          let idyD = i32(dyD);\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              let maxPosValue = lastIndex - i32(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              let curPosValue = wD * uniforms.filterDims[1] * uniforms.filterDims[2] + wR * uniforms.filterDims[2] + wC;\n              let mask = select(0.0, 1.0, maxPosValue == curPosValue);\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPoolGrad } from '@tensorflow/tfjs-core';\nimport { MaxPool2DBackpropProgram } from '../max_pool_backprop_webgpu';\nimport { Pool2DProgram } from '../pool_webgpu';\nimport { assertNotComplex } from '../webgpu_util';\nexport function maxPoolGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input,\n    output\n  } = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n  const maxPoolPositionsProgram = new Pool2DProgram(convInfo, 'max', true);\n  let uniformData = [{\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.dilationHeight, convInfo.dilationWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.inHeight, convInfo.inWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n  }];\n  const maxPoolPositions = backend.runWebGPUProgram(maxPoolPositionsProgram, [x], 'int32', uniformData);\n  const maxPoolBackpropProgram = new MaxPool2DBackpropProgram(convInfo);\n  uniformData = [{\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top, convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.dilationHeight, convInfo.dilationWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.outHeight]\n  }, {\n    type: 'int32',\n    data: [convInfo.outWidth]\n  }];\n  const result = backend.runWebGPUProgram(maxPoolBackpropProgram, [dy, maxPoolPositions], x.dtype, uniformData);\n  backend.disposeData(maxPoolPositions.dataId);\n  return result;\n}\nexport const maxPoolGradConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgpu',\n  kernelFunc: maxPoolGrad\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { Pool2DProgram } from '../pool_webgpu';\nexport function maxPoolWithArgmax(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    filterSize,\n    strides,\n    pad,\n    includeBatchInIndex\n  } = attrs;\n  const {\n    x\n  } = inputs;\n  util.assert(x.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x.shape.length}.`);\n  const dilations = [1, 1];\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad);\n  const uniformData = [{\n    type: 'int32',\n    data: [convInfo.strideHeight, convInfo.strideWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.padInfo.top, convInfo.padInfo.left]\n  }, {\n    type: 'int32',\n    data: [convInfo.dilationHeight, convInfo.dilationWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.inHeight, convInfo.inWidth]\n  }, {\n    type: 'int32',\n    data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n  }];\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput = backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput = backend.runWebGPUProgram(program, [x], 'int32', uniformData);\n  return [poolOutput, indexOutput];\n}\nexport const maxPoolWithArgmaxConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgpu',\n  kernelFunc: maxPoolWithArgmax\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Min } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nexport function min(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  return reduce(x, axis, keepDims, 'min', backend);\n}\nexport const minConfig = {\n  kernelName: Min,\n  backendName: 'webgpu',\n  kernelFunc: min\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Minimum } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { minimumImplCPU as cpuMinimum } from '../kernel_utils/shared';\nexport const minimum = binaryKernelFunc({\n  opType: BinaryOpType.MIN,\n  cpuKernelImpl: cpuMinimum\n});\nexport const minimumConfig = {\n  kernelName: Minimum,\n  backendName: 'webgpu',\n  kernelFunc: minimum\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MirrorPad } from '@tensorflow/tfjs-core';\nimport { MirrorPadProgram } from '../mirror_pad_webgpu';\nexport const mirrorPadConfig = {\n  kernelName: MirrorPad,\n  backendName: 'webgpu',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    const {\n      paddings,\n      mode\n    } = attrs;\n    const webGPUBackend = backend;\n    const uniformData = paddings.map(p => {\n      return {\n        type: 'int32',\n        data: [p[0], p[1]]\n      };\n    });\n    const program = new MirrorPadProgram(x.shape, paddings, mode);\n    const output = webGPUBackend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n    return output;\n  }\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType, getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class MirrorPadProgram {\n  constructor(xShape, paddings, mode) {\n    this.uniforms = '';\n    this.variableNames = ['x'];\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.xShape = xShape;\n    paddings.map((_, i) => {\n      this.uniforms += ` pad${i} : vec2<i32>,`;\n    });\n    this.offset = mode === 'reflect' ? 0 : 1;\n    this.shaderKey = `mirrorPad_${mode}`;\n  }\n  getUserCode() {\n    const rank = this.xShape.length;\n    // The length of paddings are same with the rank of the input tensor.\n    const start = this.xShape.map((_, i) => `uniforms.pad${i}[0]`).join(',');\n    const end = this.xShape.map((_, i) => `uniforms.pad${i}[0] + uniforms.xShape${rank > 1 ? `[${i}]` : ''}`).join(',');\n    const shaderStart = rank === 1 ? 'start' : 'start[i]';\n    const shaderEnd = rank === 1 ? 'end' : 'end[i]';\n    const shaderOutC = rank === 1 ? 'outC' : 'outC[i]';\n    const dtype = getCoordsDataType(rank);\n    const unpackedCoords = rank > 1 ? ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank) : 'coords';\n    return `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let start = ${dtype}(${start});\n          let end = ${dtype}(${end});\n          var outC = getCoordsFromIndex(index);\n          for (var i = 0; i < ${rank}; i = i + 1) {\n            if (${shaderOutC} < ${shaderStart}) {\n              ${shaderOutC} = ${shaderStart} * 2 - ${shaderOutC} - ${this.offset};\n            } else if(${shaderOutC} >= ${shaderEnd}) {\n              ${shaderOutC} = (${shaderEnd} - 1) * 2 - ${shaderOutC} + ${this.offset};\n            }\n          }\n          let coords = outC - start;\n          setOutputAtIndex(index, getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Mod } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nexport const mod = binaryKernelFunc({\n  opType: BinaryOpType.MOD\n});\nexport const modConfig = {\n  kernelName: Mod,\n  backendName: 'webgpu',\n  kernelFunc: mod\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial } from '@tensorflow/tfjs-core';\nimport { MultinomialProgram } from '../multinomial_webgpu';\nimport { softmax } from './Softmax';\nexport function multinomial(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    logits\n  } = inputs;\n  const {\n    numSamples,\n    seed,\n    normalized\n  } = attrs;\n  const probs = normalized ? logits : softmax({\n    inputs: {\n      logits\n    },\n    backend,\n    attrs: {\n      dim: logits.shape.length - 1\n    }\n  });\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numSamples);\n  const uniformData = [{\n    type: 'float32',\n    data: [seed]\n  }, {\n    type: 'int32',\n    data: [numOutcomes]\n  }];\n  const res = backend.runWebGPUProgram(program, [probs], 'int32', uniformData);\n  if (!normalized) {\n    backend.disposeData(probs.dataId);\n  }\n  return res;\n}\nexport const multinomialConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgpu',\n  kernelFunc: multinomial\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class MultinomialProgram {\n  constructor(batchSize, numSamples) {\n    this.variableNames = ['probs'];\n    this.outputShape = [];\n    this.uniforms = 'seed : f32, numOutcomes: i32,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = [batchSize, numSamples];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'multinomial';\n  }\n  getUserCode() {\n    const userCode = `\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    fn random (seed : f32, resultUV : vec2<f32>) -> f32 {\n      let HASHSCALE1 = 443.8975;\n      let p = resultUV * seed;\n      var p3  = fract(vec3<f32>(p.xyx) * HASHSCALE1);\n      p3 = p3 + dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n\n        let resUV = vec2<f32>(f32(coords[1]) / f32(uniforms.outShape[1]),\n            f32(coords[0]) / f32(uniforms.outShape[0]));\n        let r = random(uniforms.seed, resUV);\n        var cdf = 0.0;\n        for (var i = 0; i < uniforms.numOutcomes - 1; i = i + 1) {\n          cdf = cdf + getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutputAtIndexI32(index, i);\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutputAtIndexI32(index, uniforms.numOutcomes - 1);\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Softmax, util } from '@tensorflow/tfjs-core';\nimport { SoftmaxProgram } from '../softmax_webgpu';\nimport { reshape } from './Reshape';\nexport function softmax(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    logits\n  } = inputs;\n  const {\n    dim\n  } = attrs;\n  const logitsReshaped = reshape({\n    inputs: {\n      x: logits\n    },\n    backend,\n    attrs: {\n      shape: [util.sizeFromShape(logits.shape) / logits.shape[dim], logits.shape[dim]]\n    }\n  });\n  const program = new SoftmaxProgram(logitsReshaped.shape);\n  const res = backend.runWebGPUProgram(program, [logitsReshaped], logits.dtype);\n  const resReshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: logits.shape\n    }\n  });\n  backend.disposeData(logitsReshaped.dataId);\n  backend.disposeData(res.dataId);\n  return resReshaped;\n}\nexport const softmaxConfig = {\n  kernelName: Softmax,\n  backendName: 'webgpu',\n  kernelFunc: softmax\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { flatDispatchLayout } from './webgpu_util';\nexport class SoftmaxProgram {\n  constructor(outputShape) {\n    this.variableNames = ['logits'];\n    this.outputShape = outputShape; // [rows, cols]\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = [this.outputShape[0], 1, 1];\n    if (this.outputShape[1] >= 4096) {\n      this.workgroupSize = [256, 1, 1];\n    } else {\n      this.workgroupSize = [64, 1, 1];\n    }\n    this.shaderKey = 'softmax';\n  }\n  getUserCode() {\n    const userCode = `\n    var<workgroup> buf : array<f32, ${this.workgroupSize[0]}>;\n    var<workgroup> rowMaxShared : f32;\n    var<workgroup> rowSumShared : f32;\n    const blockSize = ${this.workgroupSize[0]};\n    ${main('index')} {\n      let row = index / blockSize;\n      let tid = i32(localId.x);\n      let cols = uniforms.outShape[1];\n\n      var threadMax = -3.402823e+38f;\n      for (var col = tid; col < cols; col += blockSize) {\n        let value = getLogits(row, col);\n        threadMax = max(threadMax, value);\n      }\n      if (tid < cols) {\n        buf[tid] = threadMax;\n      }\n      workgroupBarrier();\n\n      var reduceSize = min(cols, blockSize);\n      for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n        reduceSize = currSize + (reduceSize & 1);\n        if (tid < currSize) {\n          buf[tid] = max(buf[tid], buf[tid + reduceSize]);\n        }\n        workgroupBarrier();\n      }\n\n      if (tid == 0) {\n        rowMaxShared = buf[0];\n      }\n      workgroupBarrier();\n\n      var threadSum = 0.0;\n      for (var col = tid; col < cols; col += blockSize) {\n        let subExp = exp(getLogits(row, col) - rowMaxShared);\n        threadSum += subExp;\n      }\n      buf[tid] = threadSum;\n      workgroupBarrier();\n\n      for (var currSize = blockSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n        if (tid < currSize) {\n          buf[tid] = buf[tid] + buf[tid + currSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (tid == 0) {\n        rowSumShared = buf[0];\n      }\n      workgroupBarrier();\n\n      for (var col = tid; col < cols; col += blockSize) {\n        let value = exp(getLogits(row, col) - rowMaxShared) / rowSumShared;\n        setOutputAtCoords(row, col, value);\n      }\n  }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Neg } from '@tensorflow/tfjs-core';\nimport { negImplCPU } from '../kernel_utils/shared';\nimport { UnaryOpType } from '../unary_op_util';\nimport { UnaryOpProgram } from '../unary_op_webgpu';\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.tensorMap.get(x.dataId);\n    const [outValues, newShape] = negImplCPU(xData.values, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n  const program = new UnaryOpProgram(x.shape, UnaryOpType.NEG);\n  return backend.runWebGPUProgram(program, [x], x.dtype);\n}\nexport const negConfig = {\n  kernelName: Neg,\n  backendName: 'webgpu',\n  kernelFunc: neg\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { kernel_impls, NonMaxSuppressionV3 } from '@tensorflow/tfjs-core';\nexport function nonMaxSuppressionV3(args) {\n  console.warn('tf.nonMaxSuppression() in webgpu locks the UI thread. ' + 'Call tf.nonMaxSuppressionAsync() instead');\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    boxes,\n    scores\n  } = inputs;\n  const {\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold\n  } = attrs;\n  const boxesVals = backend.readSync(boxes.dataId);\n  const scoresVals = backend.readSync(scores.dataId);\n  const {\n    selectedIndices\n  } = kernel_impls.nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  return backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\nexport const nonMaxSuppressionV3Config = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgpu',\n  kernelFunc: nonMaxSuppressionV3\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { kernel_impls, NonMaxSuppressionV5 } from '@tensorflow/tfjs-core';\nexport function nonMaxSuppressionV5(args) {\n  console.warn('tf.nonMaxSuppression() in webgpu locks the UI thread. ' + 'Call tf.nonMaxSuppressionAsync() instead');\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    boxes,\n    scores\n  } = inputs;\n  const {\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  } = attrs;\n  const boxesVals = backend.readSync(boxes.dataId);\n  const scoresVals = backend.readSync(scores.dataId);\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n  const {\n    selectedIndices,\n    selectedScores\n  } = kernel_impls.nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);\n  return [backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)), backend.makeTensorInfo([selectedScores.length], 'float32', new Float32Array(selectedScores))];\n}\nexport const nonMaxSuppressionV5Config = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgpu',\n  kernelFunc: nonMaxSuppressionV5\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OneHot, util } from '@tensorflow/tfjs-core';\nimport { OneHotProgram } from '../onehot_webgpu';\nimport { reshape } from './Reshape';\nexport function oneHot(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    indices\n  } = inputs;\n  const {\n    dtype,\n    depth,\n    onValue,\n    offValue\n  } = attrs;\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth);\n  const reshaped = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [indicesSize]\n    }\n  });\n  const uniformData = [{\n    type: 'float32',\n    data: [onValue]\n  }, {\n    type: 'float32',\n    data: [offValue]\n  }];\n  const result = backend.runWebGPUProgram(program, [reshaped], dtype, uniformData);\n  backend.disposeData(reshaped.dataId);\n  const outShape = [...indices.shape, depth];\n  const out = reshape({\n    inputs: {\n      x: result\n    },\n    backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  backend.disposeData(result.dataId);\n  return out;\n}\nexport const oneHotConfig = {\n  kernelName: OneHot,\n  backendName: 'webgpu',\n  kernelFunc: oneHot\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class OneHotProgram {\n  constructor(numIndices, depth) {\n    this.variableNames = ['x'];\n    this.uniforms = 'onValue : f32, offValue : f32,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = [numIndices, depth];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'onehot';\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          setOutputAtIndex(index, mix(uniforms.offValue, uniforms.onValue,\n                                      f32(i32(round(getX(coords.x))) == coords.y)));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OnesLike } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { fill } from './Fill';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { zerosLike } from './ZerosLike';\nexport function onesLike(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const r = onesLike({\n      inputs: {\n        x: realPart\n      },\n      backend\n    });\n    const imagPart = imag({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const i = zerosLike({\n      inputs: {\n        x: imagPart\n      },\n      backend\n    });\n    const result = complex({\n      inputs: {\n        real: r,\n        imag: i\n      },\n      backend\n    });\n    backend.disposeData(realPart.dataId);\n    backend.disposeData(r.dataId);\n    backend.disposeData(imagPart.dataId);\n    backend.disposeData(i.dataId);\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: 1\n      },\n      backend\n    });\n  }\n}\nexport const onesLikeConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgpu',\n  kernelFunc: onesLike\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ZerosLike } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { fill } from './Fill';\nimport { imag } from './Imag';\nimport { real } from './Real';\nexport function zerosLike(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  if (x.dtype === 'complex64') {\n    const realPart = real({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const r = zerosLike({\n      inputs: {\n        x: realPart\n      },\n      backend\n    });\n    const imagPart = imag({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const i = zerosLike({\n      inputs: {\n        x: imagPart\n      },\n      backend\n    });\n    const result = complex({\n      inputs: {\n        real: r,\n        imag: i\n      },\n      backend\n    });\n    backend.disposeData(realPart.dataId);\n    backend.disposeData(r.dataId);\n    backend.disposeData(imagPart.dataId);\n    backend.disposeData(i.dataId);\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: x.dtype === 'string' ? '' : 0\n      },\n      backend\n    });\n  }\n}\nexport const zerosLikeConfig = {\n  kernelName: ZerosLike,\n  backendName: 'webgpu',\n  kernelFunc: zerosLike\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pack, util } from '@tensorflow/tfjs-core';\nimport { concat } from './Concat';\nimport { expandDims } from './ExpandDims';\nexport function pack(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    axis\n  } = attrs;\n  if (inputs.length === 1) {\n    return expandDims({\n      inputs: {\n        input: inputs[0]\n      },\n      backend,\n      attrs: {\n        dim: axis\n      }\n    });\n  }\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n  inputs.forEach(t => {\n    util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n    util.assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');\n  });\n  const intermediateTensorInfos = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT = expandDims({\n      inputs: {\n        input: t\n      },\n      backend,\n      attrs: {\n        dim: axis\n      }\n    });\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n  const result = concat({\n    inputs: expandedTensors,\n    backend,\n    attrs: {\n      axis\n    }\n  });\n  intermediateTensorInfos.forEach(t => backend.disposeData(t.dataId));\n  return result;\n}\nexport const packConfig = {\n  kernelName: Pack,\n  backendName: 'webgpu',\n  kernelFunc: pack\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { PadV2, util } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nimport { PadProgram } from '../pad_webgpu';\nimport { fill } from './Fill';\nexport const padV2 = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    paddings,\n    constantValue\n  } = attrs;\n  if (paddings.every(p => util.arraysEqual(p, [0, 0]))) {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n  if (util.sizeFromShape(x.shape) === 0) {\n    // Short-circuit the computation, since x doesn't have value, only\n    // the shape is used to compute output shape to pad.\n    const outputShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n    return fill({\n      backend,\n      attrs: {\n        shape: outputShape,\n        value: constantValue,\n        dtype: x.dtype\n      }\n    });\n  }\n  const uniformData = [{\n    type: 'float32',\n    data: [constantValue]\n  }];\n  paddings.map(p => uniformData.push({\n    type: 'int32',\n    data: [p[0], p[1]]\n  }));\n  const program = new PadProgram(x.shape, paddings);\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n};\nexport const padV2Config = {\n  kernelName: PadV2,\n  backendName: 'webgpu',\n  kernelFunc: padV2\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType, getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport function padCommon(shape, fillZero = false) {\n  const rank = shape.length;\n  const type = getCoordsDataType(rank);\n  const start = shape.map((_, i) => `uniforms.pad${i}[0]`).join(',');\n  const end = shape.map((_, i) => `uniforms.pad${i}[0] + uniforms.xShape${rank > 1 ? `[${i}]` : ''}`).join(',');\n  const startValue = rank > 1 ? `${type}(${start})` : `${start}`;\n  const endValue = rank > 1 ? `${type}(${end})` : `${end}`;\n  const leftPadCondition = rank > 1 ? `any(paddedCoords < start)` : `paddedCoords < start`;\n  const rightPadCondition = rank > 1 ? `any(paddedCoords >= end)` : `paddedCoords >= end`;\n  const unpackedCoords = rank > 1 ? ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank) : 'coords';\n  return `\n        let start = ${startValue};\n        let end = ${endValue};\n        if (${leftPadCondition} || ${rightPadCondition}) {\n          setOutputAtIndex(index, ${fillZero ? 0.0 : 'uniforms.constantValue'});\n        } else {\n          let coords = paddedCoords - start;\n          setOutputAtIndex(index, getX(${unpackedCoords}));\n        }\n  `;\n}\nexport class PadProgram {\n  constructor(xShape, paddings) {\n    this.variableNames = ['x'];\n    this.uniforms = 'constantValue : f32,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    paddings.map((_, i) => {\n      this.uniforms += ` pad${i} : vec2<i32>,`;\n    });\n    this.xShape = xShape;\n    this.shaderKey = 'pad';\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let paddedCoords = getCoordsFromIndex(index);\n          ${padCommon(this.xShape)}\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pow } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nexport const pow = binaryKernelFunc({\n  opType: BinaryOpType.POW\n});\nexport const powConfig = {\n  kernelName: Pow,\n  backendName: 'webgpu',\n  kernelFunc: pow\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Prelu } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { BinaryOpProgram } from '../binary_op_webgpu';\nexport function prelu(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x,\n    alpha\n  } = inputs;\n  const program = new BinaryOpProgram(BinaryOpType.PRELU, x.shape, alpha.shape);\n  return backend.runWebGPUProgram(program, [x, alpha], 'float32');\n}\nexport const preluConfig = {\n  kernelName: Prelu,\n  backendName: 'webgpu',\n  kernelFunc: prelu\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Prod } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nexport function prod(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  return reduce(x, axis, keepDims, 'prod', backend);\n}\nexport const prodConfig = {\n  kernelName: Prod,\n  backendName: 'webgpu',\n  kernelFunc: prod\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Range } from '@tensorflow/tfjs-core';\nimport { rangeImplCPU } from '../kernel_utils/shared';\nexport const range = args => {\n  const {\n    backend,\n    attrs\n  } = args;\n  const {\n    start,\n    stop,\n    step,\n    dtype\n  } = attrs;\n  const values = rangeImplCPU(start, stop, step, dtype);\n  return backend.makeTensorInfo([values.length], dtype, values);\n};\nexport const rangeConfig = {\n  kernelName: Range,\n  backendName: 'webgpu',\n  kernelFunc: range\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RealDiv } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nexport const realDiv = binaryKernelFunc({\n  opType: BinaryOpType.DIV\n});\nexport const realDivConfig = {\n  kernelName: RealDiv,\n  backendName: 'webgpu',\n  kernelFunc: realDiv\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reciprocal } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const reciprocal = unaryKernelFunc({\n  opType: UnaryOpType.RECIPROCAL\n});\nexport const reciprocalConfig = {\n  kernelName: Reciprocal,\n  backendName: 'webgpu',\n  kernelFunc: reciprocal\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Relu } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const relu = unaryKernelFunc({\n  opType: UnaryOpType.RELU\n});\nexport const reluConfig = {\n  kernelName: Relu,\n  backendName: 'webgpu',\n  kernelFunc: relu\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Relu6 } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const relu6 = unaryKernelFunc({\n  opType: UnaryOpType.RELU6\n});\nexport const relu6Config = {\n  kernelName: Relu6,\n  backendName: 'webgpu',\n  kernelFunc: relu6\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeBilinear } from '@tensorflow/tfjs-core';\nimport { ResizeBilinearProgram } from '../resize_bilinear_webgpu';\nexport function resizeBilinear(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    images\n  } = inputs;\n  const {\n    alignCorners,\n    size,\n    halfPixelCenters\n  } = attrs;\n  const [newHeight, newWidth] = size;\n  const adjustHeight = alignCorners && newHeight > 1 ? 1.0 : 0.0;\n  const adjustWidth = alignCorners && newWidth > 1 ? 1.0 : 0.0;\n  const halfPixelCentersValue = halfPixelCenters ? 0.5 : 0.0;\n  const uniformData = [{\n    type: 'float32',\n    data: [adjustHeight, adjustWidth]\n  }, {\n    type: 'float32',\n    data: [halfPixelCentersValue]\n  }];\n  const program = new ResizeBilinearProgram(images.shape, newHeight, newWidth);\n  return backend.runWebGPUProgram(program, [images], 'float32', uniformData);\n}\nexport const resizeBilinearConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgpu',\n  kernelFunc: resizeBilinear\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class ResizeBilinearProgram {\n  constructor(inputShape, newHeight, newWidth) {\n    this.variableNames = ['x'];\n    this.uniforms = 'adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = [inputShape[0], newHeight, newWidth, inputShape[3]];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `resizeBilinear`;\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC =\n            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *\n            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);\n\n          // Compute the four integer indices.\n          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);\n          let sourceCeilRC = vec2<i32>(\n            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));\n\n          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);\n          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);\n          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);\n          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);\n\n          let top = topLeft + (topRight - topLeft) * fracRC.y;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n          let newValue = top + (bottom - top) * fracRC.x;\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeBilinearGrad } from '@tensorflow/tfjs-core';\nimport { ResizeBilinearBackpropProgram } from '../resize_bilinear_backprop_webgpu';\nexport function resizeBilinearGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    images,\n    dy\n  } = inputs;\n  const {\n    alignCorners\n  } = attrs;\n  const [, xHeight, xWidth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n  const effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];\n  const effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = Math.ceil(invHeightScale) * 2 + 2;\n  const winWidth = Math.ceil(invWidthScale) * 2 + 2;\n  const program = new ResizeBilinearBackpropProgram(images.shape, alignCorners);\n  const uniformData = [{\n    type: 'int32',\n    data: effectiveXSize\n  }, {\n    type: 'int32',\n    data: effectiveYSize\n  }, {\n    type: 'float32',\n    data: [heightScale]\n  }, {\n    type: 'float32',\n    data: [widthScale]\n  }, {\n    type: 'float32',\n    data: [invHeightScale]\n  }, {\n    type: 'float32',\n    data: [invWidthScale]\n  }, {\n    type: 'int32',\n    data: [winHeight]\n  }, {\n    type: 'int32',\n    data: [winWidth]\n  }];\n  return backend.runWebGPUProgram(program, [dy], dy.dtype, uniformData);\n}\nexport const resizeBilinearGradConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'webgpu',\n  kernelFunc: resizeBilinearGrad\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class ResizeBilinearBackpropProgram {\n  constructor(inputShape, alignCorners) {\n    this.variableNames = ['dy'];\n    this.uniforms = `effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, heightScale : f32, widthScale : f32,\n       invHeightScale : f32, invWidthScale : f32, winHeight : i32, winWidth : i32,`;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = inputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.alignCorners = alignCorners;\n    this.shaderKey = `resizeBilinearBackprop_${alignCorners}`;\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let b = coords[0];\n          let d = coords[3];\n          let r = coords[1];\n          let c = coords[2];\n\n          var accumulator = 0.0;\n\n          // Compute bounds for where in dy we will look\n          let startRLerp = floor(f32(r) * uniforms.invHeightScale);\n          let startDyR = i32(startRLerp - f32(uniforms.winHeight / 2));\n\n          let startCLerp = floor(f32(c) * uniforms.invWidthScale);\n          let startDyC = i32(startCLerp - f32(uniforms.winWidth / 2));\n\n          // Loop over dy\n          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {\n            let dyR = startDyR + dyROffset;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {\n              continue;\n            }\n\n            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {\n              let dyC = startDyC + dyCOffset;\n\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {\n                continue;\n              }\n\n              let dxR = f32(dyR) * uniforms.heightScale;\n              let topDxRIndex = i32(floor(dxR));\n              let bottomDxRIndex = i32(min(ceil(dxR), f32(uniforms.outShape[1] - 1)));\n              let dxRLerp = dxR - f32(topDxRIndex);\n              let inverseDxRLerp = 1.0 - dxRLerp;\n\n              let dxC = f32(dyC) * uniforms.widthScale;\n              let leftDxCIndex = i32(floor(dxC));\n              let rightDxCIndex = i32(min(ceil(dxC), f32(uniforms.outShape[2] - 1)));\n              let dxCLerp = dxC - f32(leftDxCIndex);\n              let inverseDxCLerp = 1.0 - dxCLerp;\n\n              if (r == topDxRIndex && c == leftDxCIndex) {\n                // topLeft\n                accumulator +=\n                  getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n              }\n\n              if (r == topDxRIndex && c == rightDxCIndex) {\n                // topRight\n                accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n              }\n\n              if (r == bottomDxRIndex && c == leftDxCIndex) {\n                // bottomLeft\n                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n              }\n\n              if (r == bottomDxRIndex && c == rightDxCIndex) {\n                // bottomRight\n                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n              }\n            }\n          }\n          // End loop over dy\n\n          setOutputAtIndex(index, accumulator);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeNearestNeighbor } from '@tensorflow/tfjs-core';\nimport { ResizeNearestNeighborProgram } from '../resize_nearest_neighbor_webgpu';\nexport function resizeNearestNeighbor(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    images\n  } = inputs;\n  const {\n    alignCorners,\n    halfPixelCenters,\n    size\n  } = attrs;\n  const [newHeight, newWidth] = size;\n  const adjustHeight = alignCorners && newHeight > 1 ? 1.0 : 0.0;\n  const adjustWidth = alignCorners && newWidth > 1 ? 1.0 : 0.0;\n  // When align corners is false, we rounds the value with floor.\n  const roundBase = alignCorners ? 0.5 : 0.0;\n  const uniformData = [{\n    type: 'float32',\n    data: [adjustHeight, adjustWidth]\n  }, {\n    type: 'float32',\n    data: [roundBase]\n  }];\n  const program = new ResizeNearestNeighborProgram(images.shape, newHeight, newWidth, halfPixelCenters);\n  return backend.runWebGPUProgram(program, [images], images.dtype, uniformData);\n}\nexport const resizeNearestNeighborConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgpu',\n  kernelFunc: resizeNearestNeighbor\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class ResizeNearestNeighborProgram {\n  constructor(inputShape, newHeight, newWidth, halfPixelCenters) {\n    this.variableNames = ['x'];\n    this.uniforms = 'adjustHeightWidth : vec2<f32>, roundBase : f32,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = [inputShape[0], newHeight, newWidth, inputShape[3]];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.halfPixelCenters = halfPixelCenters;\n    this.shaderKey = `resizeNearest_${halfPixelCenters}`;\n  }\n  getUserCode() {\n    let sourceFracIndexRC;\n    if (this.halfPixelCenters) {\n      sourceFracIndexRC = `max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC` + `, vec2<f32>(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2<f32>(rc) * effectiveInputOverOutputRatioRC`;\n    }\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC = ${sourceFracIndexRC};\n\n          // Compute the coordinators of nearest neighbor point.\n          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));\n          let sourceNearestRC = vec2<i32>(\n            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));\n          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeNearestNeighborGrad } from '@tensorflow/tfjs-core';\nimport { ResizeNearestNeigborBackpropProgram } from '../resize_nearest_neighbor_backprop_webgpu';\nexport function resizeNearestNeighborGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    images,\n    dy\n  } = inputs;\n  const {\n    alignCorners\n  } = attrs;\n  const [, xHeight, xWidth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n  const effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];\n  const effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = Math.ceil(invHeightScale) * 2 + 2;\n  const winWidth = Math.ceil(invWidthScale) * 2 + 2;\n  const program = new ResizeNearestNeigborBackpropProgram(images.shape, alignCorners);\n  const uniformData = [{\n    type: 'int32',\n    data: effectiveXSize\n  }, {\n    type: 'int32',\n    data: effectiveYSize\n  }, {\n    type: 'float32',\n    data: [invHeightScale]\n  }, {\n    type: 'float32',\n    data: [invWidthScale]\n  }, {\n    type: 'int32',\n    data: [winHeight]\n  }, {\n    type: 'int32',\n    data: [winWidth]\n  }];\n  return backend.runWebGPUProgram(program, [dy], dy.dtype, uniformData);\n}\nexport const resizeNearestNeighborGradConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'webgpu',\n  kernelFunc: resizeNearestNeighborGrad\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class ResizeNearestNeigborBackpropProgram {\n  constructor(inputShape, alignCorners) {\n    this.variableNames = ['dy'];\n    this.uniforms = `effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, invHeightScale : f32, invWidthScale : f32,\n       winHeight : i32, winWidth : i32,`;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = inputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.alignCorners = alignCorners;\n    this.shaderKey = `resizeNearestNeigborBackprop_${alignCorners}`;\n  }\n  getUserCode() {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let b = coords[0];\n          let d = coords[3];\n          let r = coords[1];\n          let c = coords[2];\n\n          var accumulator = 0.0;\n\n          // Compute bounds for where in dy we will look\n          let startRLerp = floor(f32(r) * uniforms.invHeightScale);\n          let startDyR = i32(floor(startRLerp - f32(uniforms.winHeight / 2)));\n\n          let startCLerp = floor(f32(c) * uniforms.invWidthScale);\n          let startDyC = i32(floor(startCLerp - f32(uniforms.winWidth / 2)));\n\n          // Loop over dy\n          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {\n            let dyR = startDyR + dyROffset;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {\n              continue;\n            }\n\n            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {\n              let dyC = startDyC + dyCOffset;\n\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {\n                continue;\n              }\n\n              let sourceFracRow = f32(uniforms.effectiveXSize[0]) *\n                  (f32(dyR) / f32(uniforms.effectiveYSize[0]));\n\n              let sourceFracCol = f32(uniforms.effectiveXSize[1]) *\n                  (f32(dyC) / f32(uniforms.effectiveYSize[1]));\n\n              let sourceNearestRow =\n                  i32(min(f32(uniforms.outShape[1] - 1),\n                  ${this.alignCorners ? 'floor(sourceFracRow + 0.5)' : 'floor(sourceFracRow)'}));\n\n              let sourceNearestCol =\n                  i32(min(f32(uniforms.outShape[2] - 1),\n                  ${this.alignCorners ? 'floor(sourceFracCol + 0.5)' : 'floor(sourceFracCol)'}));\n\n              if (r == sourceNearestRow && c == sourceNearestCol) {\n                accumulator += getDy(b, dyR, dyC, d);\n              }\n            }\n          }\n          // End loop over dy\n\n          setOutputAtIndex(index, accumulator);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reverse, util } from '@tensorflow/tfjs-core';\nimport { ReverseProgram } from '../reverse_webgpu';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\nexport function reverse(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dims\n  } = attrs;\n  const xRank = x.shape.length;\n  if (xRank === 0) {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n  const xShape = x.shape;\n  const xShape4D = [1, 1, 1, 1];\n  xShape.forEach((d, i) => {\n    const index = i + 4 - xRank;\n    xShape4D[index] = d;\n  });\n  const axes = util.parseAxisParam(dims, x.shape);\n  const dims4D = [0, 0, 0, 0];\n  axes.forEach(ax => {\n    const index = ax + 4 - xRank;\n    dims4D[index] = 1;\n  });\n  const uniformData = [{\n    type: 'int32',\n    data: dims4D\n  }];\n  const xReshaped = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: xShape4D\n    }\n  });\n  const program = new ReverseProgram(xShape4D);\n  const values = backend.runWebGPUProgram(program, [xReshaped], xReshaped.dtype, uniformData);\n  backend.disposeData(xReshaped.dataId);\n  const result = reshape({\n    inputs: {\n      x: values\n    },\n    backend,\n    attrs: {\n      shape: xShape\n    }\n  });\n  backend.disposeData(values.dataId);\n  return result;\n}\nexport const reverseConfig = {\n  kernelName: Reverse,\n  backendName: 'webgpu',\n  kernelFunc: reverse\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class ReverseProgram {\n  constructor(xShape) {\n    this.variableNames = ['x'];\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = xShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.uniforms = ` axis : vec4<i32>,`;\n    this.shaderKey = 'reverse';\n  }\n  getUserCode() {\n    const reverseCoordsSnippet = `\n      // Using uniform variables as judging conditions, so the function has\n      // coherent execution within all threads.\n      fn getReverseCoords(coords : vec4<i32>) -> vec4<i32> {\n        var reverseCoords = coords;\n        if (uniforms.axis[0] == 1) {\n          reverseCoords[0] = uniforms.xShape[0] - coords[0] - 1;\n        }\n        if (uniforms.axis[1] == 1) {\n          reverseCoords[1] = uniforms.xShape[1] - coords[1] - 1;\n        }\n        if (uniforms.axis[2] == 1) {\n          reverseCoords[2] = uniforms.xShape[2] - coords[2] - 1;\n        }\n        if (uniforms.axis[3] == 1) {\n          reverseCoords[3] = uniforms.xShape[3] - coords[3] - 1;\n        }\n\n        return reverseCoords;\n      }\n    `;\n    const userCode = `\n      ${reverseCoordsSnippet}\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let reverseCoords = getReverseCoords(coords);\n          setOutputAtIndex(index, getX(reverseCoords[0],\n              reverseCoords[1], reverseCoords[2], reverseCoords[3]));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { RotateWithOffset } from '@tensorflow/tfjs-core';\nimport { RotateProgram } from '../rotate_webgpu';\nexport const rotateWithOffsetConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'webgpu',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      image\n    } = inputs;\n    const {\n      radians,\n      fillValue,\n      center\n    } = attrs;\n    const webgpuBackend = backend;\n    const program = new RotateProgram(image.shape, fillValue);\n    const [centerX, centerY] = backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n    const uniformData = [{\n      type: 'float32',\n      data: [centerX]\n    }, {\n      type: 'float32',\n      data: [centerY]\n    }, {\n      type: 'float32',\n      data: [Math.sin(radians)]\n    }, {\n      type: 'float32',\n      data: [Math.cos(radians)]\n    }];\n    if (typeof fillValue === 'number') {\n      uniformData.push({\n        type: 'float32',\n        data: [Number.parseFloat(fillValue.toFixed(2))]\n      });\n    } else {\n      uniformData.push({\n        type: 'float32',\n        data: fillValue\n      });\n    }\n    const output = webgpuBackend.runWebGPUProgram(program, [image], image.dtype, uniformData);\n    return output;\n  }\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class RotateProgram {\n  constructor(imageShape, fillValue) {\n    this.outputShape = [];\n    this.variableNames = ['x'];\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = imageShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.uniforms = `centerX : f32, centerY : f32, sinRadians : f32,\n          cosRadians : f32,`;\n    this.shaderKey = 'rotate';\n    this.outputShape = imageShape;\n    if (typeof fillValue === 'number') {\n      this.uniforms += ` fillValue : f32,`;\n      this.fillSnippet = `var outputValue = uniforms.fillValue;`;\n      this.shaderKey += '_float';\n    } else {\n      this.uniforms += ` fillValue : vec3<f32>,`;\n      this.fillSnippet = `var outputValue = uniforms.fillValue[coords[3]];`;\n      this.shaderKey += '_vec3';\n    }\n  }\n  getUserCode() {\n    const userCode = `\n        ${main('index')} {\n          if (index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *\n                uniforms.sinRadians;\n            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *\n                uniforms.cosRadians;\n            let coordX = i32(round(coordXFloat + uniforms.centerX));\n            let coordY = i32(round(coordYFloat + uniforms.centerY));\n            ${this.fillSnippet}\n            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&\n                coordY < uniforms.xShape[1]) {\n              outputValue = getX(coords[0], coordY, coordX, coords[3]);\n            }\n            setOutputAtIndex(index, outputValue);\n          }\n        }\n      `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Round } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const round = unaryKernelFunc({\n  opType: UnaryOpType.ROUND\n});\nexport const roundConfig = {\n  kernelName: Round,\n  backendName: 'webgpu',\n  kernelFunc: round\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Rsqrt } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { rsqrtImplCPU } from '../kernel_utils/shared';\nimport { UnaryOpType } from '../unary_op_util';\nexport const rsqrt = unaryKernelFunc({\n  opType: UnaryOpType.RSQRT,\n  cpuKernelImpl: rsqrtImplCPU\n});\nexport const rsqrtConfig = {\n  kernelName: Rsqrt,\n  backendName: 'webgpu',\n  kernelFunc: rsqrt\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, ScatterNd, util } from '@tensorflow/tfjs-core';\nimport { ScatterProgram } from '../scatter_webgpu';\nimport { fill } from './Fill';\nimport { reshape } from './Reshape';\nexport function scatterNd(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    indices,\n    updates\n  } = inputs;\n  const {\n    shape\n  } = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(updates, indices, shape);\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n  const flattenIndices = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceRank]\n    }\n  });\n  const flattenX = reshape({\n    inputs: {\n      x: updates\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceSize]\n    }\n  });\n  const type = flattenX.dtype;\n  const output = fill({\n    backend,\n    attrs: {\n      shape: flattenShape,\n      value: 0,\n      dtype: type\n    }\n  });\n  const size = util.sizeFromShape(flattenX.shape);\n  const uniformData = [{\n    type: 'int32',\n    data: [sliceRank]\n  }, {\n    type: 'int32',\n    data: strides\n  }, {\n    type: 'int32',\n    data: [size]\n  }];\n  const program = new ScatterProgram(flattenX.shape, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape, type);\n  const res = backend.runWebGPUProgram(program, [flattenX, flattenIndices], type, uniformData, output);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape\n    }\n  });\n  backend.disposeData(flattenIndices.dataId);\n  backend.disposeData(flattenX.dataId);\n  backend.disposeData(res.dataId);\n  return reshaped;\n}\nexport const scatterNdConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgpu',\n  kernelFunc: scatterNd\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { atomicAddSnippet } from './shader_util';\nimport { dataTypeToGPUType, getCoordsDataType, getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class ScatterProgram {\n  constructor(flattenXShape, sliceDim, indicesRank, updatesRank, strides, shape, outputDtype, sumDupeIndices = true) {\n    this.variableNames = ['updates', 'indices'];\n    this.workgroupSize = [64, 1, 1];\n    this.atomic = true;\n    this.outputShape = shape;\n    this.type = outputDtype;\n    this.sumDupeIndices = sumDupeIndices;\n    this.dispatchLayout = flatDispatchLayout(flattenXShape);\n    // Dispatching based on |updates| shape instead of output shape.\n    this.dispatch = computeDispatch(this.dispatchLayout, flattenXShape, this.workgroupSize);\n    this.sliceDimGreaterThanOne = sliceDim > 1;\n    this.shaderKey = `scatter_${indicesRank}_${updatesRank}_${this.sliceDimGreaterThanOne}_${outputDtype}_${sumDupeIndices}_${strides.length}`;\n    const stridesType = getCoordsDataType(strides.length);\n    this.uniforms = `sliceDim : i32, strides: ${stridesType}, updatesSize: i32,`;\n    this.updatesRank = updatesRank;\n    this.indicesRank = indicesRank;\n  }\n  getUserCode() {\n    let indicesString = '';\n    if (this.indicesRank === 1) {\n      indicesString = 'coords[0]';\n    } else if (this.indicesRank === 2) {\n      indicesString = 'coords[0], j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n    const strideString = this.sliceDimGreaterThanOne ? 'uniforms.strides[j]' : 'uniforms.strides';\n    let outCoordsString = '';\n    let getUpdatesCoordsFromFlatIndex = '';\n    if (this.dispatchLayout.x.length === 1) {\n      outCoordsString = 'flattenedIndex';\n      getUpdatesCoordsFromFlatIndex = `\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {\n        return index;\n      }\n      `;\n    } else if (this.dispatchLayout.x.length === 2) {\n      outCoordsString = 'vec2<i32>(flattenedIndex, coords[1])';\n      getUpdatesCoordsFromFlatIndex = `\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {\n        // N.B. |updates| could be a scalar tensor, conceptually representing a\n        // 2D tensor with all values equal to that. By design, its size must be\n        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|\n        // gives the other.\n        let sliceSize = uniforms.outShape[1];\n        let d0 = index / sliceSize;\n        let d1 = index - d0 * sliceSize;\n        return vec2<i32>(d0, d1);\n      }\n      `;\n    }\n    const updatesString = Array.from({\n      length: this.updatesRank\n    }, (_, idx) => `coords[${idx}]`);\n    const updatesSnippet = `getUpdates(${updatesString.join(', ')})`;\n    const userCode = `\n    ${getUpdatesCoordsFromFlatIndex}\n      ${main('index')} {\n        if (index < uniforms.updatesSize) {\n          let coords = getUpdatesCoordsFromFlatIndex(index);\n          var flattenedIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexInside = i32(round(${indicesSnippet}));\n            flattenedIndex = flattenedIndex + indexInside * ${strideString};\n          }\n          let updateValue =\n              ${dataTypeToGPUType(this.type)}(${updatesSnippet});\n          let flatIndex = getOutputIndexFromCoords(${outCoordsString});\n\n          ${this.sumDupeIndices ? atomicAddSnippet('&result[flatIndex]', 'updateValue', this.type) : `atomicStore(&result[flatIndex], bitcast<i32>(updateValue));`}\n        }\n      }`;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SearchSorted } from '@tensorflow/tfjs-core';\nimport { SearchSortedProgram } from '../search_sorted_webgpu';\nexport function searchSorted(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    sortedSequence,\n    values\n  } = inputs;\n  const {\n    side\n  } = attrs;\n  const program = new SearchSortedProgram([values.shape[0], values.shape[1]], side);\n  const uniformData = [{\n    type: 'int32',\n    data: [sortedSequence.shape[1]]\n  }];\n  return backend.runWebGPUProgram(program, [sortedSequence, values], 'int32', uniformData);\n}\nexport const searchSortedConfig = {\n  kernelName: SearchSorted,\n  backendName: 'webgpu',\n  kernelFunc: searchSorted\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class SearchSortedProgram {\n  constructor(outputShape, side) {\n    this.outputShape = [];\n    this.variableNames = ['sortedSequence', 'values'];\n    this.uniforms = 'numInputs : i32,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.side = side;\n    this.shaderKey = `search_sorted_${side}`;\n  }\n  getUserCode() {\n    const boundComparator = this.side === 'left' ? '<' : '<=';\n    const userCode = `\n      fn findBound(batch: i32, value: f32) -> i32 {\n        var left = i32(0);\n        var right = uniforms.numInputs;\n        while (left < right) {\n          var mid = (left + right) / 2;\n          if (getSortedSequence(batch, mid) ${boundComparator} value) {\n            left = mid + 1;\n          } else {\n            right = mid;\n          }\n        }\n        return right;\n      }\n\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let value = getValuesByOutputIndex(index);\n          setOutputAtIndexI32(index, findBound(coords[0], value));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Select, upcastType } from '@tensorflow/tfjs-core';\nimport { SelectProgram } from '../select_webgpu';\nexport function select(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    condition,\n    t,\n    e\n  } = inputs;\n  const program = new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n  return backend.runWebGPUProgram(program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\nexport const selectConfig = {\n  kernelName: Select,\n  backendName: 'webgpu',\n  kernelFunc: select\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class SelectProgram {\n  constructor(cRank, shape, rank) {\n    this.variableNames = ['c', 'a', 'b'];\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.cRank = cRank;\n    this.rank = rank;\n    this.shaderKey = 'select';\n  }\n  getUserCode() {\n    // TODO(WGSL): below code can be merged with getUserCode.\n    let cCoords;\n    let abCoords;\n    if (this.rank > 4) {\n      throw Error(`Where for rank ${this.rank} is not yet supported`);\n    }\n    if (this.rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < this.outputShape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < this.cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let cVal = getC(${cCoords});\n          if (cVal >= 1.0) {\n            setOutputAtIndex(index, getA(${abCoords}));\n          } else {\n            setOutputAtIndex(index, getB(${abCoords}));\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Selu } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const selu = unaryKernelFunc({\n  opType: UnaryOpType.SELU\n});\nexport const seluConfig = {\n  kernelName: Selu,\n  backendName: 'webgpu',\n  kernelFunc: selu\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sigmoid } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const sigmoid = unaryKernelFunc({\n  opType: UnaryOpType.SIGMOID\n});\nexport const sigmoidConfig = {\n  kernelName: Sigmoid,\n  backendName: 'webgpu',\n  kernelFunc: sigmoid\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sign } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const sign = unaryKernelFunc({\n  opType: UnaryOpType.SIGN\n});\nexport const signConfig = {\n  kernelName: Sign,\n  backendName: 'webgpu',\n  kernelFunc: sign\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sin } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const sin = unaryKernelFunc({\n  opType: UnaryOpType.SIN\n});\nexport const sinConfig = {\n  kernelName: Sin,\n  backendName: 'webgpu',\n  kernelFunc: sin\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sinh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const sinh = unaryKernelFunc({\n  opType: UnaryOpType.SINH\n});\nexport const sinhConfig = {\n  kernelName: Sinh,\n  backendName: 'webgpu',\n  kernelFunc: sinh\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Softplus } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const softplus = unaryKernelFunc({\n  opType: UnaryOpType.SOFTPLUS\n});\nexport const softplusConfig = {\n  kernelName: Softplus,\n  backendName: 'webgpu',\n  kernelFunc: softplus\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SpaceToBatchND, util } from '@tensorflow/tfjs-core';\nimport { SpaceToBatchNDProgram } from '../space_to_batchND_webgpu';\nimport { reshape } from './Reshape';\nexport const spaceToBatchND = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockShape,\n    paddings\n  } = attrs;\n  util.assert(x.shape.length <= 4, () => 'spaceToBatchND for rank > 4 with a WebGPU backend not ' + 'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n  const completePaddings = [[0, 0]];\n  completePaddings.push(...paddings);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n  const paddedXShape = completePaddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n  const reshapedPaddedShape = backend_util.getReshaped(paddedXShape, blockShape, prod, false);\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n  const flattenShape = backend_util.getReshapedPermuted(paddedXShape, blockShape, prod, false);\n  const paddedXShapeStrides = util.computeStrides(paddedXShape);\n  const program = new SpaceToBatchNDProgram(x.shape, paddedXShape, completePaddings, reshapedPaddedShape, permutedReshapedPaddedPermutation, paddedXShapeStrides.length);\n  const uniformData = [{\n    type: 'int32',\n    data: reshapedPaddedShape\n  }, {\n    type: 'int32',\n    data: paddedXShapeStrides\n  }];\n  completePaddings.map(p => uniformData.push({\n    type: 'int32',\n    data: [p[0], p[1]]\n  }));\n  const paddedXT = backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n  const result = reshape({\n    inputs: {\n      x: paddedXT\n    },\n    backend,\n    attrs: {\n      shape: flattenShape\n    }\n  });\n  backend.disposeData(paddedXT.dataId);\n  return result;\n};\nexport const spaceToBatchNDConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgpu',\n  kernelFunc: spaceToBatchND\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { padCommon } from './pad_webgpu';\nimport { getSwitchedCoords } from './transpose_webgpu';\nimport { getCoordsDataType, getCoordsFromIndexSnippet, getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class SpaceToBatchNDProgram {\n  constructor(xShape, paddedXShape, paddings, reshapedPaddedXShape, newDim, paddedXShapeStridesShapeLength) {\n    this.variableNames = ['x'];\n    this.outputShape = [];\n    this.uniforms = '';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    const outputShape = new Array(reshapedPaddedXShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = reshapedPaddedXShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.newDim = newDim;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.xShape = xShape;\n    this.paddedXShape = paddedXShape;\n    this.uniforms += `reshapedPaddedXShape : ${getCoordsDataType(reshapedPaddedXShape.length)}, paddedXShapeStrides : ${getCoordsDataType(paddedXShapeStridesShapeLength)}, `;\n    paddings.map((_, i) => {\n      this.uniforms += ` pad${i} : vec2<i32>,`;\n    });\n    this.shaderKey = `spaceToBatchND_${newDim}`;\n  }\n  getUserCode() {\n    const dtype = getCoordsDataType(this.outputShape.length);\n    const switched = getSwitchedCoords(this.newDim);\n    const userCode = `\n      ${getCoordsFromIndexSnippet(this.paddedXShape, 'PaddedX')}\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let switchedIndex = getIndexFromCoords${this.outputShape.length}D(${dtype}(${switched}), uniforms.reshapedPaddedXShape);\n          let paddedCoords = getPaddedXCoordsFromIndex(switchedIndex);\n          ${padCommon(this.xShape, true)}\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseSegmentMean } from '@tensorflow/tfjs-core';\nimport { sparseSegmentReduce } from '../kernel_utils/sparse_segment_reduce';\nexport function sparseSegmentMean(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    data,\n    indices,\n    segmentIds\n  } = inputs;\n  return sparseSegmentReduce(data, indices, segmentIds, false, backend);\n}\nexport const sparseSegmentMeanConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgpu',\n  kernelFunc: sparseSegmentMean\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { fill } from '../kernels/Fill';\nimport { SparseSegmentIdCountProgram, SparseSegmentMeanProgram, SparseSegmentSumProgram } from '../sparse_segment_reduce_webgpu';\nexport function sparseSegmentReduce(input, indices, segmentIds, isSum = false, backend) {\n  const inputSize = util.sizeFromShape(input.shape);\n  const segmentSize = inputSize / input.shape[0];\n  const dtype = input.dtype;\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const numIndices = util.sizeFromShape(indices.shape);\n  const $segmentIds = backend.readSync(segmentIds.dataId);\n  const lastSegmentIdPlusOne = numIndices > 0 ? $segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n  let program;\n  const outputShape = input.shape.slice();\n  outputShape[0] = outputRows;\n  const sparseSize = numIndices * segmentSize;\n  const sparseSegmentSum = fill({\n    backend,\n    attrs: {\n      shape: outputShape,\n      value: 0,\n      dtype\n    }\n  });\n  program = new SparseSegmentSumProgram(outputShape, sparseSize, dtype);\n  let uniformData = [{\n    type: 'int32',\n    data: [segmentSize]\n  }, {\n    type: 'int32',\n    data: [sparseSize]\n  }];\n  const $sparseSegmentSum = backend.runWebGPUProgram(program, [input, indices, segmentIds], dtype, uniformData, sparseSegmentSum);\n  if (isSum) {\n    return $sparseSegmentSum;\n  }\n  const sparseSegmentIdCount = fill({\n    backend,\n    attrs: {\n      shape: [outputRows],\n      value: 0,\n      dtype: 'int32'\n    }\n  });\n  program = new SparseSegmentIdCountProgram(outputRows, segmentIds.shape);\n  const $sparseSegmentIdCount = backend.runWebGPUProgram(program, [segmentIds], 'int32', null, sparseSegmentIdCount);\n  const sparseSegmentMean = fill({\n    backend,\n    attrs: {\n      shape: outputShape,\n      value: 0,\n      dtype\n    }\n  });\n  program = new SparseSegmentMeanProgram(outputShape, dtype);\n  uniformData = [{\n    type: 'int32',\n    data: [segmentSize]\n  }];\n  const $sparseSegmentMean = backend.runWebGPUProgram(program, [$sparseSegmentSum, $sparseSegmentIdCount], dtype, uniformData, sparseSegmentMean);\n  backend.disposeData($sparseSegmentSum.dataId);\n  backend.disposeData($sparseSegmentIdCount.dataId);\n  return $sparseSegmentMean;\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { atomicAddSnippet } from './shader_util';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class SparseSegmentSumProgram {\n  constructor(outShape, sparseSize, outputDtype) {\n    this.variableNames = ['input', 'indices', 'segmentIds'];\n    this.outputShape = [];\n    this.uniforms = 'segmentSize : i32, sparseSize : i32,';\n    this.workgroupSize = [64, 1, 1];\n    this.atomic = true;\n    this.outputShape = outShape;\n    this.type = outputDtype;\n    this.dispatchLayout = flatDispatchLayout([sparseSize]);\n    this.dispatch = computeDispatch(this.dispatchLayout, [sparseSize], this.workgroupSize);\n    this.shaderKey = 'sparseSegmentSum';\n  }\n  getUserCode() {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.sparseSize) {\n        let indexInSegmentIds = index / uniforms.segmentSize;\n        let indexInSegment = index % uniforms.segmentSize;\n        let indexInInput = indices[indexInSegmentIds];\n        let segmentId = segmentIds[indexInSegmentIds];\n\n        let value = input[indexInInput * uniforms.segmentSize + indexInSegment];\n        let outIndex = segmentId * uniforms.segmentSize + indexInSegment;\n        ${atomicAddSnippet('&result[outIndex]', 'value', this.type)}\n      }\n    }\n  `;\n    return userCode;\n  }\n}\nexport class SparseSegmentIdCountProgram {\n  constructor(outShape, segmentIdsShape) {\n    this.variableNames = ['segmentIds'];\n    this.outputShape = [];\n    this.workgroupSize = [64, 1, 1];\n    this.atomic = true;\n    this.outputShape = [outShape];\n    this.dispatchLayout = flatDispatchLayout(segmentIdsShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, segmentIdsShape, this.workgroupSize);\n    this.shaderKey = 'sparseSegmentIdCountProgram';\n  }\n  getUserCode() {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.segmentIdsShape) {\n        let segmentId = segmentIds[index];\n        ${atomicAddSnippet('&result[segmentId]', '1', 'int32')}\n      }\n    }\n  `;\n    return userCode;\n  }\n}\nexport class SparseSegmentMeanProgram {\n  constructor(outShape, outputDtype) {\n    this.variableNames = ['segmentSum', 'sameSegmentIdCount'];\n    this.outputShape = [];\n    this.uniforms = 'segmentSize : i32';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = outShape;\n    this.type = outputDtype;\n    this.dispatchLayout = flatDispatchLayout(outShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, outShape, this.workgroupSize);\n    this.shaderKey = 'sparseSegmentMean';\n  }\n  getUserCode() {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let segmentId = index / uniforms.segmentSize;\n        let count = sameSegmentIdCount[segmentId];\n        if (count != 0) {\n          ${this.type === 'float32' ? 'setOutputAtIndex(index, segmentSum[index] / f32(count));' : 'setOutputAtIndexI32(index, segmentSum[index] / count);'}\n        }\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseSegmentSum } from '@tensorflow/tfjs-core';\nimport { sparseSegmentReduce } from '../kernel_utils/sparse_segment_reduce';\nexport function sparseSegmentSum(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    data,\n    indices,\n    segmentIds\n  } = inputs;\n  return sparseSegmentReduce(data, indices, segmentIds, true, backend);\n}\nexport const sparseSegmentSumConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'webgpu',\n  kernelFunc: sparseSegmentSum\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SparseToDense, util } from '@tensorflow/tfjs-core';\nimport { scatterImplCPU } from '../kernel_utils/shared';\nimport { ScatterProgram } from '../scatter_webgpu';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\nimport { tile } from './Tile';\nexport function sparseToDense(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    sparseIndices,\n    sparseValues,\n    defaultValue\n  } = inputs;\n  const {\n    outputShape\n  } = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(sparseIndices);\n    const updatesBuf = backend.bufferSync(sparseValues);\n    const $defaultValue = util.decodeString(backend.readSync(defaultValue.dataId)[0]);\n    const outBuf = scatterImplCPU(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n  const $sparseIndices = reshape({\n    inputs: {\n      x: sparseIndices\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceRank]\n    }\n  });\n  const $sparseValues = sparseValues.shape.length ? reshape({\n    inputs: {\n      x: sparseValues\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceSize]\n    }\n  }) : identity({\n    inputs: {\n      x: sparseValues\n    },\n    backend\n  });\n  const type = $sparseValues.dtype;\n  const zero = backend.makeTensorInfo([], type, util.makeZerosTypedArray(1, type));\n  // Fill output tensor with the default value.\n  const $defaultValue = reshape({\n    inputs: {\n      x: defaultValue\n    },\n    backend,\n    attrs: {\n      shape: Array(flattenShape.length).fill(1)\n    }\n  });\n  const $denseValues = tile({\n    inputs: {\n      x: $defaultValue\n    },\n    backend,\n    attrs: {\n      reps: flattenShape\n    }\n  });\n  const size = util.sizeFromShape([numUpdates, sliceSize]);\n  const uniformData = [{\n    type: 'int32',\n    data: [sliceRank]\n  }, {\n    type: 'int32',\n    data: strides\n  }, {\n    type: 'int32',\n    data: [size]\n  }];\n  switch (numUpdates) {\n    case 0:\n      break;\n    case 1:\n      if (true) {\n        const program = new ScatterProgram([numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length, $sparseValues.shape.length, strides, flattenShape, type, sumDupeIndices);\n        backend.runWebGPUProgram(program, [$sparseValues, $sparseIndices], type, uniformData, $denseValues);\n      }\n      break;\n    default:\n      if (true) {\n        // First replace the default value with 0 at indices.\n        const program = new ScatterProgram([numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length, zero.shape.length, strides, flattenShape, type, sumDupeIndices);\n        backend.runWebGPUProgram(program, [zero, $sparseIndices], type, uniformData, $denseValues);\n      }\n      {\n        // Then replace 0 with the (sum of) sparse value(s) at indices.\n        const program = new ScatterProgram([numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length, $sparseValues.shape.length, strides, flattenShape, type);\n        backend.runWebGPUProgram(program, [$sparseValues, $sparseIndices], type, uniformData, $denseValues);\n      }\n  }\n  const denseValues = reshape({\n    inputs: {\n      x: $denseValues\n    },\n    backend,\n    attrs: {\n      shape: outputShape\n    }\n  });\n  backend.disposeData($sparseIndices.dataId);\n  backend.disposeData($sparseValues.dataId);\n  backend.disposeData($defaultValue.dataId);\n  backend.disposeData(zero.dataId);\n  backend.disposeData($denseValues.dataId);\n  return denseValues;\n}\nexport const sparseToDenseConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgpu',\n  kernelFunc: sparseToDense\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, Tile, util } from '@tensorflow/tfjs-core';\nimport { tileImplCPU } from '../kernel_utils/shared';\nimport { TileProgram } from '../tile_webgpu';\nexport function tile(params) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = params;\n  const {\n    x\n  } = inputs;\n  const {\n    reps\n  } = attrs;\n  // tile gpu program cannot handle rank >= 5 case.\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string' || x.shape.length >= 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ? data.map(d => util.decodeString(d)) : data;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGPUProgram(program, [x], x.dtype);\n  return output;\n}\nexport const tileConfig = {\n  kernelName: Tile,\n  backendName: 'webgpu',\n  kernelFunc: tile\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class TileProgram {\n  constructor(aShape, reps) {\n    this.variableNames = ['A'];\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    const outputShape = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.rank = this.outputShape.length;\n    this.shaderKey = 'tile';\n  }\n  getUserCode() {\n    const sourceCoords = getSourceCoords(this.rank, 'uniforms.');\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          setOutputAtIndex(index, getA(${sourceCoords}));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\nfunction getSourceCoords(rank, uniformPrefix = '') {\n  if (rank >= 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `(resRC % ${uniformPrefix}aShape)`;\n  }\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n  const sourceCoords = [];\n  for (let i = 0; i < rank; i++) {\n    sourceCoords.push(`(${currentCoords[i]} % ${uniformPrefix}aShape[${i}])`);\n  }\n  return sourceCoords.join();\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SplitV, util } from '@tensorflow/tfjs-core';\nimport { slice } from './Slice';\nexport function splitV(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    numOrSizeSplits,\n    axis\n  } = attrs;\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n  const xRank = x.shape.length;\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT = slice({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        begin,\n        size: sliceSize\n      }\n    });\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\nexport const splitVConfig = {\n  kernelName: SplitV,\n  backendName: 'webgpu',\n  kernelFunc: splitV\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sqrt } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const sqrt = unaryKernelFunc({\n  opType: UnaryOpType.SQRT\n});\nexport const sqrtConfig = {\n  kernelName: Sqrt,\n  backendName: 'webgpu',\n  kernelFunc: sqrt\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Square } from '@tensorflow/tfjs-core';\nimport { UnaryOpProgram } from '../unary_op_webgpu';\nimport { UnaryOpType } from '../unary_op_util';\nexport const squareConfig = {\n  kernelName: Square,\n  backendName: 'webgpu',\n  kernelFunc: ({\n    inputs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    const webGPUBackend = backend;\n    const program = new UnaryOpProgram(x.shape, UnaryOpType.SQUARE);\n    return webGPUBackend.runWebGPUProgram(program, [x], x.dtype);\n  }\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SquaredDifference } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nexport const squaredDifference = binaryKernelFunc({\n  opType: BinaryOpType.SQUARED_DIFFERENCE\n});\nexport const squaredDifferenceConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgpu',\n  kernelFunc: squaredDifference\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Step } from '@tensorflow/tfjs-core';\nimport { UnaryOpType } from '../unary_op_util';\nimport { UnaryOpProgram } from '../unary_op_webgpu';\nexport function step({\n  inputs,\n  attrs,\n  backend\n}) {\n  const {\n    x\n  } = inputs;\n  const program = new UnaryOpProgram(x.shape, UnaryOpType.STEP, 'stepAlpha : f32,');\n  const uniformData = [{\n    type: 'float32',\n    data: [attrs.alpha]\n  }];\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\nexport const stepConfig = {\n  kernelName: Step,\n  backendName: 'webgpu',\n  kernelFunc: step\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, slice_util, StridedSlice, util } from '@tensorflow/tfjs-core';\nimport { stridedSliceImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { StridedSliceProgram } from '../strided_slice_webgpu';\nexport function stridedSlice(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n  let result;\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        shape: finalShape\n      }\n    });\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(x.shape.length >= 1, () => `Input must have rank at least 1, got: ${x.shape.length}`);\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        begin: $begin,\n        size\n      }\n    });\n    result = reshape({\n      inputs: {\n        x: sliced\n      },\n      backend,\n      attrs: {\n        shape: finalShape\n      }\n    });\n    backend.disposeData(sliced.dataId);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    if (shouldExecuteOnCPU) {\n      const values = backend.readSync(x.dataId);\n      const xBuf = buffer(x.shape, x.dtype, values);\n      const resultValues = stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n    } else {\n      const program = new StridedSliceProgram(finalShapeSparse);\n      const uniformData = [{\n        type: 'int32',\n        data: $begin\n      }, {\n        type: 'int32',\n        data: $strides\n      }];\n      const resultValues = backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n      result = reshape({\n        inputs: {\n          x: resultValues\n        },\n        backend,\n        attrs: {\n          shape: finalShape\n        }\n      });\n      backend.disposeData(resultValues.dataId);\n    }\n  }\n  return result;\n}\nexport const stridedSliceConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgpu',\n  kernelFunc: stridedSlice\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType, getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class StridedSliceProgram {\n  constructor(destSize) {\n    this.variableNames = ['x'];\n    // TODO(xing.xu): Increase the workPerThread.\n    this.workPerThread = 1;\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = destSize;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]);\n    const dtype = getCoordsDataType(this.outputShape.length);\n    this.uniforms = `begin : ${dtype},  strides : ${dtype}, `;\n    this.shaderKey = 'stridedSlice';\n  }\n  getUserCode() {\n    const rank = this.outputShape.length;\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * uniforms.strides + uniforms.begin';\n    } else {\n      let outputAxis = 0;\n      newCoords = this.outputShape.map((_, i) => {\n        outputAxis++;\n        return this.outputShape.length === 1 ? `coords * uniforms.strides[${i}] + uniforms.begin[${i}]` : `coords[${outputAxis - 1}] * uniforms.strides[${i}] + uniforms.begin[${i}]`;\n      }).join(',');\n    }\n    const userCode = `\n       ${main('index')} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index);\n           setOutputAtIndex(index, getX(${newCoords}));\n         }\n       }\n     `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringNGrams } from '@tensorflow/tfjs-core';\nimport { stringNGramsImplCPU } from '../kernel_utils/shared';\nexport function stringNGrams(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {\n    data,\n    dataSplits\n  } = inputs;\n  const $data = backend.readSync(data.dataId);\n  const $dataSplits = backend.readSync(dataSplits.dataId);\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU($data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences);\n  return [backend.makeTensorInfo([nGrams.length], 'string', nGrams), backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits)];\n}\nexport const stringNGramsConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgpu',\n  kernelFunc: stringNGrams\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sub } from '@tensorflow/tfjs-core';\nimport { BinaryOpType } from '../binary_op_util';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { subImplCPU as cpuSub } from '../kernel_utils/shared';\nexport const sub = binaryKernelFunc({\n  opType: BinaryOpType.SUB,\n  cpuKernelImpl: cpuSub,\n  supportsComplex: true\n});\nexport const subConfig = {\n  kernelName: Sub,\n  backendName: 'webgpu',\n  kernelFunc: sub\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tan } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const tan = unaryKernelFunc({\n  opType: UnaryOpType.TAN\n});\nexport const tanConfig = {\n  kernelName: Tan,\n  backendName: 'webgpu',\n  kernelFunc: tan\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tanh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { UnaryOpType } from '../unary_op_util';\nexport const tanh = unaryKernelFunc({\n  opType: UnaryOpType.TANH\n});\nexport const tanhConfig = {\n  kernelName: Tanh,\n  backendName: 'webgpu',\n  kernelFunc: tanh\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, TensorScatterUpdate, util } from '@tensorflow/tfjs-core';\nimport { ScatterProgram } from '../scatter_webgpu';\nimport { reshape } from './Reshape';\nimport { tile } from './Tile';\nexport function tensorScatterUpdate(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    tensor,\n    indices,\n    updates\n  } = inputs;\n  const {} = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(updates, indices, tensor.shape);\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(tensor.shape, indices.dtype);\n  }\n  const toDispose = [];\n  const flattenIndices = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceRank]\n    }\n  });\n  toDispose.push(flattenIndices);\n  const flattenX = reshape({\n    inputs: {\n      x: updates\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceSize]\n    }\n  });\n  toDispose.push(flattenX);\n  const flattenTensor = reshape({\n    inputs: {\n      x: tensor\n    },\n    backend,\n    attrs: {\n      shape: flattenShape\n    }\n  });\n  toDispose.push(flattenTensor);\n  const output = tile({\n    inputs: {\n      x: flattenTensor\n    },\n    backend,\n    attrs: {\n      reps: Array(flattenShape.length).fill(1)\n    }\n  });\n  const program = new ScatterProgram([numUpdates, sliceSize], sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape, tensor.dtype, false);\n  const size = util.sizeFromShape([numUpdates, sliceSize]);\n  const uniformData = [{\n    type: 'int32',\n    data: [sliceRank]\n  }, {\n    type: 'int32',\n    data: strides\n  }, {\n    type: 'int32',\n    data: [size]\n  }];\n  const res = backend.runWebGPUProgram(program, [flattenX, flattenIndices], flattenTensor.dtype, uniformData, output);\n  toDispose.push(res);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: tensor.shape\n    }\n  });\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return reshaped;\n}\nexport const tensorScatterUpdateConfig = {\n  kernelName: TensorScatterUpdate,\n  backendName: 'webgpu',\n  kernelFunc: tensorScatterUpdate\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TopK, util } from '@tensorflow/tfjs-core';\nimport { topKImplCPU } from '../kernel_utils/shared';\nimport { MergeProgram, SwapProgram } from '../top_k_webgpu';\nimport { fill } from './Fill';\nimport { gatherV2 } from './GatherV2';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nfunction disposeIntermediateTensorInfoOrNull(backend, tensorInfo) {\n  if (tensorInfo !== null) {\n    backend.disposeData(tensorInfo.dataId);\n  }\n}\nfunction roundUpToPow2(num) {\n  let pow2 = 1;\n  while (pow2 < num) {\n    pow2 *= 2;\n  }\n  return pow2;\n}\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\nexport function topK(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    k,\n    sorted\n  } = attrs;\n  const xShape = x.shape;\n  const lastDim = xShape[xShape.length - 1];\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xVals = backend.readSync(x.dataId);\n    const [allTopKVals, allTopKIndices] = topKImplCPU(xVals, xShape, x.dtype, k, sorted);\n    return [backend.makeTensorInfo(allTopKVals.shape, allTopKVals.dtype, allTopKVals.values), backend.makeTensorInfo(allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)];\n  }\n  if (k === 0) {\n    xShape[xShape.length - 1] = 0;\n    return [backend.makeTensorInfo(xShape, x.dtype, []), backend.makeTensorInfo(xShape, 'int32', [])];\n  }\n  if (lastDim === 1 /* firstPass */) {\n    return [x, fill({\n      attrs: {\n        shape: xShape,\n        dtype: 'int32',\n        value: 0\n      },\n      backend\n    })];\n  }\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const xSize = util.sizeFromShape(xShape);\n  const batch = xSize / lastDim;\n  const x2D = reshape({\n    inputs: {\n      x\n    },\n    attrs: {\n      shape: [batch, lastDim]\n    },\n    backend\n  });\n  const kPow2 = roundUpToPow2(k);\n  const lastDimPow2 = roundUpToPow2(lastDim);\n  // Only the indices containing the top K are kept at every step to reduce\n  // number of outputs in the GPU algorithms, so once the final set of indices\n  // is computed then gather is used to grab the corresponding values\n  // from the original input.\n  let indices = null;\n  // GPU algorithm always takes in an indices input but this input is not used\n  // on the first run of a GPU algorithm, therefore if indices is null we simply\n  // pass in x2D instead of it but the value will not actually be used\n  const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];\n  const runSwap = (dir, inc, shape) => {\n    const inputs = getInputs();\n    const program = new SwapProgram(shape);\n    const firstPass = indices === null ? 1 : 0;\n    const uniformDataSwap = [{\n      type: 'int32',\n      data: [lastDim]\n    }, {\n      type: 'int32',\n      data: [firstPass]\n    }, {\n      type: 'float32',\n      data: [Number.NEGATIVE_INFINITY]\n    }, {\n      type: 'int32',\n      data: [dir]\n    }, {\n      type: 'int32',\n      data: [inc]\n    }];\n    const prevIndices = indices;\n    indices = backend.runWebGPUProgram(program, inputs, 'int32', uniformDataSwap);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  };\n  // Step 1: local sort\n  for (let len = 1; len < kPow2; len *= 2) {\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, [batch, lastDimPow2]);\n    }\n  }\n  // Step 2: merge\n  for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {\n    const inputs = getInputs();\n    const mergeProgram = new MergeProgram([batch, indicesSize / 2]);\n    const firstPass = indices === null ? 1 : 0;\n    const uniformDataMerge = [{\n      type: 'int32',\n      data: [lastDim]\n    }, {\n      type: 'int32',\n      data: [firstPass]\n    }, {\n      type: 'int32',\n      data: [kPow2]\n    }];\n    const prevIndices = indices;\n    indices = backend.runWebGPUProgram(mergeProgram, inputs, 'int32', uniformDataMerge);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n    // Step 3: rebuild\n    const len = kPow2 / 2;\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, indices.shape);\n    }\n  }\n  // Keep only the requested top K results instead of kPow2\n  let prevIndices = indices;\n  indices = slice({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      begin: 0,\n      size: [batch, k]\n    }\n  });\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  // Gather values on last dimension\n  let values = gatherV2({\n    inputs: {\n      x: x2D,\n      indices\n    },\n    backend,\n    attrs: {\n      axis: 1,\n      batchDims: 1\n    }\n  });\n  disposeIntermediateTensorInfoOrNull(backend, x2D);\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const newShape = xShape.slice(0, -1);\n  newShape.push(k);\n  prevIndices = indices;\n  indices = reshape({\n    inputs: {\n      x: indices\n    },\n    attrs: {\n      shape: newShape\n    },\n    backend\n  });\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  const prevValues = values;\n  values = reshape({\n    inputs: {\n      x: values\n    },\n    attrs: {\n      shape: newShape\n    },\n    backend\n  });\n  disposeIntermediateTensorInfoOrNull(backend, prevValues);\n  return [values, indices];\n}\nexport const topKConfig = {\n  kernelName: TopK,\n  backendName: 'webgpu',\n  kernelFunc: topK\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\nexport class SwapProgram {\n  constructor(shape) {\n    this.variableNames = ['x', 'indices'];\n    this.workgroupSize = [256, 1, 1];\n    this.size = true;\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.uniforms = `inputSize : i32, firstPass : i32, negativeInf : f32,\n        dir : i32, inc : i32,`;\n    this.shaderKey = 'swap';\n  }\n  getUserCode() {\n    const userCode = `\n        ${main('index')} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // We compare elements pair-wise within a group of size 2 * inc.\n            // The comparing rule for each group alternates between ascending\n            // and descending. Within each group, we compare each pair at\n            // positions i and i+inc. To decide whether an element at position i\n            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n            // inc, it is in the first half of the group, we denote it as x0,\n            // otherwise we denote it as x1.\n            // For example, as shown in the Bitonic top K paper referenced\n            // above, Figure5(a) shows that element[1] is in the second half of\n            // the group when group size is 2, but it is in the first half of\n            // the group when group size is 4.\n            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;\n            var i = 0;\n            if (isFirstInPair) {\n              i = elemIdx;\n            } else {\n              i = elemIdx - uniforms.inc;\n            }\n\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.inc;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.inc));\n            }\n\n            var x0 = f32(0.0);\n            var x1 = f32(0.0);\n            if (i0 < uniforms.inputSize) {\n              x0 = getX(batch, i0);\n            } else {\n              x0 = uniforms.negativeInf;\n            }\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = uniforms.negativeInf;\n            }\n\n            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;\n            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n            if (reverse == isGreater) {\n              // Elements in opposite order of direction\n              let iTemp = i0;\n              i0 = i1;\n              i1 = iTemp;\n            }\n            if (isFirstInPair) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `;\n    return userCode;\n  }\n}\nexport class MergeProgram {\n  constructor(shape) {\n    this.variableNames = ['x', 'indices'];\n    this.workgroupSize = [256, 1, 1];\n    this.size = true;\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    // |n| Size of the original input of TopK\n    // |firstPass| indicates if this is the first time swap is being used which\n    // means no indices input containing the top K is present yet.\n    // |k| Top k elements desired\n    this.uniforms = `inputSize : i32, firstPass : i32, k : i32,`;\n    this.shaderKey = 'merge';\n  }\n  getUserCode() {\n    const userCode = `\n        ${main('index')} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // The output size is half of the previous size.\n            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _\n            // (k=4), we only need to output the indices at positions |, the\n            // indices at positions _ can be thrown away, see Figure5(b) After\n            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced\n            // above.\n            // For example, the paper shows we only need to output the orange\n            // bars. The output sequence should look like this | | | | | | | |.\n            // Because the sequence is halved, to map the output index back to\n            // the previous sequence to find the corresponding value, we need\n            // to double the index. When we double the index, we basically\n            // interpolate a position, so 2i looks like\n            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k\n            // position of each 2k positions by - elemIdx % k. E.g. for output\n            // at index 4,5,6,7, we want to get the corresponding element at\n            // original index 8,9,10,11, for output at index 8,9,10,11,\n            // we want to get the corresponding element at original index\n            // 16,17,18,19, so on and so forth.\n\n            var i = 0;\n            if (elemIdx < uniforms.k) {\n              i = elemIdx;\n            } else {\n              i = elemIdx * 2 - elemIdx % uniforms.k;\n            }\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.k;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.k));\n            }\n\n            let x0 = getX(batch, i0);\n            var x1 = f32(0.0);\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = x0;\n            }\n\n            if (x0 >= x1) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transform } from '@tensorflow/tfjs-core';\nimport { TransformProgram } from '../transform_webgpu';\nexport function transform(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    image,\n    transforms\n  } = inputs;\n  const {\n    interpolation,\n    fillMode,\n    fillValue,\n    outputShape\n  } = attrs;\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] = outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n  const program = new TransformProgram(outShape);\n  const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n  let fillModeId;\n  switch (fillMode) {\n    case 'constant':\n      fillModeId = 1;\n      break;\n    case 'reflect':\n      fillModeId = 2;\n      break;\n    case 'wrap':\n      fillModeId = 3;\n      break;\n    case 'nearest':\n      fillModeId = 4;\n      break;\n    default:\n      fillModeId = 1;\n      break;\n  }\n  const uniformData = [{\n    type: 'int32',\n    data: [interpolationModeId]\n  }, {\n    type: 'int32',\n    data: [fillModeId]\n  }, {\n    type: 'float32',\n    data: [fillValue]\n  }];\n  return backend.runWebGPUProgram(program, [image, transforms], 'float32', uniformData);\n}\nexport const transformConfig = {\n  kernelName: Transform,\n  backendName: 'webgpu',\n  kernelFunc: transform\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class TransformProgram {\n  constructor(outShape) {\n    this.variableNames = ['Image', 'Transforms'];\n    this.uniforms = 'interpolationModeId : i32, fillModeId : i32, fillValue : f32,';\n    this.workgroupSize = [64, 1, 1];\n    this.size = true;\n    this.outputShape = outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'transform';\n  }\n  getUserCode() {\n    const userCode = `\n          fn mapCoord(outCoord : f32, len : f32) -> f32{\n            var inCoord = outCoord;\n            if(uniforms.fillModeId == 2) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  if (inCoord < sz2) {\n                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +\n                    inCoord;\n                  }\n                  if (inCoord < -len) {\n                    inCoord = inCoord + sz2;\n                  } else {\n                    inCoord = -inCoord - 1.0;\n                  }\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));\n                  if (inCoord >= len) {\n                    inCoord = sz2 - inCoord - 1.0;\n                  }\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 3) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 4) {\n              return clamp(outCoord, 0.0, len - 1.0);\n            }\n            return outCoord;\n          }\n          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,\n            channel : i32) -> f32 {\n            var outputValue : f32;\n            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {\n                outputValue = getImage(batch, coordY, coordX, channel);\n            } else {\n              outputValue = uniforms.fillValue;\n            }\n            return outputValue;\n          }\n\n          ${main('index')} {\n            if (index < uniforms.size) {\n              let coords = getCoordsFromIndex(index);\n              var outputValue : f32;\n              let batch = coords[0];\n              let x = coords[2];\n              let y = coords[1];\n              let channel = coords[3];\n              let xf = f32(x);\n              let yf = f32(y);\n              let a1 = getTransforms(batch, 0);\n              let a2 = getTransforms(batch, 1);\n              let a3 = getTransforms(batch, 2);\n              let b1 = getTransforms(batch, 3);\n              let b2 = getTransforms(batch, 4);\n              let b3 = getTransforms(batch, 5);\n              let c1 = getTransforms(batch, 6);\n              let c2 = getTransforms(batch, 7);\n              let projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = uniforms.fillValue;\n              } else {\n                let inX = (a1 * xf + a2 * yf + a3) / projection;\n                let inY = (b1 * xf + b2 * yf + b3) / projection;\n                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));\n                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));\n\n                if (uniforms.interpolationModeId == 1) {\n                  let coordY = i32(round(mapY));\n                  let coordX = i32(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  let yFloor = floor(mapY);\n                  let xFloor = floor(mapX);\n                  let yCeil = yFloor + 1.0;\n                  let xCeil = xFloor + 1.0;\n                  let valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);\n                  let valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutputAtIndex(index, outputValue);\n            }\n          }\n        `;\n    return userCode;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unpack } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function unpack(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    value\n  } = inputs;\n  let {\n    axis\n  } = attrs;\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n  const x = value;\n  const xRank = x.shape.length;\n  const num = value.shape[axis];\n  const outShape = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n  const toDispose = [];\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        begin,\n        size\n      }\n    });\n    const reshaped = reshape({\n      inputs: {\n        x: sliced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    res[i] = reshaped;\n    toDispose.push(sliced);\n  }\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return res;\n}\nexport const unpackConfig = {\n  kernelName: Unpack,\n  backendName: 'webgpu',\n  kernelFunc: unpack\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, UnsortedSegmentSum, util } from '@tensorflow/tfjs-core';\nimport { UnsortedSegmentSumProgram } from '../unsorted_segment_sum_webgpu';\nimport { fill } from './Fill';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function unsortedSegmentSum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    segmentIds\n  } = inputs;\n  const {\n    numSegments\n  } = attrs;\n  const xRank = x.shape.length;\n  const toDispose = [];\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n  const outShape = backend_util.segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D = reshape({\n    inputs: {\n      x: permutedX\n    },\n    backend,\n    attrs: {\n      shape: [-1, inSize]\n    }\n  });\n  toDispose.push(a2D);\n  const dtype = x.dtype;\n  const shape = [a2D.shape[0], numSegments];\n  const output = fill({\n    backend,\n    attrs: {\n      shape,\n      value: 0,\n      dtype\n    }\n  });\n  const program = new UnsortedSegmentSumProgram(a2D.shape, shape, dtype);\n  const uniformData = [{\n    type: 'int32',\n    data: [numSegments]\n  }, {\n    type: 'int32',\n    data: [util.sizeFromShape(a2D.shape)]\n  }];\n  const segResult = backend.runWebGPUProgram(program, [a2D, segmentIds], dtype, uniformData, output);\n  const reshaped = reshape({\n    inputs: {\n      x: segResult\n    },\n    backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  toDispose.push(segResult);\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({\n      inputs: {\n        x: result\n      },\n      backend,\n      attrs: {\n        perm\n      }\n    });\n  }\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return result;\n}\nexport const unsortedSegmentSumConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgpu',\n  kernelFunc: unsortedSegmentSum\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { atomicAddSnippet } from './shader_util';\nimport { getMainHeaderString as main } from './webgpu_program';\nimport { computeDispatch, flatDispatchLayout } from './webgpu_util';\nexport class UnsortedSegmentSumProgram {\n  constructor(inShape, outShape, outputDtype) {\n    this.outputShape = [];\n    this.variableNames = ['x', 'segmentIds'];\n    this.uniforms = 'numSegments : i32, xSize: i32,';\n    this.workgroupSize = [64, 1, 1];\n    this.atomic = true;\n    this.outputShape = outShape;\n    this.dispatchLayout = flatDispatchLayout(inShape);\n    this.dispatch = computeDispatch(this.dispatchLayout, inShape, this.workgroupSize);\n    if (outputDtype !== 'float32' && outputDtype !== 'int32') {\n      throw new Error(`UnsortedSegmentSum only supports float32 and int32\n              types, does not support ${outputDtype} type.`);\n    }\n    this.type = outputDtype;\n    this.shaderKey = 'unsortedSegmentSum';\n  }\n  getUserCode() {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.xSize) {\n        let coords = getXCoordsFromIndex(index);\n        let b = coords[0];\n        let inCol = coords[1];\n\n        let segmentId = i32(getSegmentIds(inCol));\n        if (segmentId >= 0) {\n          let flatIndex = b * uniforms.numSegments + segmentId % uniforms.numSegments;\n          let value = getX(b, inCol);\n\n          ${atomicAddSnippet('&result[flatIndex]', 'value', this.type)}\n        }\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n"],
  "mappings": "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",
  "names": ["buffer", "newTexture", "PixelsOpType", "useGlobalIndex", "coords", "isFlatDispatchLayout", "dtype", "snippet", "MatMulProgramType", "buffer", "width", "height", "offset", "uniformsType", "BinaryOpType", "isNaN", "UnaryOpType", "activationFnSnippet", "transpose", "outReshaped", "real", "imag", "complex", "real", "imag", "program", "inputs", "program", "prod", "tensors2D", "outShape", "innerElementSize", "innerElementSize", "CumOpType", "reverse", "getCoords", "reverse", "reverse", "reverse", "mean", "step", "step", "prod", "sparseSegmentSum", "sparseSegmentMean", "getSourceCoords", "$defaultValue", "inputs", "prevIndices"]
}
