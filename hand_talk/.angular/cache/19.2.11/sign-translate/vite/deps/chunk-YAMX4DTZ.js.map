{
  "version": 3,
  "sources": ["../../../../../../node_modules/@sutton-signwriting/sgnw-components/dist/esm/icons-472d6293.js"],
  "sourcesContent": ["/*!\n * The Sutton SignWriting Web Components\n */\nimport { c as createCommonjsModule, a as commonjsGlobal } from './_commonjsHelpers-383fba37.js';\nvar convert = createCommonjsModule(function (module, exports) {\n  /**\n  * Sutton SignWriting Core Module v1.5.4 (https://github.com/sutton-signwriting/core)\n  * Author: Steve Slevinski  (https://SteveSlevinski.me)\n  * convert.js is released under the MIT License.\n  */\n\n  (function (global, factory) {\n    factory(exports);\n  })(commonjsGlobal, function (exports) {\n    /**\r\n     * Object of regular expressions for FSW strings\r\n     * \r\n     * @alias fsw.re\r\n     * @property {string} symbol - regular expressions for a symbol\r\n     * @property {string} coord - regular expressions for a coordinate\r\n     * @property {string} sort - regular expressions for the sorting marker\r\n     * @property {string} box - regular expression for a signbox marker\r\n     * @property {string} prefix - regular expression for a sorting marker followed by one or more symbols\r\n     * @property {string} spatial - regular expression for a symbol followed by a coordinate\r\n     * @property {string} signbox - regular expression for a signbox marker, max coordinate and zero or more spatial symbols\r\n     * @property {string} sign - regular expression for an optional prefix followed by a signbox\r\n     * @property {string} sortable - regular expression for a mandatory prefix followed by a signbox\r\n     */\n    let re$1 = {\n      'symbol': 'S[123][0-9a-f]{2}[0-5][0-9a-f]',\n      'coord': '[0-9]{3}x[0-9]{3}',\n      'sort': 'A',\n      'box': '[BLMR]'\n    };\n    re$1.prefix = `(?:${re$1.sort}(?:${re$1.symbol})+)`;\n    re$1.spatial = `${re$1.symbol}${re$1.coord}`;\n    re$1.signbox = `${re$1.box}${re$1.coord}(?:${re$1.spatial})*`;\n    re$1.sign = `${re$1.prefix}?${re$1.signbox}`;\n    re$1.sortable = `${re$1.prefix}${re$1.signbox}`;\n\n    /**\r\n     * Object of regular expressions for SWU strings in UTF-16\r\n     * \r\n     * @alias swu.re\r\n     * @property {string} symbol - regular expressions for a symbol\r\n     * @property {string} coord - regular expressions for a coordinate\r\n     * @property {string} sort - regular expressions for the sorting marker\r\n     * @property {string} box - regular expression for a signbox marker\r\n     * @property {string} prefix - regular expression for a sorting marker followed by one or more symbols\r\n     * @property {string} spatial - regular expression for a symbol followed by a coordinate\r\n     * @property {string} signbox - regular expression for a signbox marker, max coordinate and zero or more spatial symbols\r\n     * @property {string} sign - regular expression for an optional prefix followed by a signbox\r\n     * @property {string} sortable - regular expression for a mandatory prefix followed by a signbox\r\n     */\n    let re = {\n      'symbol': '(?:(?:\\uD8C0[\\uDC01-\\uDFFF])|(?:[\\uD8C1-\\uD8FC][\\uDC00-\\uDFFF])|(?:\\uD8FD[\\uDC00-\\uDC80]))',\n      'coord': '(?:\\uD836[\\uDC0C-\\uDDFF]){2}',\n      'sort': '\\uD836\\uDC00',\n      'box': '\\uD836[\\uDC01-\\uDC04]'\n    };\n    re.prefix = `(?:${re.sort}(?:${re.symbol})+)`;\n    re.spatial = `${re.symbol}${re.coord}`;\n    re.signbox = `${re.box}${re.coord}(?:${re.spatial})*`;\n    re.sign = `${re.prefix}?${re.signbox}`;\n    re.sortable = `${re.prefix}${re.signbox}`;\n\n    /** The convert module contains functions to convert between Formal SignWriitng in ASCII (FSW) and SignWriting in Unicode (SWU) characters, along with other types of data.\r\n     * [Characters set definitions](https://tools.ietf.org/id/draft-slevinski-formal-signwriting-09.html#name-characters)\r\n     * @module convert\r\n     */\n    /**\r\n     * Function to convert an SWU structural marker to FSW equivalent\r\n     * @function convert.swu2mark\r\n     * @param {string} swuMark - character for SWU structural marker\r\n     * @returns {string} FSW structural marker\r\n     * @example\r\n     * convert.swu2mark('𝠀')\r\n     * \r\n     * return 'A'\r\n     */\n\n    const swu2mark = swuMark => {\n      return {\n        '𝠀': 'A',\n        '𝠁': 'B',\n        '𝠂': 'L',\n        '𝠃': 'M',\n        '𝠄': 'R'\n      }[swuMark];\n    };\n    /**\r\n     * Function to convert an FSW structural marker to SWU equivalent\r\n     * @function convert.mark2swu\r\n     * @param {string} fswMark - character for FSW structural marker\r\n     * @returns {string} SWU structural marker\r\n     * @example\r\n     * convert.mark2swu('A')\r\n     * \r\n     * return '𝠀'\r\n     */\n\n    const mark2swu = fswMark => {\n      return {\n        'A': '𝠀',\n        'B': '𝠁',\n        'L': '𝠂',\n        'M': '𝠃',\n        'R': '𝠄'\n      }[fswMark];\n    };\n    /**\r\n     * Function to convert an SWU number character to an integer\r\n     * @function convert.swu2num\r\n     * @param {string} swuNum - SWU number character\r\n     * @returns {number} Integer value for number\r\n     * @example\r\n     * convert.swu2num('𝤆')\r\n     * \r\n     * return 500\r\n     */\n\n    const swu2num = swuNum => parseInt(swuNum.codePointAt(0)) - 0x1D80C + 250;\n    /**\r\n     * Function to convert a number to an SWU number character\r\n     * @function convert.num2swu\r\n     * @param {number} num - Integer value for number\r\n     * @returns {string} SWU number character\r\n     * @example\r\n     * convert.num2swu(500)\r\n     * \r\n     * return '𝤆'\r\n     */\n\n    const num2swu = num => String.fromCodePoint(0x1D80C + parseInt(num) - 250);\n    /**\r\n     * Function to convert two SWU number characters to an array of x,y integers\r\n     * @function convert.swu2coord\r\n     * @param {string} swuCoord - Two SWU number character\r\n     * @returns {number[]} Array of x,y integers\r\n     * @example\r\n     * convert.swu2coord('𝤆𝤆')\r\n     * \r\n     * return [500, 500]\r\n     */\n\n    const swu2coord = swuCoord => [swu2num(swuCoord.slice(0, 2)), swu2num(swuCoord.slice(2, 4))];\n    /**\r\n     * Function to convert an array of x,y integers to two SWU number characters\r\n     * @function convert.coord2swu\r\n     * @param {number[]} coord - Array of x,y integers\r\n     * @returns {string} Two SWU number character\r\n     * @example\r\n     * convert.coord2swu([500, 500])\r\n     * \r\n     * return '𝤆𝤆'\r\n     */\n\n    const coord2swu = coord => coord.map(num => num2swu(num)).join('');\n    /**\r\n     * Function to convert an FSW coordinate string to an array of x,y integers\r\n     * @function convert.fsw2coord\r\n     * @param {string} fswCoord - An FSW coordinate string\r\n     * @returns {number[]} Array of x,y integers\r\n     * @example\r\n     * convert.fsw2coord('500x500')\r\n     * \r\n     * return [500, 500]\r\n     */\n\n    const fsw2coord = fswCoord => fswCoord.split('x').map(num => parseInt(num));\n    /**\r\n     * Function to convert an array of x,y integers to an FSW coordinate string\r\n     * @function convert.coord2fsw\r\n     * @param {number[]} coord - Array of x,y integers\r\n     * @returns {string} An FSW coordinate string\r\n     * @example\r\n     * convert.coord2fsw([500, 500])\r\n     * \r\n     * return '500x500'\r\n     */\n\n    const coord2fsw = coord => coord.join('x');\n    /**\r\n     * Function to convert an SWU symbol character to a code point on plane 4\r\n     * @function convert.swu2code\r\n     * @param {string} swuSym - SWU symbol character\r\n     * @returns {number} Code point on plane 4\r\n     * @example\r\n     * convert.swu2code('񀀁')\r\n     * \r\n     * return 0x40001\r\n     */\n\n    const swu2code = swuSym => parseInt(swuSym.codePointAt(0));\n    /**\r\n     * Function to convert a code point on plane 4 to an SWU symbol character\r\n     * @function convert.code2swu\r\n     * @param {number} code - Code point on plane 4\r\n     * @returns {string} SWU symbol character\r\n     * @example\r\n     * convert.code2swu(0x40001)\r\n     * \r\n     * return '񀀁'\r\n     */\n\n    const code2swu = code => String.fromCodePoint(code);\n    /**\r\n     * Function to convert an SWU symbol character to a 16-bit ID\r\n     * @function convert.swu2id\r\n     * @param {string} swuSym - SWU symbol character\r\n     * @returns {number} 16-bit ID\r\n     * @example\r\n     * convert.swu2id('񀀁')\r\n     * \r\n     * return 1\r\n     */\n\n    const swu2id = swuSym => swu2code(swuSym) - 0x40000;\n    /**\r\n     * Function to convert a 16-bit ID to an SWU symbol character\r\n     * @function convert.id2swu\r\n     * @param {number} id - 16-bit ID\r\n     * @returns {string} SWU symbol character\r\n     * @example\r\n     * convert.id2swu(1)\r\n     * \r\n     * return '񀀁'\r\n     */\n\n    const id2swu = id => code2swu(id + 0x40000);\n    /**\r\n     * Function to convert an FSW symbol key to a 16-bit ID\r\n     * @function convert.key2id\r\n     * @param {string} key - FSW symbol key\r\n     * @returns {number} 16-bit ID\r\n     * @example\r\n     * convert.key2id('S10000')\r\n     * \r\n     * return 1\r\n     */\n\n    const key2id = key => 1 + (parseInt(key.slice(1, 4), 16) - 256) * 96 + parseInt(key.slice(4, 5), 16) * 16 + parseInt(key.slice(5, 6), 16);\n    /**\r\n     * Function to convert a 16-bit ID to an FSW symbol key\r\n     * @function convert.id2key\r\n     * @param {number} id - 16-bit ID\r\n     * @returns {string} FSW symbol key\r\n     * @example\r\n     * convert.id2key(1)\r\n     * \r\n     * return 'S10000'\r\n     */\n\n    const id2key = id => {\n      const symcode = id - 1;\n      const base = parseInt(symcode / 96);\n      const fill = parseInt((symcode - base * 96) / 16);\n      const rotation = parseInt(symcode - base * 96 - fill * 16);\n      return 'S' + (base + 0x100).toString(16) + fill.toString(16) + rotation.toString(16);\n    };\n    /**\r\n     * Function to convert an SWU symbol character to an FSW symbol key\r\n     * @function convert.swu2key\r\n     * @param {string} swuSym - SWU symbol character\r\n     * @returns {string} FSW symbol key\r\n     * @example\r\n     * convert.swu2key('񀀁')\r\n     * \r\n     * return 'S10000'\r\n     */\n\n    const swu2key = swuSym => {\n      const symcode = swu2code(swuSym) - 0x40001;\n      const base = parseInt(symcode / 96);\n      const fill = parseInt((symcode - base * 96) / 16);\n      const rotation = parseInt(symcode - base * 96 - fill * 16);\n      return 'S' + (base + 0x100).toString(16) + fill.toString(16) + rotation.toString(16);\n    };\n    /**\r\n     * Function to convert an FSW symbol key to an SWU symbol character\r\n     * @function convert.key2swu\r\n     * @param {string} key - FSW symbol key\r\n     * @returns {string} SWU symbol character\r\n     * @example\r\n     * convert.key2swu('S10000')\r\n     * \r\n     * return '񀀁'\r\n     */\n\n    const key2swu = key => code2swu(0x40001 + (parseInt(key.slice(1, 4), 16) - 256) * 96 + parseInt(key.slice(4, 5), 16) * 16 + parseInt(key.slice(5, 6), 16));\n    /**\r\n     * Function to convert SWU text to FSW text\r\n     * @function convert.swu2fsw\r\n     * @param {string} swuText - SWU text\r\n     * @returns {string} FSW text\r\n     * @example\r\n     * convert.swu2fsw('𝠀񀀒񀀚񋚥񋛩𝠃𝤟𝤩񋛩𝣵𝤐񀀒𝤇𝣤񋚥𝤐𝤆񀀚𝣮𝣭')\r\n     * \r\n     * return 'AS10011S10019S2e704S2e748M525x535S2e748483x510S10011501x466S2e704510x500S10019476x475'\r\n     */\n\n    const swu2fsw = swuText => {\n      if (!swuText) return '';\n      let fsw = swuText.replace(/𝠀/g, \"A\").replace(/𝠁/g, \"B\").replace(/𝠂/g, \"L\").replace(/𝠃/g, \"M\").replace(/𝠄/g, \"R\");\n      const syms = fsw.match(new RegExp(re.symbol, 'g'));\n      if (syms) {\n        syms.forEach(function (sym) {\n          fsw = fsw.replace(sym, swu2key(sym));\n        });\n      }\n      const coords = fsw.match(new RegExp(re.coord, 'g'));\n      if (coords) {\n        coords.forEach(function (coord) {\n          fsw = fsw.replace(coord, swu2coord(coord).join('x'));\n        });\n      }\n      return fsw;\n    };\n    /**\r\n     * Function to convert FSW text to SWU text\r\n     * @function convert.fsw2swu\r\n     * @param {string} fswText - FSW text\r\n     * @returns {string} SWU text\r\n     * @example\r\n     * convert.fsw2swu('AS10011S10019S2e704S2e748M525x535S2e748483x510S10011501x466S2e704510x500S10019476x475')\r\n     * \r\n     * return '𝠀񀀒񀀚񋚥񋛩𝠃𝤟𝤩񋛩𝣵𝤐񀀒𝤇𝣤񋚥𝤐𝤆񀀚𝣮𝣭'\r\n     */\n\n    const fsw2swu = fswText => {\n      if (!fswText) return '';\n      const prefixes = fswText.match(new RegExp(re$1.prefix, 'g'));\n      if (prefixes) {\n        prefixes.forEach(function (prefix) {\n          fswText = fswText.replace(prefix, '𝠀' + prefix.slice(1).match(/.{6}/g).map(key => key2swu(key)).join(''));\n        });\n      }\n      const boxes = fswText.match(new RegExp(re$1.box + re$1.coord, 'g'));\n      if (boxes) {\n        boxes.forEach(function (boxes) {\n          fswText = fswText.replace(boxes, mark2swu(boxes.slice(0, 1)) + coord2swu(fsw2coord(boxes.slice(1, 8))));\n        });\n      }\n      const spatials = fswText.match(new RegExp(re$1.spatial, 'g'));\n      if (spatials) {\n        spatials.forEach(function (spatial) {\n          fswText = fswText.replace(spatial, key2swu(spatial.slice(0, 6)) + coord2swu(fsw2coord(spatial.slice(6, 13))));\n        });\n      }\n      return fswText;\n    };\n    exports.code2swu = code2swu;\n    exports.coord2fsw = coord2fsw;\n    exports.coord2swu = coord2swu;\n    exports.fsw2coord = fsw2coord;\n    exports.fsw2swu = fsw2swu;\n    exports.id2key = id2key;\n    exports.id2swu = id2swu;\n    exports.key2id = key2id;\n    exports.key2swu = key2swu;\n    exports.mark2swu = mark2swu;\n    exports.num2swu = num2swu;\n    exports.swu2code = swu2code;\n    exports.swu2coord = swu2coord;\n    exports.swu2fsw = swu2fsw;\n    exports.swu2id = swu2id;\n    exports.swu2key = swu2key;\n    exports.swu2mark = swu2mark;\n    exports.swu2num = swu2num;\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n  });\n\n  /* support ongoing development on https://patreon.com/signwriting */\n});\nconst HomeIcon = \"<svg viewBox='0 0 1792 1792' xmlns='http://www.w3.org/2000/svg'><path d='M1472 992v480q0 26-19 45t-45 19h-384v-384h-256v384h-384q-26 0-45-19t-19-45v-480q0-1 .5-3t.5-3l575-474 575 474q1 2 1 6zm223-69l-62 74q-8 9-21 11h-3q-13 0-21-7l-692-577-692 577q-12 8-24 7-13-2-21-11l-62-74q-8-10-7-23.5t11-21.5l719-599q32-26 76-26t76 26l244 204v-195q0-14 9-23t23-9h192q14 0 23 9t9 23v408l219 182q10 8 11 21.5t-7 23.5z'></path></svg>\";\nconst ChevronUpIcon = \"<svg viewBox='0 0 1792 1792' xmlns='http://www.w3.org/2000/svg'><path d='M1683 1331l-166 165q-19 19-45 19t-45-19l-531-531-531 531q-19 19-45 19t-45-19l-166-165q-19-19-19-45.5t19-45.5l742-741q19-19 45-19t45 19l742 741q19 19 19 45.5t-19 45.5z'/></svg>\";\nconst ArrowUpIcon = \"<svg viewBox='0 0 1792 1792' xmlns='http://www.w3.org/2000/svg'><path d='M1675 971q0 51-37 90l-75 75q-38 38-91 38-54 0-90-38l-294-293v704q0 52-37.5 84.5t-90.5 32.5h-128q-53 0-90.5-32.5t-37.5-84.5v-704l-294 293q-36 38-90 38t-90-38l-75-75q-38-38-38-90 0-53 38-91l651-651q35-37 90-37 54 0 91 37l651 651q37 39 37 91z'/></svg>\";\nconst ArrowDownIcon = \"<svg viewBox='0 0 1792 1792' xmlns='http://www.w3.org/2000/svg'><path d='M1675 832q0 53-37 90l-651 652q-39 37-91 37-53 0-90-37l-651-652q-38-36-38-90 0-53 38-91l74-75q39-37 91-37 53 0 90 37l294 294v-704q0-52 38-90t90-38h128q52 0 90 38t38 90v704l294-294q37-37 90-37 52 0 91 37l75 75q37 39 37 91z'/></svg>\";\nconst ArrowLeftIcon = \"<svg viewBox='0 0 1792 1792' xmlns='http://www.w3.org/2000/svg'><path d='M1664 896v128q0 53-32.5 90.5t-84.5 37.5h-704l293 294q38 36 38 90t-38 90l-75 76q-37 37-90 37-52 0-91-37l-651-652q-37-37-37-90 0-52 37-91l651-650q38-38 91-38 52 0 90 38l75 74q38 38 38 91t-38 91l-293 293h704q52 0 84.5 37.5t32.5 90.5z'/></svg>\";\nconst ArrowRightIcon = \"<svg viewBox='0 0 1792 1792' xmlns='http://www.w3.org/2000/svg'><path d='M1600 960q0 54-37 91l-651 651q-39 37-91 37-51 0-90-37l-75-75q-38-38-38-91t38-91l293-293h-704q-52 0-84.5-37.5t-32.5-90.5v-128q0-53 32.5-90.5t84.5-37.5h704l-293-294q-38-36-38-90t38-90l75-75q38-38 90-38 53 0 91 38l651 651q37 35 37 90z'/></svg>\";\nexport { ArrowLeftIcon as A, ChevronUpIcon as C, HomeIcon as H, ArrowRightIcon as a, ArrowUpIcon as b, convert as c, ArrowDownIcon as d };"],
  "mappings": "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",
  "names": ["exports", "boxes"]
}
