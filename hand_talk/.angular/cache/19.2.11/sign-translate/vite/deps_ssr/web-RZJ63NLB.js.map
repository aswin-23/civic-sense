{
  "version": 3,
  "sources": ["../../../../../../node_modules/@firebase/analytics/dist/esm/index.esm2017.js", "../../../../../../node_modules/@capacitor-firebase/analytics/dist/esm/web.js"],
  "sourcesContent": ["import { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory, calculateBackoffMillis, FirebaseError, isIndexedDBAvailable, validateIndexedDBOpenable, isBrowserExtension, areCookiesEnabled, getModularInstance, deepEqual } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport '@firebase/installations';\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Type constant for Firebase Analytics.\n */\nconst ANALYTICS_TYPE = 'analytics';\n// Key to attach FID to in gtag params.\nconst GA_FID_KEY = 'firebase_id';\nconst ORIGIN_KEY = 'origin';\nconst FETCH_TIMEOUT_MILLIS = 60 * 1000;\nconst DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\nconst GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst logger = new Logger('@firebase/analytics');\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst ERRORS = {\n  [\"already-exists\" /* AnalyticsError.ALREADY_EXISTS */]: 'A Firebase Analytics instance with the appId {$id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each appId.',\n  [\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */]: 'initializeAnalytics() cannot be called again with different options than those ' + 'it was initially called with. It can be called again with the same options to ' + 'return the existing instance, or getAnalytics() can be used ' + 'to get a reference to the already-initialized instance.',\n  [\"already-initialized-settings\" /* AnalyticsError.ALREADY_INITIALIZED_SETTINGS */]: 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.',\n  [\"interop-component-reg-failed\" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */]: 'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [\"invalid-analytics-context\" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */]: 'Firebase Analytics is not supported in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */]: 'IndexedDB unavailable or restricted in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [\"fetch-throttle\" /* AnalyticsError.FETCH_THROTTLE */]: 'The config fetch request timed out while in an exponential backoff state.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [\"config-fetch-failed\" /* AnalyticsError.CONFIG_FETCH_FAILED */]: 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [\"no-api-key\" /* AnalyticsError.NO_API_KEY */]: 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid API key.',\n  [\"no-app-id\" /* AnalyticsError.NO_APP_ID */]: 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid app ID.',\n  [\"no-client-id\" /* AnalyticsError.NO_CLIENT_ID */]: 'The \"client_id\" field is empty.',\n  [\"invalid-gtag-resource\" /* AnalyticsError.INVALID_GTAG_RESOURCE */]: 'Trusted Types detected an invalid gtag resource: {$gtagURL}.'\n};\nconst ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Verifies and creates a TrustedScriptURL.\n */\nfunction createGtagTrustedTypesScriptURL(url) {\n  if (!url.startsWith(GTAG_URL)) {\n    const err = ERROR_FACTORY.create(\"invalid-gtag-resource\" /* AnalyticsError.INVALID_GTAG_RESOURCE */, {\n      gtagURL: url\n    });\n    logger.warn(err.message);\n    return '';\n  }\n  return url;\n}\n/**\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\n * have either resolved or rejected.\n *\n * @param promises Array of promises to wait for.\n */\nfunction promiseAllSettled(promises) {\n  return Promise.all(promises.map(promise => promise.catch(e => e)));\n}\n/**\n * Creates a TrustedTypePolicy object that implements the rules passed as policyOptions.\n *\n * @param policyName A string containing the name of the policy\n * @param policyOptions Object containing implementations of instance methods for TrustedTypesPolicy, see {@link https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy#instance_methods\n * | the TrustedTypePolicy reference documentation}.\n */\nfunction createTrustedTypesPolicy(policyName, policyOptions) {\n  // Create a TrustedTypes policy that we can use for updating src\n  // properties\n  let trustedTypesPolicy;\n  if (window.trustedTypes) {\n    trustedTypesPolicy = window.trustedTypes.createPolicy(policyName, policyOptions);\n  }\n  return trustedTypesPolicy;\n}\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nfunction insertScriptTag(dataLayerName, measurementId) {\n  const trustedTypesPolicy = createTrustedTypesPolicy('firebase-js-sdk-policy', {\n    createScriptURL: createGtagTrustedTypesScriptURL\n  });\n  const script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n  const gtagScriptURL = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\n  script.src = trustedTypesPolicy ? trustedTypesPolicy === null || trustedTypesPolicy === void 0 ? void 0 : trustedTypesPolicy.createScriptURL(gtagScriptURL) : gtagScriptURL;\n  script.async = true;\n  document.head.appendChild(script);\n}\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nfunction getOrCreateDataLayer(dataLayerName) {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName];\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);\n      const foundConfig = dynamicConfigResults.find(config => config.measurementId === measurementId);\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(\"config\" /* GtagCommand.CONFIG */, measurementId, gtagParams);\n}\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\n  try {\n    let initializationPromisesToWaitFor = [];\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(config => config.measurementId === sendToId);\n        const initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      /* eslint-disable-next-line @typescript-eslint/no-floating-promises */\n      initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\n    }\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(\"event\" /* GtagCommand.EVENT */, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(gtagCore,\n/**\n * Allows wrapped gtag calls to wait on whichever initialization promises are required,\n * depending on the contents of the gtag params' `send_to` field, if any.\n */\ninitializationPromisesMap,\n/**\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n * before determining what initialization promises (which include FIDs) to wait for.\n */\ndynamicConfigPromisesList,\n/**\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n * which is the key for the initialization promises map.\n */\nmeasurementIdToAppId) {\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(command, ...args) {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === \"event\" /* GtagCommand.EVENT */) {\n        const [measurementId, gtagParams] = args;\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams);\n      } else if (command === \"config\" /* GtagCommand.CONFIG */) {\n        const [measurementId, gtagParams] = args;\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams);\n      } else if (command === \"consent\" /* GtagCommand.CONSENT */) {\n        const [consentAction, gtagParams] = args;\n        // consentAction can be one of 'default' or 'update'.\n        gtagCore(\"consent\" /* GtagCommand.CONSENT */, consentAction, gtagParams);\n      } else if (command === \"get\" /* GtagCommand.GET */) {\n        const [measurementId, fieldName, callback] = args;\n        gtagCore(\"get\" /* GtagCommand.GET */, measurementId, fieldName, callback);\n      } else if (command === \"set\" /* GtagCommand.SET */) {\n        const [customParams] = args;\n        // If SET, second arg must be params.\n        gtagCore(\"set\" /* GtagCommand.SET */, customParams);\n      } else {\n        gtagCore(command, ...args);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper;\n}\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\n  // Create a basic core gtag function\n  let gtagCore = function (..._args) {\n    // Must push IArguments object, not an array.\n    window[dataLayerName].push(arguments);\n  };\n  // Replace it with existing one if found\n  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName]\n  };\n}\n/**\n * Returns the script tag in the DOM matching both the gtag url pattern\n * and the provided data layer name.\n */\nfunction findGtagScriptOnPage(dataLayerName) {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL) && tag.src.includes(dataLayerName)) {\n      return tag;\n    }\n  }\n  return null;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nconst LONG_RETRY_FACTOR = 30;\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n  constructor(throttleMetadata = {}, intervalMillis = BASE_INTERVAL_MILLIS) {\n    this.throttleMetadata = throttleMetadata;\n    this.intervalMillis = intervalMillis;\n  }\n  getThrottleMetadata(appId) {\n    return this.throttleMetadata[appId];\n  }\n  setThrottleMetadata(appId, metadata) {\n    this.throttleMetadata[appId] = metadata;\n  }\n  deleteThrottleMetadata(appId) {\n    delete this.throttleMetadata[appId];\n  }\n}\nconst defaultRetryData = new RetryData();\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey) {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nasync function fetchDynamicConfig(appFields) {\n  var _a;\n  const {\n    appId,\n    apiKey\n  } = appFields;\n  const request = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = await response.json();\n      if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(\"config-fetch-failed\" /* AnalyticsError.CONFIG_FETCH_FAILED */, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nasync function fetchDynamicConfigWithRetry(app,\n// retryData and timeoutMillis are parameterized to allow passing a different value for testing.\nretryData = defaultRetryData, timeoutMillis) {\n  const {\n    appId,\n    apiKey,\n    measurementId\n  } = app.options;\n  if (!appId) {\n    throw ERROR_FACTORY.create(\"no-app-id\" /* AnalyticsError.NO_APP_ID */);\n  }\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(\"no-api-key\" /* AnalyticsError.NO_API_KEY */);\n  }\n  const throttleMetadata = retryData.getThrottleMetadata(appId) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n  const signal = new AnalyticsAbortSignal();\n  setTimeout(async () => {\n    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n    signal.abort();\n  }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\n  return attemptFetchDynamicConfigWithRetry({\n    appId,\n    apiKey,\n    measurementId\n  }, throttleMetadata, signal, retryData);\n}\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(appFields, {\n  throttleEndTimeMillis,\n  backoffCount\n}, signal, retryData = defaultRetryData // for testing\n) {\n  var _a;\n  const {\n    appId,\n    measurementId\n  } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(`Timed out fetching this Firebase app's measurement ID from the server.` + ` Falling back to the measurement ID ${measurementId}` + ` provided in the \"measurementId\" field in the local Firebase config. [${e === null || e === void 0 ? void 0 : e.message}]`);\n      return {\n        appId,\n        measurementId\n      };\n    }\n    throw e;\n  }\n  try {\n    const response = await fetchDynamicConfig(appFields);\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n    return response;\n  } catch (e) {\n    const error = e;\n    if (!isRetriableError(error)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(`Failed to fetch this Firebase app's measurement ID from the server.` + ` Falling back to the measurement ID ${measurementId}` + ` provided in the \"measurementId\" field in the local Firebase config. [${error === null || error === void 0 ? void 0 : error.message}]`);\n        return {\n          appId,\n          measurementId\n        };\n      } else {\n        throw e;\n      }\n    }\n    const backoffMillis = Number((_a = error === null || error === void 0 ? void 0 : error.customData) === null || _a === void 0 ? void 0 : _a.httpStatus) === 503 ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR) : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n    return attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData);\n  }\n}\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    const timeout = setTimeout(resolve, backoffMillis);\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(ERROR_FACTORY.create(\"fetch-throttle\" /* AnalyticsError.FETCH_THROTTLE */, {\n        throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e) {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nclass AnalyticsAbortSignal {\n  constructor() {\n    this.listeners = [];\n  }\n  addEventListener(listener) {\n    this.listeners.push(listener);\n  }\n  abort() {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Event parameters to set on 'gtag' during initialization.\n */\nlet defaultEventParametersForInit;\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nasync function logEvent$1(gtagFunction, initializationPromise, eventName, eventParams, options) {\n  if (options && options.global) {\n    gtagFunction(\"event\" /* GtagCommand.EVENT */, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params = Object.assign(Object.assign({}, eventParams), {\n      'send_to': measurementId\n    });\n    gtagFunction(\"event\" /* GtagCommand.EVENT */, eventName, params);\n  }\n}\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nasync function setCurrentScreen$1(gtagFunction, initializationPromise, screenName, options) {\n  if (options && options.global) {\n    gtagFunction(\"set\" /* GtagCommand.SET */, {\n      'screen_name': screenName\n    });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nasync function setUserId$1(gtagFunction, initializationPromise, id, options) {\n  if (options && options.global) {\n    gtagFunction(\"set\" /* GtagCommand.SET */, {\n      'user_id': id\n    });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nasync function setUserProperties$1(gtagFunction, initializationPromise, properties, options) {\n  if (options && options.global) {\n    const flatProperties = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(\"set\" /* GtagCommand.SET */, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n/**\n * Retrieves a unique Google Analytics identifier for the web client.\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n */\nasync function internalGetGoogleAnalyticsClientId(gtagFunction, initializationPromise) {\n  const measurementId = await initializationPromise;\n  return new Promise((resolve, reject) => {\n    gtagFunction(\"get\" /* GtagCommand.GET */, measurementId, 'client_id', clientId => {\n      if (!clientId) {\n        reject(ERROR_FACTORY.create(\"no-client-id\" /* AnalyticsError.NO_CLIENT_ID */));\n      }\n      resolve(clientId);\n    });\n  });\n}\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nasync function setAnalyticsCollectionEnabled$1(initializationPromise, enabled) {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n/**\n * Consent parameters to default to during 'gtag' initialization.\n */\nlet defaultConsentSettingsForInit;\n/**\n * Sets the variable {@link defaultConsentSettingsForInit} for use in the initialization of\n * analytics.\n *\n * @param consentSettings Maps the applicable end user consent state for gtag.js.\n */\nfunction _setConsentDefaultForInit(consentSettings) {\n  defaultConsentSettingsForInit = consentSettings;\n}\n/**\n * Sets the variable `defaultEventParametersForInit` for use in the initialization of\n * analytics.\n *\n * @param customParams Any custom params the user may pass to gtag.js.\n */\nfunction _setDefaultEventParametersForInit(customParams) {\n  defaultEventParametersForInit = customParams;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function validateIndexedDB() {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {\n      errorInfo: 'IndexedDB is not available in this environment.'\n    }).message);\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {\n        errorInfo: e === null || e === void 0 ? void 0 : e.toString()\n      }).message);\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations _FirebaseInstallationsInternal instance.\n *\n * @returns Measurement ID.\n */\nasync function _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName, options) {\n  var _a;\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise.then(config => {\n    measurementIdToAppId[config.measurementId] = config.appId;\n    if (app.options.measurementId && config.measurementId !== app.options.measurementId) {\n      logger.warn(`The measurement ID in the local Firebase config (${app.options.measurementId})` + ` does not match the measurement ID fetched from the server (${config.measurementId}).` + ` To ensure analytics events are always sent to the correct Analytics property,` + ` update the` + ` measurement ID field in the local config or remove it from the local config.`);\n    }\n  }).catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n  const fidPromise = validateIndexedDB().then(envIsValid => {\n    if (envIsValid) {\n      return installations.getId();\n    } else {\n      return undefined;\n    }\n  });\n  const [dynamicConfig, fid] = await Promise.all([dynamicConfigPromise, fidPromise]);\n  // Detect if user has already put the gtag <script> tag on this page with the passed in\n  // data layer name.\n  if (!findGtagScriptOnPage(dataLayerName)) {\n    insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n  }\n  // Detects if there are consent settings that need to be configured.\n  if (defaultConsentSettingsForInit) {\n    gtagCore(\"consent\" /* GtagCommand.CONSENT */, 'default', defaultConsentSettingsForInit);\n    _setConsentDefaultForInit(undefined);\n  }\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  gtagCore('js', new Date());\n  // User config added first. We don't want users to accidentally overwrite\n  // base Firebase config properties.\n  const configProperties = (_a = options === null || options === void 0 ? void 0 : options.config) !== null && _a !== void 0 ? _a : {};\n  // guard against developers accidentally setting properties with prefix `firebase_`\n  configProperties[ORIGIN_KEY] = 'firebase';\n  configProperties.update = true;\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n  // `configProperties`.\n  gtagCore(\"config\" /* GtagCommand.CONFIG */, dynamicConfig.measurementId, configProperties);\n  // Detects if there is data that will be set on every event logged from the SDK.\n  if (defaultEventParametersForInit) {\n    gtagCore(\"set\" /* GtagCommand.SET */, defaultEventParametersForInit);\n    _setDefaultEventParametersForInit(undefined);\n  }\n  return dynamicConfig.measurementId;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Analytics Service class.\n */\nclass AnalyticsService {\n  constructor(app) {\n    this.app = app;\n  }\n  _delete() {\n    delete initializationPromisesMap[this.app.options.appId];\n    return Promise.resolve();\n  }\n}\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nlet initializationPromisesMap = {};\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList = [];\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId = {};\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName = 'dataLayer';\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName = 'gtag';\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction;\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nlet wrappedGtagFunction;\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone = false;\n/**\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\n * Intended to be used if `gtag.js` script has been installed on\n * this page independently of Firebase Analytics, and is using non-default\n * names for either the `gtag` function or for `dataLayer`.\n * Must be called before calling `getAnalytics()` or it won't\n * have any effect.\n *\n * @public\n *\n * @param options - Custom gtag and dataLayer names.\n */\nfunction settings(options) {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch() {\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages.map((message, index) => `(${index + 1}) ${message}`).join(' ');\n    const err = ERROR_FACTORY.create(\"invalid-analytics-context\" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n/**\n * Analytics instance factory.\n * @internal\n */\nfunction factory(app, installations, options) {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(\"no-app-id\" /* AnalyticsError.NO_APP_ID */);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(`The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` + ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` + ` provided in the \"measurementId\" field in the local Firebase config.`);\n    } else {\n      throw ERROR_FACTORY.create(\"no-api-key\" /* AnalyticsError.NO_API_KEY */);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(\"already-exists\" /* AnalyticsError.ALREADY_EXISTS */, {\n      id: appId\n    });\n  }\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n    getOrCreateDataLayer(dataLayerName);\n    const {\n      wrappedGtag,\n      gtagCore\n    } = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName);\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName, options);\n  const analyticsInstance = new AnalyticsService(app);\n  return analyticsInstance;\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nfunction getAnalytics(app = getApp()) {\n  app = getModularInstance(app);\n  // Dependencies\n  const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\n  if (analyticsProvider.isInitialized()) {\n    return analyticsProvider.getImmediate();\n  }\n  return initializeAnalytics(app);\n}\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nfunction initializeAnalytics(app, options = {}) {\n  // Dependencies\n  const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\n  if (analyticsProvider.isInitialized()) {\n    const existingInstance = analyticsProvider.getImmediate();\n    if (deepEqual(options, analyticsProvider.getOptions())) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */);\n    }\n  }\n  const analyticsInstance = analyticsProvider.initialize({\n    options\n  });\n  return analyticsInstance;\n}\n/**\n * This is a public static method provided to users that wraps four different checks:\n *\n * 1. Check if it's not a browser extension environment.\n * 2. Check if cookies are enabled in current browser.\n * 3. Check if IndexedDB is supported by the browser environment.\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\n *\n * @public\n *\n */\nasync function isSupported() {\n  if (isBrowserExtension()) {\n    return false;\n  }\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n  try {\n    const isDBOpenable = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n/**\n * Use gtag `config` command to set `screen_name`.\n *\n * @public\n *\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param screenName - Screen name to set.\n */\nfunction setCurrentScreen(analyticsInstance, screenName, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setCurrentScreen$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], screenName, options).catch(e => logger.error(e));\n}\n/**\n * Retrieves a unique Google Analytics identifier for the web client.\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nasync function getGoogleAnalyticsClientId(analyticsInstance) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  return internalGetGoogleAnalyticsClientId(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId]);\n}\n/**\n * Use gtag `config` command to set `user_id`.\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param id - User ID to set.\n */\nfunction setUserId(analyticsInstance, id, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setUserId$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], id, options).catch(e => logger.error(e));\n}\n/**\n * Use gtag `config` command to set all params specified.\n *\n * @public\n */\nfunction setUserProperties(analyticsInstance, properties, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setUserProperties$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], properties, options).catch(e => logger.error(e));\n}\n/**\n * Sets whether Google Analytics collection is enabled for this app on this device.\n * Sets global `window['ga-disable-analyticsId'] = true;`\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param enabled - If true, enables collection, if false, disables it.\n */\nfunction setAnalyticsCollectionEnabled(analyticsInstance, enabled) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setAnalyticsCollectionEnabled$1(initializationPromisesMap[analyticsInstance.app.options.appId], enabled).catch(e => logger.error(e));\n}\n/**\n * Adds data that will be set on every event logged from the SDK, including automatic ones.\n * With gtag's \"set\" command, the values passed persist on the current page and are passed with\n * all subsequent events.\n * @public\n * @param customParams - Any custom params the user may pass to gtag.js.\n */\nfunction setDefaultEventParameters(customParams) {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(\"set\" /* GtagCommand.SET */, customParams);\n  } else {\n    _setDefaultEventParametersForInit(customParams);\n  }\n}\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * List of official event parameters can be found in the gtag.js\n * reference documentation:\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n *\n * @public\n */\nfunction logEvent(analyticsInstance, eventName, eventParams, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  logEvent$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], eventName, eventParams, options).catch(e => logger.error(e));\n}\n/**\n * Sets the applicable end user consent state for this web app across all gtag references once\n * Firebase Analytics is initialized.\n *\n * Use the {@link ConsentSettings} to specify individual consent type values. By default consent\n * types are set to \"granted\".\n * @public\n * @param consentSettings - Maps the applicable end user consent state for gtag.js.\n */\nfunction setConsent(consentSettings) {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(\"consent\" /* GtagCommand.CONSENT */, 'update', consentSettings);\n  } else {\n    _setConsentDefaultForInit(consentSettings);\n  }\n}\nconst name = \"@firebase/analytics\";\nconst version = \"0.10.16\";\n\n/**\n * The Firebase Analytics Web SDK.\n * This SDK does not work in a Node.js environment.\n *\n * @packageDocumentation\n */\nfunction registerAnalytics() {\n  _registerComponent(new Component(ANALYTICS_TYPE, (container, {\n    options: analyticsOptions\n  }) => {\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    const installations = container.getProvider('installations-internal').getImmediate();\n    return factory(app, installations, analyticsOptions);\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */));\n  _registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\" /* ComponentType.PRIVATE */));\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n  function internalFactory(container) {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: (eventName, eventParams, options) => logEvent(analytics, eventName, eventParams, options)\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"interop-component-reg-failed\" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */, {\n        reason: e\n      });\n    }\n  }\n}\nregisterAnalytics();\nexport { getAnalytics, getGoogleAnalyticsClientId, initializeAnalytics, isSupported, logEvent, setAnalyticsCollectionEnabled, setConsent, setCurrentScreen, setDefaultEventParameters, setUserId, setUserProperties, settings };\n", "import { WebPlugin } from '@capacitor/core';\nimport { getAnalytics, logEvent, setAnalyticsCollectionEnabled, setConsent, setUserId, setUserProperties } from 'firebase/analytics';\nimport { ConsentStatus, ConsentType } from './definitions';\nexport class FirebaseAnalyticsWeb extends WebPlugin {\n  async getAppInstanceId() {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async setConsent(options) {\n    const status = options.status === ConsentStatus.Granted ? 'granted' : 'denied';\n    const consentSettings = {};\n    switch (options.type) {\n      case ConsentType.AdPersonalization:\n        consentSettings.ad_personalization = status;\n        break;\n      case ConsentType.AdStorage:\n        consentSettings.ad_storage = status;\n        break;\n      case ConsentType.AdUserData:\n        consentSettings.ad_user_data = status;\n        break;\n      case ConsentType.AnalyticsStorage:\n        consentSettings.analytics_storage = status;\n        break;\n      case ConsentType.FunctionalityStorage:\n        consentSettings.functionality_storage = status;\n        break;\n      case ConsentType.PersonalizationStorage:\n        consentSettings.personalization_storage = status;\n        break;\n    }\n    setConsent(consentSettings);\n  }\n  async setUserId(options) {\n    const analytics = getAnalytics();\n    setUserId(analytics, options.userId);\n  }\n  async setUserProperty(options) {\n    const analytics = getAnalytics();\n    setUserProperties(analytics, {\n      [options.key]: options.value\n    });\n  }\n  async setCurrentScreen(options) {\n    const analytics = getAnalytics();\n    logEvent(analytics, 'screen_view', {\n      firebase_screen: options.screenName || undefined,\n      firebase_screen_class: options.screenClassOverride || undefined\n    });\n  }\n  async logEvent(options) {\n    const analytics = getAnalytics();\n    logEvent(analytics, options.name, options.params);\n  }\n  async setSessionTimeoutDuration(_options) {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async setEnabled(_options) {\n    const analytics = getAnalytics();\n    setAnalyticsCollectionEnabled(analytics, _options.enabled);\n  }\n  async isEnabled() {\n    const enabled = window['ga-disable-analyticsId'] === true;\n    return {\n      enabled\n    };\n  }\n  async resetAnalyticsData() {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async initiateOnDeviceConversionMeasurementWithEmailAddress(_options) {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async initiateOnDeviceConversionMeasurementWithPhoneNumber(_options) {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async initiateOnDeviceConversionMeasurementWithHashedEmailAddress(_options) {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async initiateOnDeviceConversionMeasurementWithHashedPhoneNumber(_options) {\n    throw this.unimplemented('Not implemented on web.');\n  }\n}\n"],
  "mappings": "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",
  "names": ["dataLayerName", "initializationPromisesMap", "dynamicConfigPromisesList", "measurementIdToAppId", "dynamicConfigPromisesList", "measurementIdToAppId", "dataLayerName"]
}
