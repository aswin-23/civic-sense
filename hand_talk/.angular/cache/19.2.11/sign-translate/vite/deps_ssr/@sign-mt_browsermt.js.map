{
  "version": 3,
  "sources": ["../../../../../../node_modules/web-worker/src/node/index.js", "../../../../../../node_modules/@sign-mt/browsermt/build/esm/index.js"],
  "sourcesContent": ["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { URL, fileURLToPath, pathToFileURL } from 'url';\nimport path from 'path';\nimport fs from 'fs';\nimport VM from 'vm';\nimport threads from 'worker_threads';\nconst WORKER = Symbol.for('worker');\nconst EVENTS = Symbol.for('events');\nclass EventTarget {\n  constructor() {\n    Object.defineProperty(this, EVENTS, {\n      value: new Map()\n    });\n  }\n  dispatchEvent(event) {\n    event.target = event.currentTarget = this;\n    if (this['on' + event.type]) {\n      try {\n        this['on' + event.type](event);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    const list = this[EVENTS].get(event.type);\n    if (list == null) return;\n    list.forEach(handler => {\n      try {\n        handler.call(this, event);\n      } catch (err) {\n        console.error(err);\n      }\n    });\n  }\n  addEventListener(type, fn) {\n    let events = this[EVENTS].get(type);\n    if (!events) this[EVENTS].set(type, events = []);\n    events.push(fn);\n  }\n  removeEventListener(type, fn) {\n    let events = this[EVENTS].get(type);\n    if (events) {\n      const index = events.indexOf(fn);\n      if (index !== -1) events.splice(index, 1);\n    }\n  }\n}\nfunction Event(type, target) {\n  this.type = type;\n  this.timeStamp = Date.now();\n  this.target = this.currentTarget = this.data = null;\n}\n\n// this module is used self-referentially on both sides of the\n// thread boundary, but behaves differently in each context.\nexport default typeof Worker === 'function' ? Worker : threads.isMainThread ? mainThread() : workerThread();\nconst baseUrl = pathToFileURL(process.cwd() + '/');\nfunction mainThread() {\n  /**\n   * A web-compatible Worker implementation atop Node's worker_threads.\n   *  - uses DOM-style events (Event.data, Event.type, etc)\n   *  - supports event handler properties (worker.onmessage)\n   *  - Worker() constructor accepts a module URL\n   *  - accepts the {type:'module'} option\n   *  - emulates WorkerGlobalScope within the worker\n   * @param {string} url  The URL or module specifier to load\n   * @param {object} [options]  Worker construction options\n   * @param {string} [options.name]  Available as `self.name` within the Worker\n   * @param {string} [options.type=\"classic\"]  Pass \"module\" to create a Module Worker.\n   */\n  class Worker extends EventTarget {\n    constructor(url, options) {\n      super();\n      const {\n        name,\n        type\n      } = options || {};\n      url += '';\n      let mod;\n      if (/^data:/.test(url)) {\n        mod = url;\n      } else {\n        mod = fileURLToPath(new URL(url, baseUrl));\n      }\n      const worker = new threads.Worker(fileURLToPath(import.meta.url), {\n        workerData: {\n          mod,\n          name,\n          type\n        }\n      });\n      Object.defineProperty(this, WORKER, {\n        value: worker\n      });\n      worker.on('message', data => {\n        const event = new Event('message');\n        event.data = data;\n        this.dispatchEvent(event);\n      });\n      worker.on('error', error => {\n        error.type = 'error';\n        this.dispatchEvent(error);\n      });\n      worker.on('exit', () => {\n        this.dispatchEvent(new Event('close'));\n      });\n    }\n    postMessage(data, transferList) {\n      this[WORKER].postMessage(data, transferList);\n    }\n    terminate() {\n      this[WORKER].terminate();\n    }\n  }\n  Worker.prototype.onmessage = Worker.prototype.onerror = Worker.prototype.onclose = null;\n  return Worker;\n}\nfunction workerThread() {\n  // loaded in a real Web Worker (eg: on Electron)\n  if (typeof global.WorkerGlobalScope === 'function') {\n    return;\n  }\n  let {\n    mod,\n    name,\n    type\n  } = threads.workerData;\n  if (!mod) return mainThread();\n\n  // turn global into a mock WorkerGlobalScope\n  const self = global.self = global;\n\n  // enqueue messages to dispatch after modules are loaded\n  let q = [];\n  function flush() {\n    const buffered = q;\n    q = null;\n    buffered.forEach(event => {\n      self.dispatchEvent(event);\n    });\n  }\n  threads.parentPort.on('message', data => {\n    const event = new Event('message');\n    event.data = data;\n    if (q == null) self.dispatchEvent(event);else q.push(event);\n  });\n  threads.parentPort.on('error', err => {\n    err.type = 'Error';\n    self.dispatchEvent(err);\n  });\n  class WorkerGlobalScope extends EventTarget {\n    postMessage(data, transferList) {\n      threads.parentPort.postMessage(data, transferList);\n    }\n    // Emulates https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/close\n    close() {\n      process.exit();\n    }\n    importScripts() {\n      for (let i = 0; i < arguments.length; i++) {\n        const url = arguments[i];\n        let code;\n        if (/^data:/.test(url)) {\n          code = parseDataUrl(url).data;\n        } else {\n          code = fs.readFileSync(new URL(path.posix.normalize(url), pathToFileURL(mod)), 'utf-8');\n        }\n        VM.runInThisContext(code, {\n          filename: url\n        });\n      }\n    }\n  }\n  let proto = Object.getPrototypeOf(global);\n  delete proto.constructor;\n  Object.defineProperties(WorkerGlobalScope.prototype, proto);\n  proto = Object.setPrototypeOf(global, new WorkerGlobalScope());\n  ['postMessage', 'addEventListener', 'removeEventListener', 'dispatchEvent'].forEach(fn => {\n    proto[fn] = proto[fn].bind(global);\n  });\n  global.name = name;\n  global.WorkerGlobalScope = WorkerGlobalScope;\n  const isDataUrl = /^data:/.test(mod);\n  if (type === 'module') {\n    import(isDataUrl ? mod : pathToFileURL(mod)).catch(err => {\n      if (isDataUrl && err.message === 'Not supported') {\n        console.warn('Worker(): Importing data: URLs requires Node 12.10+. Falling back to classic worker.');\n        return evaluateDataUrl(mod, name);\n      }\n      console.error(err);\n    }).then(flush);\n  } else {\n    try {\n      if (/^data:/.test(mod)) {\n        evaluateDataUrl(mod, name);\n      } else {\n        global.importScripts(mod);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    Promise.resolve().then(flush);\n  }\n}\nfunction evaluateDataUrl(url, name) {\n  const {\n    data\n  } = parseDataUrl(url);\n  return VM.runInThisContext(data, {\n    filename: 'worker.<' + (name || 'data:') + '>'\n  });\n}\nfunction parseDataUrl(url) {\n  let [m, type, encoding, data] = url.match(/^data: *([^;,]*)(?: *; *([^,]*))? *,(.*)$/) || [];\n  if (!m) throw Error('Invalid Data URL.');\n  data = decodeURIComponent(data);\n  if (encoding) switch (encoding.toLowerCase()) {\n    case 'base64':\n      data = Buffer.from(data, 'base64').toString();\n      break;\n    default:\n      throw Error('Unknown Data URL encoding \"' + encoding + '\"');\n  }\n  return {\n    type,\n    data\n  };\n}", "import * as comlink from \"comlink\";\nfunction createBergamotWorker(path) {\n  const workerClass = \"Worker\" in globalThis ? globalThis.Worker : require(\"web-worker\");\n  const worker = new workerClass(path);\n  const abortionError = new Promise((resolve, reject) => {\n    worker.addEventListener(\"error\", reject);\n    worker.addEventListener(\"close\", resolve);\n  });\n  return new Proxy(comlink.wrap(worker), {\n    get(target, prop, receiver) {\n      if (prop === \"terminate\") {\n        return () => {\n          worker.terminate();\n        };\n      }\n      const targetProp = Reflect.get(target, prop, receiver);\n      if (typeof targetProp === \"function\") {\n        return (...args) => {\n          return Promise.race([targetProp(...args), abortionError]);\n        };\n      }\n      return targetProp;\n    }\n  });\n}\nexport { createBergamotWorker };\n"],
  "mappings": "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",
  "names": ["Worker", "path"]
}
