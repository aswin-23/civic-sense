{
  "version": 3,
  "sources": ["../../../../../../node_modules/comlink/dist/esm/comlink.mjs"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = val => typeof val === \"object\" && val !== null || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n  canHandle: val => isObject(val) && val[proxyMarker],\n  serialize(obj) {\n    const {\n      port1,\n      port2\n    } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  }\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n  canHandle: value => isObject(value) && throwMarker in value,\n  serialize({\n    value\n  }) {\n    let serialized;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack\n        }\n      };\n    } else {\n      serialized = {\n        isError: false,\n        value\n      };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(new Error(serialized.value.message), serialized.value);\n    }\n    throw serialized.value;\n  }\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([[\"proxy\", proxyTransferHandler], [\"throw\", throwTransferHandler]]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n  for (const allowedOrigin of allowedOrigins) {\n    if (origin === allowedOrigin || allowedOrigin === \"*\") {\n      return true;\n    }\n    if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n  ep.addEventListener(\"message\", function callback(ev) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n      console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n      return;\n    }\n    const {\n      id,\n      type,\n      path\n    } = Object.assign({\n      path: []\n    }, ev.data);\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case \"GET\" /* MessageType.GET */:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case \"SET\" /* MessageType.SET */:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case \"APPLY\" /* MessageType.APPLY */:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n          {\n            const {\n              port1,\n              port2\n            } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case \"RELEASE\" /* MessageType.RELEASE */:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = {\n        value,\n        [throwMarker]: 0\n      };\n    }\n    Promise.resolve(returnValue).catch(value => {\n      return {\n        value,\n        [throwMarker]: 0\n      };\n    }).then(returnValue => {\n      const [wireValue, transferables] = toWireValue(returnValue);\n      ep.postMessage(Object.assign(Object.assign({}, wireValue), {\n        id\n      }), transferables);\n      if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n        // detach and deactive after sending release response above.\n        ep.removeEventListener(\"message\", callback);\n        closeEndPoint(ep);\n        if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n          obj[finalizer]();\n        }\n      }\n    }).catch(error => {\n      // Send Serialization Error To Caller\n      const [wireValue, transferables] = toWireValue({\n        value: new TypeError(\"Unserializable return value\"),\n        [throwMarker]: 0\n      });\n      ep.postMessage(Object.assign(Object.assign({}, wireValue), {\n        id\n      }), transferables);\n    });\n  });\n  if (ep.start) {\n    ep.start();\n  }\n}\nfunction isMessagePort(endpoint) {\n  return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\nfunction wrap(ep, target) {\n  const pendingListeners = new Map();\n  ep.addEventListener(\"message\", function handleMessage(ev) {\n    const {\n      data\n    } = ev;\n    if (!data || !data.id) {\n      return;\n    }\n    const resolver = pendingListeners.get(data.id);\n    if (!resolver) {\n      return;\n    }\n    try {\n      resolver(data);\n    } finally {\n      pendingListeners.delete(data.id);\n    }\n  });\n  return createProxy(ep, pendingListeners, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\nfunction releaseEndpoint(ep) {\n  return requestResponseMessage(ep, new Map(), {\n    type: \"RELEASE\" /* MessageType.RELEASE */\n  }).then(() => {\n    closeEndPoint(ep);\n  });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis && new FinalizationRegistry(ep => {\n  const newCount = (proxyCounter.get(ep) || 0) - 1;\n  proxyCounter.set(ep, newCount);\n  if (newCount === 0) {\n    releaseEndpoint(ep);\n  }\n});\nfunction registerProxy(proxy, ep) {\n  const newCount = (proxyCounter.get(ep) || 0) + 1;\n  proxyCounter.set(ep, newCount);\n  if (proxyFinalizers) {\n    proxyFinalizers.register(proxy, ep, proxy);\n  }\n}\nfunction unregisterProxy(proxy) {\n  if (proxyFinalizers) {\n    proxyFinalizers.unregister(proxy);\n  }\n}\nfunction createProxy(ep, pendingListeners, path = [], target = function () {}) {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          unregisterProxy(proxy);\n          releaseEndpoint(ep);\n          pendingListeners.clear();\n          isProxyReleased = true;\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return {\n            then: () => proxy\n          };\n        }\n        const r = requestResponseMessage(ep, pendingListeners, {\n          type: \"GET\" /* MessageType.GET */,\n          path: path.map(p => p.toString())\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, pendingListeners, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(ep, pendingListeners, {\n        type: \"SET\" /* MessageType.SET */,\n        path: [...path, prop].map(p => p.toString()),\n        value\n      }, transferables).then(fromWireValue);\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if (last === createEndpoint) {\n        return requestResponseMessage(ep, pendingListeners, {\n          type: \"ENDPOINT\" /* MessageType.ENDPOINT */\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn’t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, pendingListeners, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(ep, pendingListeners, {\n        type: \"APPLY\" /* MessageType.APPLY */,\n        path: path.map(p => p.toString()),\n        argumentList\n      }, transferables).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(ep, pendingListeners, {\n        type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n        path: path.map(p => p.toString()),\n        argumentList\n      }, transferables).then(fromWireValue);\n    }\n  });\n  registerProxy(proxy, ep);\n  return proxy;\n}\nfunction myFlat(arr) {\n  return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map(v => v[0]), myFlat(processed.map(v => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n  transferCache.set(obj, transfers);\n  return obj;\n}\nfunction proxy(obj) {\n  return Object.assign(obj, {\n    [proxyMarker]: true\n  });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n  return {\n    postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context)\n  };\n}\nfunction toWireValue(value) {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [{\n        type: \"HANDLER\" /* WireValueType.HANDLER */,\n        name,\n        value: serializedValue\n      }, transferables];\n    }\n  }\n  return [{\n    type: \"RAW\" /* WireValueType.RAW */,\n    value\n  }, transferCache.get(value) || []];\n}\nfunction fromWireValue(value) {\n  switch (value.type) {\n    case \"HANDLER\" /* WireValueType.HANDLER */:\n      return transferHandlers.get(value.name).deserialize(value.value);\n    case \"RAW\" /* WireValueType.RAW */:\n      return value.value;\n  }\n}\nfunction requestResponseMessage(ep, pendingListeners, msg, transfers) {\n  return new Promise(resolve => {\n    const id = generateUUID();\n    pendingListeners.set(id, resolve);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage(Object.assign({\n      id\n    }, msg), transfers);\n  });\n}\nfunction generateUUID() {\n  return new Array(4).fill(0).map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)).join(\"-\");\n}\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n"],
  "mappings": "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",
  "names": ["obj", "returnValue", "proxy"]
}
