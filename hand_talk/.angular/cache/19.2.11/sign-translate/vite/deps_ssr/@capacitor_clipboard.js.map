{
  "version": 3,
  "sources": ["../../../../../../node_modules/@capacitor/clipboard/dist/esm/web.js", "../../../../../../node_modules/@capacitor/clipboard/dist/esm/index.js"],
  "sourcesContent": ["import { WebPlugin } from '@capacitor/core';\nexport class ClipboardWeb extends WebPlugin {\n  async write(options) {\n    if (typeof navigator === 'undefined' || !navigator.clipboard) {\n      throw this.unavailable('Clipboard API not available in this browser');\n    }\n    if (options.string !== undefined) {\n      await this.writeText(options.string);\n    } else if (options.url) {\n      await this.writeText(options.url);\n    } else if (options.image) {\n      if (typeof ClipboardItem !== 'undefined') {\n        try {\n          const blob = await (await fetch(options.image)).blob();\n          const clipboardItemInput = new ClipboardItem({\n            [blob.type]: blob\n          });\n          await navigator.clipboard.write([clipboardItemInput]);\n        } catch (err) {\n          throw new Error('Failed to write image');\n        }\n      } else {\n        throw this.unavailable('Writing images to the clipboard is not supported in this browser');\n      }\n    } else {\n      throw new Error('Nothing to write');\n    }\n  }\n  async read() {\n    if (typeof navigator === 'undefined' || !navigator.clipboard) {\n      throw this.unavailable('Clipboard API not available in this browser');\n    }\n    if (typeof ClipboardItem !== 'undefined') {\n      try {\n        const clipboardItems = await navigator.clipboard.read();\n        const type = clipboardItems[0].types[0];\n        const clipboardBlob = await clipboardItems[0].getType(type);\n        const data = await this._getBlobData(clipboardBlob, type);\n        return {\n          value: data,\n          type\n        };\n      } catch (err) {\n        return this.readText();\n      }\n    } else {\n      return this.readText();\n    }\n  }\n  async readText() {\n    if (typeof navigator === 'undefined' || !navigator.clipboard || !navigator.clipboard.readText) {\n      throw this.unavailable('Reading from clipboard not supported in this browser');\n    }\n    const text = await navigator.clipboard.readText();\n    return {\n      value: text,\n      type: 'text/plain'\n    };\n  }\n  async writeText(text) {\n    if (typeof navigator === 'undefined' || !navigator.clipboard || !navigator.clipboard.writeText) {\n      throw this.unavailable('Writting to clipboard not supported in this browser');\n    }\n    await navigator.clipboard.writeText(text);\n  }\n  _getBlobData(clipboardBlob, type) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      if (type.includes('image')) {\n        reader.readAsDataURL(clipboardBlob);\n      } else {\n        reader.readAsText(clipboardBlob);\n      }\n      reader.onloadend = () => {\n        const r = reader.result;\n        resolve(r);\n      };\n      reader.onerror = e => {\n        reject(e);\n      };\n    });\n  }\n}\n", "import { registerPlugin } from '@capacitor/core';\nimport { ClipboardWeb } from './web';\nconst Clipboard = registerPlugin('Clipboard', {\n  web: () => new ClipboardWeb()\n});\nexport * from './definitions';\nexport { Clipboard };\n"],
  "mappings": ";;;;;;;;;;AACO,IAAM,eAAN,cAA2B,UAAU;AAAA,EACpC,MAAM,SAAS;AAAA;AACnB,UAAI,OAAO,cAAc,eAAe,CAAC,UAAU,WAAW;AAC5D,cAAM,KAAK,YAAY,6CAA6C;AAAA,MACtE;AACA,UAAI,QAAQ,WAAW,QAAW;AAChC,cAAM,KAAK,UAAU,QAAQ,MAAM;AAAA,MACrC,WAAW,QAAQ,KAAK;AACtB,cAAM,KAAK,UAAU,QAAQ,GAAG;AAAA,MAClC,WAAW,QAAQ,OAAO;AACxB,YAAI,OAAO,kBAAkB,aAAa;AACxC,cAAI;AACF,kBAAM,OAAO,OAAO,MAAM,MAAM,QAAQ,KAAK,GAAG,KAAK;AACrD,kBAAM,qBAAqB,IAAI,cAAc;AAAA,cAC3C,CAAC,KAAK,IAAI,GAAG;AAAA,YACf,CAAC;AACD,kBAAM,UAAU,UAAU,MAAM,CAAC,kBAAkB,CAAC;AAAA,UACtD,SAAS,KAAK;AACZ,kBAAM,IAAI,MAAM,uBAAuB;AAAA,UACzC;AAAA,QACF,OAAO;AACL,gBAAM,KAAK,YAAY,kEAAkE;AAAA,QAC3F;AAAA,MACF,OAAO;AACL,cAAM,IAAI,MAAM,kBAAkB;AAAA,MACpC;AAAA,IACF;AAAA;AAAA,EACM,OAAO;AAAA;AACX,UAAI,OAAO,cAAc,eAAe,CAAC,UAAU,WAAW;AAC5D,cAAM,KAAK,YAAY,6CAA6C;AAAA,MACtE;AACA,UAAI,OAAO,kBAAkB,aAAa;AACxC,YAAI;AACF,gBAAM,iBAAiB,MAAM,UAAU,UAAU,KAAK;AACtD,gBAAM,OAAO,eAAe,CAAC,EAAE,MAAM,CAAC;AACtC,gBAAM,gBAAgB,MAAM,eAAe,CAAC,EAAE,QAAQ,IAAI;AAC1D,gBAAM,OAAO,MAAM,KAAK,aAAa,eAAe,IAAI;AACxD,iBAAO;AAAA,YACL,OAAO;AAAA,YACP;AAAA,UACF;AAAA,QACF,SAAS,KAAK;AACZ,iBAAO,KAAK,SAAS;AAAA,QACvB;AAAA,MACF,OAAO;AACL,eAAO,KAAK,SAAS;AAAA,MACvB;AAAA,IACF;AAAA;AAAA,EACM,WAAW;AAAA;AACf,UAAI,OAAO,cAAc,eAAe,CAAC,UAAU,aAAa,CAAC,UAAU,UAAU,UAAU;AAC7F,cAAM,KAAK,YAAY,sDAAsD;AAAA,MAC/E;AACA,YAAM,OAAO,MAAM,UAAU,UAAU,SAAS;AAChD,aAAO;AAAA,QACL,OAAO;AAAA,QACP,MAAM;AAAA,MACR;AAAA,IACF;AAAA;AAAA,EACM,UAAU,MAAM;AAAA;AACpB,UAAI,OAAO,cAAc,eAAe,CAAC,UAAU,aAAa,CAAC,UAAU,UAAU,WAAW;AAC9F,cAAM,KAAK,YAAY,qDAAqD;AAAA,MAC9E;AACA,YAAM,UAAU,UAAU,UAAU,IAAI;AAAA,IAC1C;AAAA;AAAA,EACA,aAAa,eAAe,MAAM;AAChC,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAM,SAAS,IAAI,WAAW;AAC9B,UAAI,KAAK,SAAS,OAAO,GAAG;AAC1B,eAAO,cAAc,aAAa;AAAA,MACpC,OAAO;AACL,eAAO,WAAW,aAAa;AAAA,MACjC;AACA,aAAO,YAAY,MAAM;AACvB,cAAM,IAAI,OAAO;AACjB,gBAAQ,CAAC;AAAA,MACX;AACA,aAAO,UAAU,OAAK;AACpB,eAAO,CAAC;AAAA,MACV;AAAA,IACF,CAAC;AAAA,EACH;AACF;;;AChFA,IAAM,YAAY,eAAe,aAAa;AAAA,EAC5C,KAAK,MAAM,IAAI,aAAa;AAC9B,CAAC;",
  "names": []
}
