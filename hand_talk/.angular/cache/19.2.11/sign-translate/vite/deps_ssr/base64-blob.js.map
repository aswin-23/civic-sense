{
  "version": 3,
  "sources": ["../../../../../../node_modules/b64-to-blob/b64toBlob.js", "../../../../../../node_modules/base64-blob/lib/es/index.js"],
  "sourcesContent": ["(function (root, globalName, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD:\n    define([], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // Node:\n    module.exports = factory();\n    // Use module export as simulated ES6 default export:\n    module.exports.default = module.exports;\n  } else {\n    // Browser:\n    window[globalName] = factory();\n  }\n})(this, 'b64toBlob', function () {\n  'use strict';\n\n  return function b64toBlob(b64Data, contentType, sliceSize) {\n    contentType = contentType || '';\n    sliceSize = sliceSize || 512;\n    var byteCharacters = atob(b64Data);\n    var byteArrays = [];\n    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      var slice = byteCharacters.slice(offset, offset + sliceSize);\n      var byteNumbers = new Array(slice.length);\n      for (var i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n      var byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n    var blob = new Blob(byteArrays, {\n      type: contentType\n    });\n    return blob;\n  };\n});", "/**\n * Bundle of base64-blob\n * Generated: 2019-07-23\n * Version: 1.4.1\n * License: MIT\n * Author: livelybone(2631541504@qq.com)\n */\n\nimport b64ToBlob from 'b64-to-blob';\n\n/* global Promise */\n\n/**\r\n * dataURL to blob\r\n * */\nfunction base64ToBlob(base64) {\n  try {\n    var arr = base64.split(',');\n    var mime = arr[0].match(/:(.*?);/)[1];\n    return Promise.resolve(b64ToBlob(arr[1], mime));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n\n/**\r\n * blob to dataURL\r\n * */\nfunction blobToBase64(blob) {\n  return new Promise(function (res, rej) {\n    try {\n      var a = new FileReader();\n      a.onload = function (e) {\n        res(e.target.result);\n      };\n      a.readAsDataURL(blob);\n    } catch (e) {\n      rej(e);\n    }\n  });\n}\nexport { base64ToBlob, blobToBase64 };"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA,KAAC,SAAU,MAAM,YAAY,SAAS;AACpC,UAAI,OAAO,WAAW,cAAc,OAAO,KAAK;AAE9C,eAAO,CAAC,GAAG,OAAO;AAAA,MACpB,WAAW,OAAO,WAAW,YAAY,OAAO,SAAS;AAEvD,eAAO,UAAU,QAAQ;AAEzB,eAAO,QAAQ,UAAU,OAAO;AAAA,MAClC,OAAO;AAEL,eAAO,UAAU,IAAI,QAAQ;AAAA,MAC/B;AAAA,IACF,GAAG,SAAM,aAAa,WAAY;AAChC;AAEA,aAAO,SAAS,UAAU,SAAS,aAAa,WAAW;AACzD,sBAAc,eAAe;AAC7B,oBAAY,aAAa;AACzB,YAAI,iBAAiB,KAAK,OAAO;AACjC,YAAI,aAAa,CAAC;AAClB,iBAAS,SAAS,GAAG,SAAS,eAAe,QAAQ,UAAU,WAAW;AACxE,cAAI,QAAQ,eAAe,MAAM,QAAQ,SAAS,SAAS;AAC3D,cAAI,cAAc,IAAI,MAAM,MAAM,MAAM;AACxC,mBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,wBAAY,CAAC,IAAI,MAAM,WAAW,CAAC;AAAA,UACrC;AACA,cAAI,YAAY,IAAI,WAAW,WAAW;AAC1C,qBAAW,KAAK,SAAS;AAAA,QAC3B;AACA,YAAI,OAAO,IAAI,KAAK,YAAY;AAAA,UAC9B,MAAM;AAAA,QACR,CAAC;AACD,eAAO;AAAA,MACT;AAAA,IACF,CAAC;AAAA;AAAA;;;AC3BD,yBAAsB;AAOtB,SAAS,aAAa,QAAQ;AAC5B,MAAI;AACF,QAAI,MAAM,OAAO,MAAM,GAAG;AAC1B,QAAI,OAAO,IAAI,CAAC,EAAE,MAAM,SAAS,EAAE,CAAC;AACpC,WAAO,QAAQ,YAAQ,mBAAAA,SAAU,IAAI,CAAC,GAAG,IAAI,CAAC;AAAA,EAChD,SAAS,GAAG;AACV,WAAO,QAAQ,OAAO,CAAC;AAAA,EACzB;AACF;AAKA,SAAS,aAAa,MAAM;AAC1B,SAAO,IAAI,QAAQ,SAAU,KAAK,KAAK;AACrC,QAAI;AACF,UAAI,IAAI,IAAI,WAAW;AACvB,QAAE,SAAS,SAAU,GAAG;AACtB,YAAI,EAAE,OAAO,MAAM;AAAA,MACrB;AACA,QAAE,cAAc,IAAI;AAAA,IACtB,SAAS,GAAG;AACV,UAAI,CAAC;AAAA,IACP;AAAA,EACF,CAAC;AACH;",
  "names": ["b64ToBlob"]
}
