{
  "version": 3,
  "sources": ["../../../../../../node_modules/@sutton-signwriting/sgnw-components/dist/esm/fsw-74700325.js"],
  "sourcesContent": ["/*!\n * The Sutton SignWriting Web Components\n */\nimport { c as createCommonjsModule, a as commonjsGlobal } from './_commonjsHelpers-383fba37.js';\nvar fsw = createCommonjsModule(function (module, exports) {\n  /**\n  * Sutton SignWriting Core Module v1.5.4 (https://github.com/sutton-signwriting/core)\n  * Author: Steve Slevinski  (https://SteveSlevinski.me)\n  * fsw.js is released under the MIT License.\n  */\n\n  (function (global, factory) {\n    factory(exports);\n  })(commonjsGlobal, function (exports) {\n    /**\r\n     * Object of regular expressions for FSW strings\r\n     * \r\n     * @alias fsw.re\r\n     * @property {string} symbol - regular expressions for a symbol\r\n     * @property {string} coord - regular expressions for a coordinate\r\n     * @property {string} sort - regular expressions for the sorting marker\r\n     * @property {string} box - regular expression for a signbox marker\r\n     * @property {string} prefix - regular expression for a sorting marker followed by one or more symbols\r\n     * @property {string} spatial - regular expression for a symbol followed by a coordinate\r\n     * @property {string} signbox - regular expression for a signbox marker, max coordinate and zero or more spatial symbols\r\n     * @property {string} sign - regular expression for an optional prefix followed by a signbox\r\n     * @property {string} sortable - regular expression for a mandatory prefix followed by a signbox\r\n     */\n    let re$1 = {\n      'symbol': 'S[123][0-9a-f]{2}[0-5][0-9a-f]',\n      'coord': '[0-9]{3}x[0-9]{3}',\n      'sort': 'A',\n      'box': '[BLMR]'\n    };\n    re$1.prefix = `(?:${re$1.sort}(?:${re$1.symbol})+)`;\n    re$1.spatial = `${re$1.symbol}${re$1.coord}`;\n    re$1.signbox = `${re$1.box}${re$1.coord}(?:${re$1.spatial})*`;\n    re$1.sign = `${re$1.prefix}?${re$1.signbox}`;\n    re$1.sortable = `${re$1.prefix}${re$1.signbox}`;\n\n    /**\n     * Object of regular expressions for style strings\n     * \n     * @alias style.re\n     * @type {object}\n     * @property {string} colorize - regular expression for colorize section\n     * @property {string} colorhex - regular expression for color hex values with 3 or 6 characters\n     * @property {string} colorname - regular expression for css color name\n     * @property {string} padding - regular expression for padding section\n     * @property {string} zoom - regular expression for zoom section\n     * @property {string} classbase - regular expression for class name definition\n     * @property {string} id - regular expression for id definition\n     * @property {string} colorbase - regular expression for color hex or color name\n     * @property {string} color - regular expression for single color entry\n     * @property {string} colors - regular expression for double color entry\n     * @property {string} background - regular expression for background section\n     * @property {string} detail - regular expression for color details for line and optional fill\n     * @property {string} detailsym - regular expression for color details for individual symbols\n     * @property {string} classes - regular expression for one or more class names\n     * @property {string} full - full regular expression for style string\n     */\n    let re = {\n      'colorize': 'C',\n      'colorhex': '(?:[0-9a-fA-F]{3}){1,2}',\n      'colorname': '[a-zA-Z]+',\n      'padding': 'P[0-9]{2}',\n      'zoom': 'Z(?:[0-9]+(?:\\\\.[0-9]+)?|x)',\n      'classbase': '-?[_a-zA-Z][_a-zA-Z0-9-]{0,100}',\n      'id': '[a-zA-Z][_a-zA-Z0-9-]{0,100}'\n    };\n    re.colorbase = `(?:${re.colorhex}|${re.colorname})`;\n    re.color = `_${re.colorbase}_`;\n    re.colors = `_${re.colorbase}(?:,${re.colorbase})?_`;\n    re.background = `G${re.color}`;\n    re.detail = `D${re.colors}`;\n    re.detailsym = `D[0-9]{2}${re.colors}`;\n    re.classes = `${re.classbase}(?: ${re.classbase})*`;\n    re.full = `-(${re.colorize})?(${re.padding})?(${re.background})?(${re.detail})?(${re.zoom})?(?:-((?:${re.detailsym})*))?(?:-(${re.classes})?!(?:(${re.id})!)?)?`;\n    const prefixColor = color => {\n      const regex = new RegExp(`^${re.colorhex}$`);\n      return (regex.test(color) ? '#' : '') + color;\n    };\n    const definedProps = obj => Object.fromEntries(Object.entries(obj).filter(([k, v]) => v !== undefined));\n    /**\n     * Function to parse style string to object\n     * @function style.parse\n     * @param {string} styleString - a style string\n     * @returns {StyleObject} elements of style string\n     * @example\n     * style.parse('-CP10G_blue_D_red,Cyan_')\n     * \n     * return {\n     *  'colorize': true,\n     *  'padding': 10,\n     *  'background': 'blue',\n     *  'detail': ['red', 'Cyan']\n     * }\n     */\n\n    const parse$1 = styleString => {\n      const regex = `^${re.full}`;\n      const m = (typeof styleString === 'string' ? styleString.match(new RegExp(regex)) : []) || [];\n      return definedProps({\n        'colorize': !m[1] ? undefined : !!m[1],\n        'padding': !m[2] ? undefined : parseInt(m[2].slice(1)),\n        'background': !m[3] ? undefined : prefixColor(m[3].slice(2, -1)),\n        'detail': !m[4] ? undefined : m[4].slice(2, -1).split(',').map(prefixColor),\n        'zoom': !m[5] ? undefined : m[5] === 'Zx' ? 'x' : parseFloat(m[5].slice(1)),\n        'detailsym': !m[6] ? undefined : m[6].match(new RegExp(re.detailsym, 'g')).map(val => {\n          const parts = val.split('_');\n          const detail = parts[1].split(',').map(prefixColor);\n          return {\n            'index': parseInt(parts[0].slice(1)),\n            'detail': detail\n          };\n        }),\n        'classes': !m[7] ? undefined : m[7],\n        'id': !m[8] ? undefined : m[8]\n      });\n    };\n\n    /** The convert module contains functions to convert between Formal SignWriitng in ASCII (FSW) and SignWriting in Unicode (SWU) characters, along with other types of data.\r\n     * [Characters set definitions](https://tools.ietf.org/id/draft-slevinski-formal-signwriting-09.html#name-characters)\r\n     * @module convert\r\n     */\n    /**\r\n     * Function to convert an FSW coordinate string to an array of x,y integers\r\n     * @function convert.fsw2coord\r\n     * @param {string} fswCoord - An FSW coordinate string\r\n     * @returns {number[]} Array of x,y integers\r\n     * @example\r\n     * convert.fsw2coord('500x500')\r\n     * \r\n     * return [500, 500]\r\n     */\n\n    const fsw2coord = fswCoord => fswCoord.split('x').map(num => parseInt(num));\n    const parse = {\n      /**\r\n       * Function to parse an fsw symbol with optional coordinate and style string\r\n       * @function fsw.parse.symbol\r\n       * @param {string} fswSym - an fsw symbol\r\n       * @returns {SymbolObject} elements of fsw symbol\r\n       * @example\r\n       * fsw.parse.symbol('S10000500x500-C')\r\n       * \r\n       * return {\r\n       *  'symbol': 'S10000',\r\n       *  'coord': [500, 500],\r\n       *  'style': '-C'\r\n       * }\r\n       */\n      symbol: fswSym => {\n        const regex = `^(${re$1.symbol})(${re$1.coord})?(${re.full})?`;\n        const symbol = typeof fswSym === 'string' ? fswSym.match(new RegExp(regex)) : undefined;\n        return {\n          'symbol': symbol ? symbol[1] : undefined,\n          'coord': symbol && symbol[2] ? fsw2coord(symbol[2]) : undefined,\n          'style': symbol ? symbol[3] : undefined\n        };\n      },\n      /**\r\n       * Function to parse an fsw sign with style string\r\n       * @function fsw.parse.sign\r\n       * @param {string} fswSign - an fsw sign\r\n       * @returns { SignObject } elements of fsw sign\r\n       * @example\r\n       * fsw.parse.sign('AS10011S10019S2e704S2e748M525x535S2e748483x510S10011501x466S2e704510x500S10019476x475-C')\r\n       * \r\n       * return {\r\n       *  sequence: ['S10011', 'S10019', 'S2e704', 'S2e748'],\r\n       *  box: 'M',\r\n       *  max: [525, 535],\r\n       *  spatials: [\r\n       *    {\r\n       *      symbol: 'S2e748',\r\n       *      coord: [483, 510]\r\n       *    },\r\n       *    {\r\n       *      symbol: 'S10011',\r\n       *      coord: [501, 466]\r\n       *    },\r\n       *    {\r\n       *      symbol: 'S2e704',\r\n       *      coord: [510, 500]\r\n       *    },\r\n       *    {\r\n       *      symbol: 'S10019',\r\n       *      coord: [476, 475]\r\n       *    }\r\n       *  ],\r\n       *  style: '-C'\r\n       * }\r\n       */\n      sign: fswSign => {\n        const regex = `^(${re$1.prefix})?(${re$1.signbox})(${re.full})?`;\n        const sign = typeof fswSign === 'string' ? fswSign.match(new RegExp(regex)) : undefined;\n        if (sign) {\n          return {\n            'sequence': sign[1] ? sign[1].slice(1).match(/.{6}/g) : undefined,\n            'box': sign[2][0],\n            'max': fsw2coord(sign[2].slice(1, 8)),\n            'spatials': sign[2].length < 9 ? undefined : sign[2].slice(8).match(/(.{13})/g).map(m => {\n              return {\n                symbol: m.slice(0, 6),\n                coord: [parseInt(m.slice(6, 9)), parseInt(m.slice(10, 13))]\n              };\n            }),\n            'style': sign[3]\n          };\n        } else {\n          return {};\n        }\n      },\n      /**\r\n       * Function to parse an fsw text\r\n       * @function fsw.parse.text\r\n       * @param {string} fswText - an fsw text\r\n       * @returns {string[]} fsw signs and punctuations\r\n       * @example\r\n       * fsw.parse.text('AS14c20S27106M518x529S14c20481x471S27106503x489 AS18701S1870aS2e734S20500M518x533S1870a489x515S18701482x490S20500508x496S2e734500x468 S38800464x496')\r\n       * \r\n       * return [\r\n       *  'AS14c20S27106M518x529S14c20481x471S27106503x489',\r\n       *  'AS18701S1870aS2e734S20500M518x533S1870a489x515S18701482x490S20500508x496S2e734500x468',\r\n       *  'S38800464x496'\r\n       * ]\r\n       */\n      text: fswText => {\n        if (typeof fswText !== 'string') return [];\n        const regex = `(${re$1.sign}(${re.full})?|${re$1.spatial}(${re.full})?)`;\n        const matches = fswText.match(new RegExp(regex, 'g'));\n        return matches ? [...matches] : [];\n      }\n    };\n    const compose = {\n      /**\n       * Function to compose an fsw symbol with optional coordinate and style string\n       * @function fsw.compose.symbol\n       * @param {SymbolObject} fswSymObject - an fsw symbol object\n       * @returns {string} an fsw symbol string\n       * @example\n       * fsw.compose.symbol({\n       *  'symbol': 'S10000',\n       *  'coord': [480, 480],\n       *  'style': '-C'\n       * })\n       * \n       * return 'S10000480x480-C'\n       */\n      symbol: fswSymObject => {\n        if (typeof fswSymObject.symbol === 'string') {\n          const symbol = (fswSymObject.symbol.match(re$1.symbol) || [''])[0];\n          if (symbol) {\n            const x = (fswSymObject.coord && fswSymObject.coord[0] || '').toString();\n            const y = (fswSymObject.coord && fswSymObject.coord[1] || '').toString();\n            const coord = ((x + 'x' + y).match(re$1.coord) || [''])[0] || '';\n            const styleStr = typeof fswSymObject.style === 'string' && (fswSymObject.style.match(re.full) || [''])[0] || '';\n            return symbol + coord + styleStr;\n          }\n        }\n        return undefined;\n      },\n      /**\n       * Function to compose an fsw sign with style string\n       * @function fsw.compose.sign\n       * @param {SignObject} fswSignObject - an fsw symbol object\n       * @returns {string} an fsw sign string\n       * @example\n       * fsw.compose.sign({\n       *  sequence: ['S10011', 'S10019', 'S2e704', 'S2e748'],\n       *  box: 'M',\n       *  max: [525, 535],\n       *  spatials: [\n       *    {\n       *      symbol: 'S2e748',\n       *      coord: [483, 510]\n       *    },\n       *    {\n       *      symbol: 'S10011',\n       *      coord: [501, 466]\n       *    },\n       *    {\n       *      symbol: 'S2e704',\n       *      coord: [510, 500]\n       *    },\n       *    {\n       *      symbol: 'S10019',\n       *      coord: [476, 475]\n       *    }\n       *  ],\n       *  style: '-C'\n       * })\n       * \n       * return 'AS10011S10019S2e704S2e748M525x535S2e748483x510S10011501x466S2e704510x500S10019476x475-C'\n       */\n      sign: fswSignObject => {\n        let box = typeof fswSignObject.box !== 'string' ? 'M' : (fswSignObject.box + 'M').match(re$1.box);\n        const x = (fswSignObject.max && fswSignObject.max[0] || '').toString();\n        const y = (fswSignObject.max && fswSignObject.max[1] || '').toString();\n        const max = ((x + 'x' + y).match(re$1.coord) || [''])[0] || '';\n        if (!max) return undefined;\n        let prefix = '';\n        if (fswSignObject.sequence && Array.isArray(fswSignObject.sequence)) {\n          prefix = fswSignObject.sequence.map(key => (key.match(re$1.symbol) || [''])[0]).join('');\n          prefix = prefix ? 'A' + prefix : '';\n        }\n        let signbox = '';\n        if (fswSignObject.spatials && Array.isArray(fswSignObject.spatials)) {\n          signbox = fswSignObject.spatials.map(spatial => {\n            if (typeof spatial.symbol === 'string') {\n              const symbol = (spatial.symbol.match(re$1.symbol) || [''])[0];\n              if (symbol) {\n                const x = (spatial.coord && spatial.coord[0] || '').toString();\n                const y = (spatial.coord && spatial.coord[1] || '').toString();\n                const coord = ((x + 'x' + y).match(re$1.coord) || [''])[0] || '';\n                if (coord) {\n                  return symbol + coord;\n                }\n              }\n            }\n            return '';\n          }).join('');\n        }\n        const styleStr = typeof fswSignObject.style === 'string' && (fswSignObject.style.match(re.full) || [''])[0] || '';\n        return prefix + box + max + signbox + styleStr;\n      }\n    };\n\n    /**\r\n     * Function to gather sizing information about an fsw sign or symbol\r\n     * @function fsw.info\r\n     * @param {string} fsw - an fsw sign or symbol\r\n     * @returns {SegmentInfo} information about the fsw string\r\n     * @example\r\n     * fsw.info('AS14c20S27106L518x529S14c20481x471S27106503x489-P10Z2')\r\n     * \r\n     * return {\r\n     *   minX: 481,\r\n     *   minY: 471,\r\n     *   width: 37,\r\n     *   height: 58,\r\n     *   lane: -1,\r\n     *   padding: 10,\r\n     *   segment: 'sign',\r\n     *   zoom: 2\r\n     * }\r\n     */\n\n    const info = fsw => {\n      let lanes = {\n        \"B\": 0,\n        \"L\": -1,\n        \"M\": 0,\n        \"R\": 1\n      };\n      let parsed = parse.sign(fsw);\n      let width, height, segment, x1, x2, y1, y2, lane;\n      if (parsed.spatials) {\n        x1 = Math.min(...parsed.spatials.map(spatial => spatial.coord[0]));\n        x2 = parsed.max[0];\n        width = x2 - x1;\n        y1 = Math.min(...parsed.spatials.map(spatial => spatial.coord[1]));\n        y2 = parsed.max[1];\n        height = y2 - y1;\n        segment = 'sign';\n        lane = parsed.box;\n      } else {\n        parsed = parse.symbol(fsw);\n        lane = \"M\";\n        if (parsed.coord) {\n          x1 = parsed.coord[0];\n          width = (500 - x1) * 2;\n          y1 = parsed.coord[1];\n          height = (500 - y1) * 2;\n          segment = 'symbol';\n        } else {\n          x1 = 490;\n          width = 20;\n          y1 = 490;\n          height = 20;\n          segment = 'none';\n        }\n      }\n      let style = parse$1(parsed.style);\n      let zoom = style.zoom || 1;\n      let padding = style.padding || 0;\n      return {\n        minX: x1,\n        minY: y1,\n        width: width,\n        height: height,\n        segment: segment,\n        lane: lanes[lane],\n        padding: padding,\n        zoom: zoom\n      };\n    };\n    const columnDefaults = {\n      'height': 500,\n      'width': 150,\n      'offset': 50,\n      'pad': 20,\n      'margin': 5,\n      'dynamic': false,\n      'background': undefined,\n      'punctuation': {\n        'spacing': true,\n        'pad': 30,\n        'pull': true\n      },\n      'style': {\n        'detail': ['black', 'white'],\n        'zoom': 1\n      }\n    };\n    /**\r\n     * Function to an object of column options with default values\r\n     * \r\n     * @function fsw.columnDefaultsMerge\r\n     * @param {ColumnOptions} options - object of column options\r\n     * @returns {ColumnOptions} object of column options merged with column defaults\r\n     * @example\r\n     * fsw.columnDefaultsMerge({height: 500,width:150})\r\n     * \r\n     * return {\r\n     *   \"height\": 500,\r\n     *   \"width\": 150,\r\n     *   \"offset\": 50,\r\n     *   \"pad\": 20,\r\n     *   \"margin\": 5,\r\n     *   \"dynamic\": false,\r\n     *   \"punctuation\": {\r\n     *     \"spacing\": true,\r\n     *     \"pad\": 30,\r\n     *     \"pull\": true\r\n     *   },\r\n     *   \"style\": {\r\n     *     \"detail\": [\r\n     *       \"black\",\r\n     *       \"white\"\r\n     *     ],\r\n     *     \"zoom\": 1\r\n     *   }\r\n     * }\r\n     */\n\n    const columnDefaultsMerge = options => {\n      if (typeof options !== 'object') options = {};\n      return {\n        ...columnDefaults,\n        ...options,\n        punctuation: {\n          ...columnDefaults.punctuation,\n          ...options.punctuation\n        },\n        style: {\n          ...columnDefaults.style,\n          ...options.style\n        }\n      };\n    };\n    /**\r\n     * Function to transform an FSW text to an array of columns\r\n     * \r\n     * @function fsw.columns\r\n     * @param {string} fswText - FSW text of signs and punctuation\r\n     * @param {ColumnOptions} options - object of column options\r\n     * @returns {{options:ColumnOptions,widths:number[],columns:ColumnData}} object of column options, widths array, and column data\r\n     * @example\r\n     * fsw.columns('AS14c20S27106M518x529S14c20481x471S27106503x489 AS18701S1870aS2e734S20500M518x533S1870a489x515S18701482x490S20500508x496S2e734500x468 S38800464x496', {height: 500,width:150})\r\n     * \r\n     * return {\r\n     *   \"options\": {\r\n     *     \"height\": 500,\r\n     *     \"width\": 150,\r\n     *     \"offset\": 50,\r\n     *     \"pad\": 20,\r\n     *     \"margin\": 5,\r\n     *     \"dynamic\": false,\r\n     *     \"punctuation\": {\r\n     *       \"spacing\": true,\r\n     *       \"pad\": 30,\r\n     *       \"pull\": true\r\n     *     },\r\n     *     \"style\": {\r\n     *       \"detail\": [\r\n     *         \"black\",\r\n     *         \"white\"\r\n     *       ],\r\n     *       \"zoom\": 1\r\n     *     }\r\n     *   },\r\n     *   \"widths\": [\r\n     *     150\r\n     *   ],\r\n     *   \"columns\": [\r\n     *     [\r\n     *       {\r\n     *         \"x\": 56,\r\n     *         \"y\": 20,\r\n     *         \"minX\": 481,\r\n     *         \"minY\": 471,\r\n     *         \"width\": 37,\r\n     *         \"height\": 58,\r\n     *         \"lane\": 0,\r\n     *         \"padding\": 0,\r\n     *         \"segment\": \"sign\",\r\n     *         \"text\": \"AS14c20S27106M518x529S14c20481x471S27106503x489\",\r\n     *         \"zoom\": 1\r\n     *       },\r\n     *       {\r\n     *         \"x\": 57,\r\n     *         \"y\": 118,\r\n     *         \"minX\": 482,\r\n     *         \"minY\": 468,\r\n     *         \"width\": 36,\r\n     *         \"height\": 65,\r\n     *         \"lane\": 0,\r\n     *         \"padding\": 0,\r\n     *         \"segment\": \"sign\",\r\n     *         \"text\": \"AS18701S1870aS2e734S20500M518x533S1870a489x515S18701482x490S20500508x496S2e734500x468\",\r\n     *         \"zoom\": 1\r\n     *       },\r\n     *       {\r\n     *         \"x\": 39,\r\n     *         \"y\": 203,\r\n     *         \"minX\": 464,\r\n     *         \"minY\": 496,\r\n     *         \"width\": 72,\r\n     *         \"height\": 8,\r\n     *         \"lane\": 0,\r\n     *         \"padding\": 0,\r\n     *         \"segment\": \"symbol\",\r\n     *         \"text\": \"S38800464x496\",\r\n     *         \"zoom\": 1\r\n     *       }\r\n     *     ]\r\n     *   ]\r\n     * }\r\n     */\n\n    const columns = (fswText, options) => {\n      if (typeof fswText !== 'string') return {};\n      const values = columnDefaultsMerge(options);\n      let input = parse.text(fswText);\n      let cursor = 0;\n      let cols = [];\n      let col = [];\n      let plus = 0;\n      let center = parseInt(values.width / 2);\n      let maxHeight = values.height - values.margin;\n      let pullable = true;\n      let finalize = false;\n      for (let val of input) {\n        let informed = info(val);\n        cursor += plus;\n        if (values.punctuation.spacing) {\n          cursor += informed.segment == 'sign' ? values.pad : 0;\n        } else {\n          cursor += values.pad;\n        }\n        finalize = cursor + informed.height > maxHeight;\n        if (finalize && informed.segment == 'symbol' && values.punctuation.pull && pullable) {\n          finalize = false;\n          pullable = false;\n        }\n        if (col.length == 0) {\n          finalize = false;\n        }\n        if (finalize) {\n          cursor = values.pad;\n          cols.push(col);\n          col = [];\n          pullable = true;\n        }\n        col.push(Object.assign(informed, {\n          x: center + values.offset * informed.lane - (500 - informed.minX) * informed.zoom * values.style.zoom,\n          y: cursor,\n          text: val\n        }));\n        cursor += informed.height * informed.zoom * values.style.zoom;\n        if (values.punctuation.spacing) {\n          plus = informed.segment == 'sign' ? values.pad : values.punctuation.pad;\n        } else {\n          plus = values.pad;\n        }\n      }\n      if (col.length) {\n        cols.push(col);\n      } // over height issue when pulling punctuation\n\n      if (values.punctuation.pull) {\n        for (let col of cols) {\n          let last = col[col.length - 1];\n          let diff = last.y + last.height - (values.height - values.margin);\n          if (diff > 0) {\n            let adj = parseInt(diff / col.length) + 1;\n            for (let i in col) {\n              col[i].y -= adj * i + adj;\n            }\n          }\n        }\n      } // contract, expand, adjust\n\n      let widths = [];\n      for (let col of cols) {\n        let min = [center - values.offset - values.pad];\n        let max = [center + values.offset + values.pad];\n        for (let item of col) {\n          min.push(item.x - values.pad);\n          max.push(item.x + item.width + values.pad);\n        }\n        min = Math.min(...min);\n        max = Math.max(...max);\n        let width = values.width;\n        let adj = 0;\n        if (!values.dynamic) {\n          adj = center - parseInt((min + max) / 2);\n        } else {\n          width = max - min;\n          adj = -min;\n        }\n        for (let item of col) {\n          item.x += adj;\n        }\n        widths.push(width);\n      }\n      return {\n        'options': values,\n        'widths': widths,\n        'columns': cols\n      };\n    };\n\n    /**\r\n     * Array of numbers for kinds of symbols: writing, location, and punctuation.\r\n     * @alias fsw.kind\r\n     * @type {number[]}\r\n     */\n\n    const kind = [0x100, 0x37f, 0x387];\n    /**\r\n     * Array of numbers for categories of symbols: hand, movement, dynamics, head, trunk & limb, location, and punctuation.\r\n     * @alias fsw.category\r\n     * @type {number[]}\r\n     */\n\n    const category = [0x100, 0x205, 0x2f7, 0x2ff, 0x36d, 0x37f, 0x387];\n    /**\r\n     * Array of numbers for the 30 symbol groups.\r\n     * @alias fsw.group\r\n     * @type {number[]}\r\n     */\n\n    const group = [0x100, 0x10e, 0x11e, 0x144, 0x14c, 0x186, 0x1a4, 0x1ba, 0x1cd, 0x1f5, 0x205, 0x216, 0x22a, 0x255, 0x265, 0x288, 0x2a6, 0x2b7, 0x2d5, 0x2e3, 0x2f7, 0x2ff, 0x30a, 0x32a, 0x33b, 0x359, 0x36d, 0x376, 0x37f, 0x387];\n    /**\r\n     * Object of symbol ranges with starting and ending numbers.\r\n     * \r\n     *   { all, writing, hand, movement, dynamic, head, hcenter, vcenter, trunk, limb, location, punctuation }\r\n     * @alias fsw.ranges\r\n     * @type {object}\r\n     */\n\n    const ranges = {\n      'all': [0x100, 0x38b],\n      'writing': [0x100, 0x37e],\n      'hand': [0x100, 0x204],\n      'movement': [0x205, 0x2f6],\n      'dynamic': [0x2f7, 0x2fe],\n      'head': [0x2ff, 0x36c],\n      'hcenter': [0x2ff, 0x36c],\n      'vcenter': [0x2ff, 0x375],\n      'trunk': [0x36d, 0x375],\n      'limb': [0x376, 0x37e],\n      'location': [0x37f, 0x386],\n      'punctuation': [0x387, 0x38b]\n    };\n    /**\r\n     * Function to test if symbol is of a certain type.\r\n     * @function fsw.isType\r\n     * @param {string} key - an FSW symbol key\r\n     * @param {string} type - the name of a symbol range\r\n     * @returns {boolean} is symbol of specified type\r\n     * @example\r\n     * fsw.isType('S10000', 'hand')\r\n     * \r\n     * return true\r\n     */\n\n    const isType = (key, type) => {\n      const parsed = parse.symbol(key);\n      if (parsed.symbol) {\n        const dec = parseInt(parsed.symbol.slice(1, 4), 16);\n        const range = ranges[type];\n        if (range) {\n          return range[0] <= dec && range[1] >= dec;\n        }\n      }\n      return false;\n    };\n\n    /**\r\n     * Array of colors associated with the seven symbol categories.\r\n     * @alias fsw.colors\r\n     * @type {string[]}\r\n     */\n\n    const colors = ['#0000CC', '#CC0000', '#FF0099', '#006600', '#000000', '#884411', '#FF9900'];\n    /**\r\n     * Function that returns the standardized color for a symbol.\r\n     * @function fsw.colorize\r\n     * @param {string} key - an FSW symbol key\r\n     * @returns {string} name of standardized color for symbol\r\n     * @example\r\n     * fsw.colorize('S10000')\r\n     * \r\n     * return '#0000CC'\r\n     */\n\n    const colorize = key => {\n      const parsed = parse.symbol(key);\n      let color = '#000000';\n      if (parsed.symbol) {\n        const dec = parseInt(parsed.symbol.slice(1, 4), 16);\n        const index = category.findIndex(val => val > dec);\n        color = colors[index < 0 ? 6 : index - 1];\n      }\n      return color;\n    };\n    exports.category = category;\n    exports.colorize = colorize;\n    exports.colors = colors;\n    exports.columnDefaults = columnDefaults;\n    exports.columnDefaultsMerge = columnDefaultsMerge;\n    exports.columns = columns;\n    exports.compose = compose;\n    exports.group = group;\n    exports.info = info;\n    exports.isType = isType;\n    exports.kind = kind;\n    exports.parse = parse;\n    exports.ranges = ranges;\n    exports.re = re$1;\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n  });\n\n  /* support ongoing development on https://patreon.com/signwriting */\n});\nexport { fsw as f };"],
  "mappings": "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",
  "names": ["exports", "x", "y", "fsw", "col"]
}
